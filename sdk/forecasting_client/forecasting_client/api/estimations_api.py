# coding: utf-8

"""
    Forecasting

    Forecasting API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from forecasting_client.models.estimated_consumption_dto_list_api_response_dto import EstimatedConsumptionDTOListApiResponseDTO

from forecasting_client.api_client import ApiClient, RequestSerialized
from forecasting_client.api_response import ApiResponse
from forecasting_client.rest import RESTResponseType


class EstimationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_estimations_servicelocations_sluuid_consumptions(
        self,
        sluuid: Annotated[StrictStr, Field(description="The unique identifier of the service location")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start datetime of the estimation")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End datetime of the estimation")] = None,
        utility_type: Annotated[Optional[StrictStr], Field(description="Utility type for which we are retrieving the estimation")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure for which are retrieving the estimation")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period on which the estimated consumptions will be grouped")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EstimatedConsumptionDTOListApiResponseDTO:
        """Retrieves the estimated consumptions for the specified service location

        Retrieves the estimated consumptions for the specified service location

        :param sluuid: The unique identifier of the service location (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start datetime of the estimation
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End datetime of the estimation
        :type end_date_time: datetime
        :param utility_type: Utility type for which we are retrieving the estimation
        :type utility_type: str
        :param unit_of_measure: Unit of measure for which are retrieving the estimation
        :type unit_of_measure: str
        :param group_by_period: Period on which the estimated consumptions will be grouped
        :type group_by_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_estimations_servicelocations_sluuid_consumptions_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "ProblemDetails",
            '200': "EstimatedConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_estimations_servicelocations_sluuid_consumptions_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="The unique identifier of the service location")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start datetime of the estimation")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End datetime of the estimation")] = None,
        utility_type: Annotated[Optional[StrictStr], Field(description="Utility type for which we are retrieving the estimation")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure for which are retrieving the estimation")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period on which the estimated consumptions will be grouped")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EstimatedConsumptionDTOListApiResponseDTO]:
        """Retrieves the estimated consumptions for the specified service location

        Retrieves the estimated consumptions for the specified service location

        :param sluuid: The unique identifier of the service location (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start datetime of the estimation
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End datetime of the estimation
        :type end_date_time: datetime
        :param utility_type: Utility type for which we are retrieving the estimation
        :type utility_type: str
        :param unit_of_measure: Unit of measure for which are retrieving the estimation
        :type unit_of_measure: str
        :param group_by_period: Period on which the estimated consumptions will be grouped
        :type group_by_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_estimations_servicelocations_sluuid_consumptions_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "ProblemDetails",
            '200': "EstimatedConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_estimations_servicelocations_sluuid_consumptions_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="The unique identifier of the service location")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start datetime of the estimation")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End datetime of the estimation")] = None,
        utility_type: Annotated[Optional[StrictStr], Field(description="Utility type for which we are retrieving the estimation")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure for which are retrieving the estimation")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period on which the estimated consumptions will be grouped")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves the estimated consumptions for the specified service location

        Retrieves the estimated consumptions for the specified service location

        :param sluuid: The unique identifier of the service location (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start datetime of the estimation
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End datetime of the estimation
        :type end_date_time: datetime
        :param utility_type: Utility type for which we are retrieving the estimation
        :type utility_type: str
        :param unit_of_measure: Unit of measure for which are retrieving the estimation
        :type unit_of_measure: str
        :param group_by_period: Period on which the estimated consumptions will be grouped
        :type group_by_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_estimations_servicelocations_sluuid_consumptions_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': "ProblemDetails",
            '200': "EstimatedConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_estimations_servicelocations_sluuid_consumptions_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        start_date_time,
        end_date_time,
        utility_type,
        unit_of_measure,
        group_by_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if group_by_period is not None:
            
            _query_params.append(('groupByPeriod', group_by_period))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Estimations/servicelocations/{sluuid}/consumptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


