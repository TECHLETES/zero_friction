# coding: utf-8

"""
    Forecasting

    Forecasting API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from forecasting_client.models.contract_status import ContractStatus
from forecasting_client.models.entity_subject_type import EntitySubjectType
from forecasting_client.models.estimable_contracted_service_dto import EstimableContractedServiceDTO
from typing import Optional, Set
from typing_extensions import Self

class EstimableContractDTO(BaseModel):
    """
    EstimableContractDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    contract_status: Optional[ContractStatus] = Field(default=None, alias="contractStatus")
    supply_start_date_time: Optional[datetime] = Field(default=None, alias="supplyStartDateTime")
    supply_end_date_time: Optional[datetime] = Field(default=None, alias="supplyEndDateTime")
    supply_start_year: Optional[StrictInt] = Field(default=None, alias="supplyStartYear")
    supply_end_year: Optional[StrictInt] = Field(default=None, alias="supplyEndYear")
    contract_services: Optional[List[EstimableContractedServiceDTO]] = Field(default=None, alias="contractServices")
    calculation_years_in_progress: Optional[List[StrictInt]] = Field(default=None, alias="calculationYearsInProgress")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    is_estimation_in_progress: Optional[StrictBool] = Field(default=None, alias="isEstimationInProgress")
    is_invoice_estimation_in_progress: Optional[StrictBool] = Field(default=None, alias="isInvoiceEstimationInProgress")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "contractStatus", "supplyStartDateTime", "supplyEndDateTime", "supplyStartYear", "supplyEndYear", "contractServices", "calculationYearsInProgress", "customerId", "timeZone", "isEstimationInProgress", "isInvoiceEstimationInProgress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EstimableContractDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contract_services (list)
        _items = []
        if self.contract_services:
            for _item_contract_services in self.contract_services:
                if _item_contract_services:
                    _items.append(_item_contract_services.to_dict())
            _dict['contractServices'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if contract_status (nullable) is None
        # and model_fields_set contains the field
        if self.contract_status is None and "contract_status" in self.model_fields_set:
            _dict['contractStatus'] = None

        # set to None if supply_end_year (nullable) is None
        # and model_fields_set contains the field
        if self.supply_end_year is None and "supply_end_year" in self.model_fields_set:
            _dict['supplyEndYear'] = None

        # set to None if contract_services (nullable) is None
        # and model_fields_set contains the field
        if self.contract_services is None and "contract_services" in self.model_fields_set:
            _dict['contractServices'] = None

        # set to None if calculation_years_in_progress (nullable) is None
        # and model_fields_set contains the field
        if self.calculation_years_in_progress is None and "calculation_years_in_progress" in self.model_fields_set:
            _dict['calculationYearsInProgress'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EstimableContractDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "contractStatus": obj.get("contractStatus"),
            "supplyStartDateTime": obj.get("supplyStartDateTime"),
            "supplyEndDateTime": obj.get("supplyEndDateTime"),
            "supplyStartYear": obj.get("supplyStartYear"),
            "supplyEndYear": obj.get("supplyEndYear"),
            "contractServices": [EstimableContractedServiceDTO.from_dict(_item) for _item in obj["contractServices"]] if obj.get("contractServices") is not None else None,
            "calculationYearsInProgress": obj.get("calculationYearsInProgress"),
            "customerId": obj.get("customerId"),
            "timeZone": obj.get("timeZone"),
            "isEstimationInProgress": obj.get("isEstimationInProgress"),
            "isInvoiceEstimationInProgress": obj.get("isInvoiceEstimationInProgress")
        })
        return _obj


