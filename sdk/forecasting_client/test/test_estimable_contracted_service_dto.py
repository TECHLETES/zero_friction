# coding: utf-8

"""
    Forecasting

    Forecasting API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from forecasting_client.models.estimable_contracted_service_dto import EstimableContractedServiceDTO

class TestEstimableContractedServiceDTO(unittest.TestCase):
    """EstimableContractedServiceDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimableContractedServiceDTO:
        """Test EstimableContractedServiceDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimableContractedServiceDTO`
        """
        model = EstimableContractedServiceDTO()
        if include_optional:
            return EstimableContractedServiceDTO(
                service_location_id = '',
                property_group_id = '',
                utility_type = 'none',
                metering_type = 'none',
                unit_of_measure = 'none',
                external_identifier = '',
                consumer_group_id = '',
                supply_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                supply_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                supply_start_year = 56,
                supply_end_year = 56,
                estimated_annual_volumes = [
                    forecasting_client.models.estimated_annual_volume_dto.EstimatedAnnualVolumeDTO(
                        year = 56, 
                        value = 1.337, 
                        origin = null, 
                        last_recalculated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return EstimableContractedServiceDTO(
        )
        """

    def testEstimableContractedServiceDTO(self):
        """Test EstimableContractedServiceDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
