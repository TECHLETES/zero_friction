# coding: utf-8

"""
    Forecasting

    Forecasting API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from forecasting_client.api.consumer_groups_api import ConsumerGroupsApi


class TestConsumerGroupsApi(unittest.TestCase):
    """ConsumerGroupsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ConsumerGroupsApi()

    def tearDown(self) -> None:
        pass

    def test_delete_consumer_group(self) -> None:
        """Test case for delete_consumer_group

        Deletes a consumer group by its identifier
        """
        pass

    def test_get_available_utility_types(self) -> None:
        """Test case for get_available_utility_types

        Retrieves the available utility types applicable for consumer groups
        """
        pass

    def test_get_consumer_group(self) -> None:
        """Test case for get_consumer_group

        Retrieves a specific consumer group by its identifier
        """
        pass

    def test_get_consumer_group_and_convert(self) -> None:
        """Test case for get_consumer_group_and_convert

        Retrieves a specific consumer group by its identifier and converts to the specified unit of measure
        """
        pass

    def test_get_consumergroups(self) -> None:
        """Test case for get_consumergroups

        Retrieves all consumer groups
        """
        pass

    def test_get_service_location_matching_consumer_groups(self) -> None:
        """Test case for get_service_location_matching_consumer_groups

        Retrieves the matching consumer groups for a specific property group
        """
        pass

    def test_post_consumergroups(self) -> None:
        """Test case for post_consumergroups

        Creates a new consumer group
        """
        pass

    def test_update_consumer_group(self) -> None:
        """Test case for update_consumer_group

        Updates an existing consumer group
        """
        pass


if __name__ == '__main__':
    unittest.main()
