# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.channel_measurement_request import ChannelMeasurementRequest
from typing import Optional, Set
from typing_extensions import Self

class UploadMeasurementsRequest(BaseModel):
    """
    Request data to upload measurements for specific meters.
    """ # noqa: E501
    automatic_processing: Optional[StrictBool] = Field(default=None, description="Indicates if we should process the measurement automatically after validation has succeeded.  By default, this value is set to <value>true</value>.", alias="automaticProcessing")
    source: Optional[StrictStr] = Field(default=None, description="Free text field to mark the source of the measurements.")
    upload_identifier: Optional[StrictStr] = Field(default=None, description="Optional field which allows you to configure an identifier for the upload of measurements.", alias="uploadIdentifier")
    channel_measurements: Optional[List[ChannelMeasurementRequest]] = Field(default=None, description="Should contain the list of measurements for a specific channel.", alias="channelMeasurements")
    __properties: ClassVar[List[str]] = ["automaticProcessing", "source", "uploadIdentifier", "channelMeasurements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadMeasurementsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channel_measurements (list)
        _items = []
        if self.channel_measurements:
            for _item_channel_measurements in self.channel_measurements:
                if _item_channel_measurements:
                    _items.append(_item_channel_measurements.to_dict())
            _dict['channelMeasurements'] = _items
        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if upload_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.upload_identifier is None and "upload_identifier" in self.model_fields_set:
            _dict['uploadIdentifier'] = None

        # set to None if channel_measurements (nullable) is None
        # and model_fields_set contains the field
        if self.channel_measurements is None and "channel_measurements" in self.model_fields_set:
            _dict['channelMeasurements'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadMeasurementsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticProcessing": obj.get("automaticProcessing"),
            "source": obj.get("source"),
            "uploadIdentifier": obj.get("uploadIdentifier"),
            "channelMeasurements": [ChannelMeasurementRequest.from_dict(_item) for _item in obj["channelMeasurements"]] if obj.get("channelMeasurements") is not None else None
        })
        return _obj


