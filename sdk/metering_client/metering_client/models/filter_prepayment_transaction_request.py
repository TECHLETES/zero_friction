# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.prepayment_transaction_origin import PrepaymentTransactionOrigin
from metering_client.models.prepayment_transaction_type import PrepaymentTransactionType
from typing import Optional, Set
from typing_extensions import Self

class FilterPrepaymentTransactionRequest(BaseModel):
    """
    FilterPrepaymentTransactionRequest
    """ # noqa: E501
    meter_id: Optional[StrictStr] = Field(default=None, alias="meterId")
    channel_identifiers: Optional[List[StrictStr]] = Field(default=None, alias="channelIdentifiers")
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    origin: Optional[PrepaymentTransactionOrigin] = None
    type: Optional[PrepaymentTransactionType] = None
    limit: Optional[StrictInt] = None
    order_by: Optional[StrictStr] = Field(default=None, alias="orderBy")
    __properties: ClassVar[List[str]] = ["meterId", "channelIdentifiers", "startDateTime", "endDateTime", "origin", "type", "limit", "orderBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterPrepaymentTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if meter_id (nullable) is None
        # and model_fields_set contains the field
        if self.meter_id is None and "meter_id" in self.model_fields_set:
            _dict['meterId'] = None

        # set to None if channel_identifiers (nullable) is None
        # and model_fields_set contains the field
        if self.channel_identifiers is None and "channel_identifiers" in self.model_fields_set:
            _dict['channelIdentifiers'] = None

        # set to None if start_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_date_time is None and "start_date_time" in self.model_fields_set:
            _dict['startDateTime'] = None

        # set to None if end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_date_time is None and "end_date_time" in self.model_fields_set:
            _dict['endDateTime'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if order_by (nullable) is None
        # and model_fields_set contains the field
        if self.order_by is None and "order_by" in self.model_fields_set:
            _dict['orderBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterPrepaymentTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meterId": obj.get("meterId"),
            "channelIdentifiers": obj.get("channelIdentifiers"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "origin": obj.get("origin"),
            "type": obj.get("type"),
            "limit": obj.get("limit"),
            "orderBy": obj.get("orderBy")
        })
        return _obj


