# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.data_frequency import DataFrequency
from metering_client.models.direction import Direction
from metering_client.models.formula_consumption_value_dto import FormulaConsumptionValueDTO
from metering_client.models.metering_type import MeteringType
from metering_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from metering_client.models.unit_of_measure import UnitOfMeasure
from metering_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class FormulaConsumptionDTO(BaseModel):
    """
    Represents consumption data calculated by a formula for a specific output channel
    """ # noqa: E501
    output_channel_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the output channel", alias="outputChannelId")
    production_day: Optional[StrictInt] = Field(default=None, description="Day number for which the consumption is calculated", alias="productionDay")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone identifier for the consumption data", alias="timeZone")
    production_day_start_utc: Optional[datetime] = Field(default=None, description="Start of the production day in UTC", alias="productionDayStartUtc")
    production_day_end_utc: Optional[datetime] = Field(default=None, description="End of the production day in UTC", alias="productionDayEndUtc")
    values: Optional[List[FormulaConsumptionValueDTO]] = Field(default=None, description="List of consumption values with their time periods")
    metering_type: Optional[MeteringType] = Field(default=None, description="Type of metering used for the consumption data", alias="meteringType")
    utility_type: Optional[UtilityType] = Field(default=None, description="Type of utility being measured", alias="utilityType")
    direction: Optional[Direction] = Field(default=None, description="Direction of the consumption flow")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, description="Unit of measure for the consumption values", alias="unitOfMeasure")
    data_frequency: Optional[DataFrequency] = Field(default=None, description="Frequency of the consumption data points", alias="dataFrequency")
    property_group: Optional[PropertyGroupReferenceDTO] = Field(default=None, description="Reference to the property group associated with this consumption", alias="propertyGroup")
    time_of_use: Optional[StrictStr] = Field(default=None, description="Time of use classification for the consumption", alias="timeOfUse")
    external_channel_identifier: Optional[StrictStr] = Field(default=None, description="External identifier for the channel", alias="externalChannelIdentifier")
    service_location_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the service location", alias="serviceLocationId")
    formula_stream_name: Optional[StrictStr] = Field(default=None, description="Name of the formula stream that generated this consumption", alias="formulaStreamName")
    __properties: ClassVar[List[str]] = ["outputChannelId", "productionDay", "timeZone", "productionDayStartUtc", "productionDayEndUtc", "values", "meteringType", "utilityType", "direction", "unitOfMeasure", "dataFrequency", "propertyGroup", "timeOfUse", "externalChannelIdentifier", "serviceLocationId", "formulaStreamName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormulaConsumptionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        # override the default output from pydantic by calling `to_dict()` of property_group
        if self.property_group:
            _dict['propertyGroup'] = self.property_group.to_dict()
        # set to None if output_channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.output_channel_id is None and "output_channel_id" in self.model_fields_set:
            _dict['outputChannelId'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if values (nullable) is None
        # and model_fields_set contains the field
        if self.values is None and "values" in self.model_fields_set:
            _dict['values'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if data_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.data_frequency is None and "data_frequency" in self.model_fields_set:
            _dict['dataFrequency'] = None

        # set to None if property_group (nullable) is None
        # and model_fields_set contains the field
        if self.property_group is None and "property_group" in self.model_fields_set:
            _dict['propertyGroup'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if external_channel_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_channel_identifier is None and "external_channel_identifier" in self.model_fields_set:
            _dict['externalChannelIdentifier'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if formula_stream_name (nullable) is None
        # and model_fields_set contains the field
        if self.formula_stream_name is None and "formula_stream_name" in self.model_fields_set:
            _dict['formulaStreamName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormulaConsumptionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outputChannelId": obj.get("outputChannelId"),
            "productionDay": obj.get("productionDay"),
            "timeZone": obj.get("timeZone"),
            "productionDayStartUtc": obj.get("productionDayStartUtc"),
            "productionDayEndUtc": obj.get("productionDayEndUtc"),
            "values": [FormulaConsumptionValueDTO.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None,
            "meteringType": obj.get("meteringType"),
            "utilityType": obj.get("utilityType"),
            "direction": obj.get("direction"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "dataFrequency": obj.get("dataFrequency"),
            "propertyGroup": PropertyGroupReferenceDTO.from_dict(obj["propertyGroup"]) if obj.get("propertyGroup") is not None else None,
            "timeOfUse": obj.get("timeOfUse"),
            "externalChannelIdentifier": obj.get("externalChannelIdentifier"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "formulaStreamName": obj.get("formulaStreamName")
        })
        return _obj


