# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.meter_reading_frequency import MeterReadingFrequency
from metering_client.models.meter_type import MeterType
from typing import Optional, Set
from typing_extensions import Self

class GetMetersQueryParams(BaseModel):
    """
    GetMetersQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    servicelocation_ids: Optional[List[StrictStr]] = Field(default=None, alias="servicelocationIds")
    property_group_ids: Optional[List[StrictStr]] = Field(default=None, alias="propertyGroupIds")
    meter_type: Optional[MeterType] = Field(default=None, alias="meterType")
    received_metering_data_start: Optional[datetime] = Field(default=None, alias="receivedMeteringDataStart")
    received_metering_data_end: Optional[datetime] = Field(default=None, alias="receivedMeteringDataEnd")
    next_expected_reading_date_start: Optional[datetime] = Field(default=None, alias="nextExpectedReadingDateStart")
    next_expected_reading_date_end: Optional[datetime] = Field(default=None, alias="nextExpectedReadingDateEnd")
    parent_serial_number: Optional[StrictStr] = Field(default=None, alias="parentSerialNumber")
    filter_by_reading_frequency: Optional[StrictBool] = Field(default=None, alias="filterByReadingFrequency")
    reading_frequency: Optional[MeterReadingFrequency] = Field(default=None, alias="readingFrequency")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    meter_type_group: Optional[StrictStr] = Field(default=None, alias="meterTypeGroup")
    meter_serial_number: Optional[StrictStr] = Field(default=None, alias="meterSerialNumber")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "servicelocationIds", "propertyGroupIds", "meterType", "receivedMeteringDataStart", "receivedMeteringDataEnd", "nextExpectedReadingDateStart", "nextExpectedReadingDateEnd", "parentSerialNumber", "filterByReadingFrequency", "readingFrequency", "customerId", "meterTypeGroup", "meterSerialNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMetersQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if servicelocation_ids (nullable) is None
        # and model_fields_set contains the field
        if self.servicelocation_ids is None and "servicelocation_ids" in self.model_fields_set:
            _dict['servicelocationIds'] = None

        # set to None if property_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_ids is None and "property_group_ids" in self.model_fields_set:
            _dict['propertyGroupIds'] = None

        # set to None if meter_type (nullable) is None
        # and model_fields_set contains the field
        if self.meter_type is None and "meter_type" in self.model_fields_set:
            _dict['meterType'] = None

        # set to None if received_metering_data_start (nullable) is None
        # and model_fields_set contains the field
        if self.received_metering_data_start is None and "received_metering_data_start" in self.model_fields_set:
            _dict['receivedMeteringDataStart'] = None

        # set to None if received_metering_data_end (nullable) is None
        # and model_fields_set contains the field
        if self.received_metering_data_end is None and "received_metering_data_end" in self.model_fields_set:
            _dict['receivedMeteringDataEnd'] = None

        # set to None if next_expected_reading_date_start (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_reading_date_start is None and "next_expected_reading_date_start" in self.model_fields_set:
            _dict['nextExpectedReadingDateStart'] = None

        # set to None if next_expected_reading_date_end (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_reading_date_end is None and "next_expected_reading_date_end" in self.model_fields_set:
            _dict['nextExpectedReadingDateEnd'] = None

        # set to None if parent_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.parent_serial_number is None and "parent_serial_number" in self.model_fields_set:
            _dict['parentSerialNumber'] = None

        # set to None if reading_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.reading_frequency is None and "reading_frequency" in self.model_fields_set:
            _dict['readingFrequency'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if meter_type_group (nullable) is None
        # and model_fields_set contains the field
        if self.meter_type_group is None and "meter_type_group" in self.model_fields_set:
            _dict['meterTypeGroup'] = None

        # set to None if meter_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.meter_serial_number is None and "meter_serial_number" in self.model_fields_set:
            _dict['meterSerialNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMetersQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "servicelocationIds": obj.get("servicelocationIds"),
            "propertyGroupIds": obj.get("propertyGroupIds"),
            "meterType": obj.get("meterType"),
            "receivedMeteringDataStart": obj.get("receivedMeteringDataStart"),
            "receivedMeteringDataEnd": obj.get("receivedMeteringDataEnd"),
            "nextExpectedReadingDateStart": obj.get("nextExpectedReadingDateStart"),
            "nextExpectedReadingDateEnd": obj.get("nextExpectedReadingDateEnd"),
            "parentSerialNumber": obj.get("parentSerialNumber"),
            "filterByReadingFrequency": obj.get("filterByReadingFrequency"),
            "readingFrequency": obj.get("readingFrequency"),
            "customerId": obj.get("customerId"),
            "meterTypeGroup": obj.get("meterTypeGroup"),
            "meterSerialNumber": obj.get("meterSerialNumber")
        })
        return _obj


