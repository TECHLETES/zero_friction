# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metering_client.models.data_frequency import DataFrequency
from metering_client.models.direction import Direction
from metering_client.models.entity_subject_type import EntitySubjectType
from metering_client.models.incrementation_type import IncrementationType
from metering_client.models.metering_issue_reference import MeteringIssueReference
from metering_client.models.metering_type import MeteringType
from metering_client.models.unit_of_measure import UnitOfMeasure
from metering_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class MeasurementDTO(BaseModel):
    """
    Represents a measurement reading from a meter with associated metadata
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    external_channel_identifier: Optional[StrictStr] = Field(default=None, description="External identifier for the channel", alias="externalChannelIdentifier")
    meter_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the meter that took the measurement", alias="meterSerialNumber")
    operation_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the operation that generated this measurement", alias="operationId")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The measured value")
    end_date_time: Optional[datetime] = Field(default=None, description="Date and time when the measurement was taken", alias="endDateTime")
    deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether this measurement has been deleted")
    data_frequency: Optional[DataFrequency] = Field(default=None, description="Frequency of the measurement data points", alias="dataFrequency")
    incrementation_type: Optional[IncrementationType] = Field(default=None, description="Type of increment used for the measurement", alias="incrementationType")
    metering_type: Optional[MeteringType] = Field(default=None, description="Type of metering used for the measurement", alias="meteringType")
    utility_type: Optional[UtilityType] = Field(default=None, description="Type of utility being measured", alias="utilityType")
    direction: Optional[Direction] = Field(default=None, description="Direction of the measurement flow")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, description="Unit of measure for the measurement value", alias="unitOfMeasure")
    time_of_use: Optional[StrictStr] = Field(default=None, description="Time of use classification for the measurement", alias="timeOfUse")
    issue: Optional[MeteringIssueReference] = Field(default=None, description="Reference to any metering issue associated with this measurement")
    has_issue: Optional[StrictBool] = Field(default=None, description="Indicates whether this measurement has an associated issue", alias="hasIssue")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "externalChannelIdentifier", "meterSerialNumber", "operationId", "value", "endDateTime", "deleted", "dataFrequency", "incrementationType", "meteringType", "utilityType", "direction", "unitOfMeasure", "timeOfUse", "issue", "hasIssue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasurementDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
            "has_issue",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issue
        if self.issue:
            _dict['issue'] = self.issue.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if external_channel_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_channel_identifier is None and "external_channel_identifier" in self.model_fields_set:
            _dict['externalChannelIdentifier'] = None

        # set to None if meter_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.meter_serial_number is None and "meter_serial_number" in self.model_fields_set:
            _dict['meterSerialNumber'] = None

        # set to None if operation_id (nullable) is None
        # and model_fields_set contains the field
        if self.operation_id is None and "operation_id" in self.model_fields_set:
            _dict['operationId'] = None

        # set to None if data_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.data_frequency is None and "data_frequency" in self.model_fields_set:
            _dict['dataFrequency'] = None

        # set to None if incrementation_type (nullable) is None
        # and model_fields_set contains the field
        if self.incrementation_type is None and "incrementation_type" in self.model_fields_set:
            _dict['incrementationType'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if issue (nullable) is None
        # and model_fields_set contains the field
        if self.issue is None and "issue" in self.model_fields_set:
            _dict['issue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasurementDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "externalChannelIdentifier": obj.get("externalChannelIdentifier"),
            "meterSerialNumber": obj.get("meterSerialNumber"),
            "operationId": obj.get("operationId"),
            "value": obj.get("value"),
            "endDateTime": obj.get("endDateTime"),
            "deleted": obj.get("deleted"),
            "dataFrequency": obj.get("dataFrequency"),
            "incrementationType": obj.get("incrementationType"),
            "meteringType": obj.get("meteringType"),
            "utilityType": obj.get("utilityType"),
            "direction": obj.get("direction"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "timeOfUse": obj.get("timeOfUse"),
            "issue": MeteringIssueReference.from_dict(obj["issue"]) if obj.get("issue") is not None else None,
            "hasIssue": obj.get("hasIssue")
        })
        return _obj


