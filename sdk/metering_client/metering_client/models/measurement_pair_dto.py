# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.measurement_dto import MeasurementDTO
from typing import Optional, Set
from typing_extensions import Self

class MeasurementPairDTO(BaseModel):
    """
    MeasurementPairDTO
    """ # noqa: E501
    external_channel_id: Optional[StrictStr] = Field(default=None, alias="externalChannelId")
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    previous_measurements: Optional[List[MeasurementDTO]] = Field(default=None, alias="previousMeasurements")
    next_measurements: Optional[List[MeasurementDTO]] = Field(default=None, alias="nextMeasurements")
    previous_measurement: Optional[MeasurementDTO] = Field(default=None, description="Represents a measurement reading from a meter with associated metadata", alias="previousMeasurement")
    next_measurement: Optional[MeasurementDTO] = Field(default=None, description="Represents a measurement reading from a meter with associated metadata", alias="nextMeasurement")
    __properties: ClassVar[List[str]] = ["externalChannelId", "startDateTime", "endDateTime", "previousMeasurements", "nextMeasurements", "previousMeasurement", "nextMeasurement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasurementPairDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in previous_measurements (list)
        _items = []
        if self.previous_measurements:
            for _item_previous_measurements in self.previous_measurements:
                if _item_previous_measurements:
                    _items.append(_item_previous_measurements.to_dict())
            _dict['previousMeasurements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in next_measurements (list)
        _items = []
        if self.next_measurements:
            for _item_next_measurements in self.next_measurements:
                if _item_next_measurements:
                    _items.append(_item_next_measurements.to_dict())
            _dict['nextMeasurements'] = _items
        # override the default output from pydantic by calling `to_dict()` of previous_measurement
        if self.previous_measurement:
            _dict['previousMeasurement'] = self.previous_measurement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_measurement
        if self.next_measurement:
            _dict['nextMeasurement'] = self.next_measurement.to_dict()
        # set to None if external_channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_channel_id is None and "external_channel_id" in self.model_fields_set:
            _dict['externalChannelId'] = None

        # set to None if previous_measurements (nullable) is None
        # and model_fields_set contains the field
        if self.previous_measurements is None and "previous_measurements" in self.model_fields_set:
            _dict['previousMeasurements'] = None

        # set to None if next_measurements (nullable) is None
        # and model_fields_set contains the field
        if self.next_measurements is None and "next_measurements" in self.model_fields_set:
            _dict['nextMeasurements'] = None

        # set to None if previous_measurement (nullable) is None
        # and model_fields_set contains the field
        if self.previous_measurement is None and "previous_measurement" in self.model_fields_set:
            _dict['previousMeasurement'] = None

        # set to None if next_measurement (nullable) is None
        # and model_fields_set contains the field
        if self.next_measurement is None and "next_measurement" in self.model_fields_set:
            _dict['nextMeasurement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasurementPairDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalChannelId": obj.get("externalChannelId"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "previousMeasurements": [MeasurementDTO.from_dict(_item) for _item in obj["previousMeasurements"]] if obj.get("previousMeasurements") is not None else None,
            "nextMeasurements": [MeasurementDTO.from_dict(_item) for _item in obj["nextMeasurements"]] if obj.get("nextMeasurements") is not None else None,
            "previousMeasurement": MeasurementDTO.from_dict(obj["previousMeasurement"]) if obj.get("previousMeasurement") is not None else None,
            "nextMeasurement": MeasurementDTO.from_dict(obj["nextMeasurement"]) if obj.get("nextMeasurement") is not None else None
        })
        return _obj


