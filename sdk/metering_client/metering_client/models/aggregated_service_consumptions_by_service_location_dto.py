# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metering_client.models.address_dto import AddressDTO
from metering_client.models.unit_of_measure import UnitOfMeasure
from metering_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class AggregatedServiceConsumptionsByServiceLocationDTO(BaseModel):
    """
    AggregatedServiceConsumptionsByServiceLocationDTO
    """ # noqa: E501
    service_location: Optional[StrictStr] = Field(default=None, alias="serviceLocation")
    service_location_address: Optional[AddressDTO] = Field(default=None, alias="serviceLocationAddress")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="unitOfMeasure")
    time_of_use: Optional[StrictStr] = Field(default=None, alias="timeOfUse")
    period_start_date: Optional[datetime] = Field(default=None, alias="periodStartDate")
    period_end_date: Optional[datetime] = Field(default=None, alias="periodEndDate")
    total: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["serviceLocation", "serviceLocationAddress", "utilityType", "unitOfMeasure", "timeOfUse", "periodStartDate", "periodEndDate", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregatedServiceConsumptionsByServiceLocationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_location_address
        if self.service_location_address:
            _dict['serviceLocationAddress'] = self.service_location_address.to_dict()
        # set to None if service_location (nullable) is None
        # and model_fields_set contains the field
        if self.service_location is None and "service_location" in self.model_fields_set:
            _dict['serviceLocation'] = None

        # set to None if service_location_address (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_address is None and "service_location_address" in self.model_fields_set:
            _dict['serviceLocationAddress'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if period_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.period_start_date is None and "period_start_date" in self.model_fields_set:
            _dict['periodStartDate'] = None

        # set to None if period_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.period_end_date is None and "period_end_date" in self.model_fields_set:
            _dict['periodEndDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregatedServiceConsumptionsByServiceLocationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceLocation": obj.get("serviceLocation"),
            "serviceLocationAddress": AddressDTO.from_dict(obj["serviceLocationAddress"]) if obj.get("serviceLocationAddress") is not None else None,
            "utilityType": obj.get("utilityType"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "timeOfUse": obj.get("timeOfUse"),
            "periodStartDate": obj.get("periodStartDate"),
            "periodEndDate": obj.get("periodEndDate"),
            "total": obj.get("total")
        })
        return _obj


