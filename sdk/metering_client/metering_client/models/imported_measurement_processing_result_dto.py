# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metering_client.models.direction import Direction
from metering_client.models.metering_type import MeteringType
from metering_client.models.unit_of_measure import UnitOfMeasure
from metering_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class ImportedMeasurementProcessingResultDTO(BaseModel):
    """
    ImportedMeasurementProcessingResultDTO
    """ # noqa: E501
    meter_serial_number: Optional[StrictStr] = Field(default=None, alias="meterSerialNumber")
    external_channel_identifier: Optional[StrictStr] = Field(default=None, alias="externalChannelIdentifier")
    external_reference: Optional[StrictStr] = Field(default=None, alias="externalReference")
    metering_type: Optional[MeteringType] = Field(default=None, alias="meteringType")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    direction: Optional[Direction] = None
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="unitOfMeasure")
    reading_date_time: Optional[datetime] = Field(default=None, alias="readingDateTime")
    time_of_use: Optional[StrictStr] = Field(default=None, alias="timeOfUse")
    reading_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="readingValue")
    error_code: Optional[StrictStr] = Field(default=None, alias="errorCode")
    line_number: Optional[StrictInt] = Field(default=None, alias="lineNumber")
    processed_on: Optional[datetime] = Field(default=None, alias="processedOn")
    was_ignored: Optional[StrictBool] = Field(default=None, alias="wasIgnored")
    __properties: ClassVar[List[str]] = ["meterSerialNumber", "externalChannelIdentifier", "externalReference", "meteringType", "utilityType", "direction", "unitOfMeasure", "readingDateTime", "timeOfUse", "readingValue", "errorCode", "lineNumber", "processedOn", "wasIgnored"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportedMeasurementProcessingResultDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if meter_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.meter_serial_number is None and "meter_serial_number" in self.model_fields_set:
            _dict['meterSerialNumber'] = None

        # set to None if external_channel_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_channel_identifier is None and "external_channel_identifier" in self.model_fields_set:
            _dict['externalChannelIdentifier'] = None

        # set to None if external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_reference is None and "external_reference" in self.model_fields_set:
            _dict['externalReference'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if reading_value (nullable) is None
        # and model_fields_set contains the field
        if self.reading_value is None and "reading_value" in self.model_fields_set:
            _dict['readingValue'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['errorCode'] = None

        # set to None if line_number (nullable) is None
        # and model_fields_set contains the field
        if self.line_number is None and "line_number" in self.model_fields_set:
            _dict['lineNumber'] = None

        # set to None if processed_on (nullable) is None
        # and model_fields_set contains the field
        if self.processed_on is None and "processed_on" in self.model_fields_set:
            _dict['processedOn'] = None

        # set to None if was_ignored (nullable) is None
        # and model_fields_set contains the field
        if self.was_ignored is None and "was_ignored" in self.model_fields_set:
            _dict['wasIgnored'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportedMeasurementProcessingResultDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meterSerialNumber": obj.get("meterSerialNumber"),
            "externalChannelIdentifier": obj.get("externalChannelIdentifier"),
            "externalReference": obj.get("externalReference"),
            "meteringType": obj.get("meteringType"),
            "utilityType": obj.get("utilityType"),
            "direction": obj.get("direction"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "readingDateTime": obj.get("readingDateTime"),
            "timeOfUse": obj.get("timeOfUse"),
            "readingValue": obj.get("readingValue"),
            "errorCode": obj.get("errorCode"),
            "lineNumber": obj.get("lineNumber"),
            "processedOn": obj.get("processedOn"),
            "wasIgnored": obj.get("wasIgnored")
        })
        return _obj


