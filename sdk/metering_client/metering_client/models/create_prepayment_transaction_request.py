# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metering_client.models.prepayment_transaction_origin import PrepaymentTransactionOrigin
from metering_client.models.prepayment_transaction_status import PrepaymentTransactionStatus
from metering_client.models.prepayment_transaction_type import PrepaymentTransactionType
from typing import Optional, Set
from typing_extensions import Self

class CreatePrepaymentTransactionRequest(BaseModel):
    """
    CreatePrepaymentTransactionRequest
    """ # noqa: E501
    prepayment_account_id: Optional[StrictStr] = Field(default=None, alias="prepaymentAccountId")
    processed_date_time: Optional[datetime] = Field(default=None, alias="processedDateTime")
    origin: Optional[PrepaymentTransactionOrigin] = None
    type: Optional[PrepaymentTransactionType] = None
    status: Optional[PrepaymentTransactionStatus] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["prepaymentAccountId", "processedDateTime", "origin", "type", "status", "amount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePrepaymentTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if prepayment_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.prepayment_account_id is None and "prepayment_account_id" in self.model_fields_set:
            _dict['prepaymentAccountId'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePrepaymentTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prepaymentAccountId": obj.get("prepaymentAccountId"),
            "processedDateTime": obj.get("processedDateTime"),
            "origin": obj.get("origin"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "amount": obj.get("amount")
        })
        return _obj


