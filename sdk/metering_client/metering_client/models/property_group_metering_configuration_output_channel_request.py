# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metering_client.models.metering_formula_dto import MeteringFormulaDTO
from metering_client.models.metering_type import MeteringType
from metering_client.models.unit_of_measure import UnitOfMeasure
from metering_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class PropertyGroupMeteringConfigurationOutputChannelRequest(BaseModel):
    """
    PropertyGroupMeteringConfigurationOutputChannelRequest
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="unitOfMeasure")
    metering_type: Optional[MeteringType] = Field(default=None, alias="meteringType")
    formula: Optional[MeteringFormulaDTO] = None
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    __properties: ClassVar[List[str]] = ["id", "name", "unitOfMeasure", "meteringType", "formula", "utilityType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyGroupMeteringConfigurationOutputChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of formula
        if self.formula:
            _dict['formula'] = self.formula.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if formula (nullable) is None
        # and model_fields_set contains the field
        if self.formula is None and "formula" in self.model_fields_set:
            _dict['formula'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyGroupMeteringConfigurationOutputChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "meteringType": obj.get("meteringType"),
            "formula": MeteringFormulaDTO.from_dict(obj["formula"]) if obj.get("formula") is not None else None,
            "utilityType": obj.get("utilityType")
        })
        return _obj


