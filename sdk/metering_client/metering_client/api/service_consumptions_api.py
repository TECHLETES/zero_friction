# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from metering_client.models.aggregated_service_consumption_per_period_request import AggregatedServiceConsumptionPerPeriodRequest
from metering_client.models.aggregated_service_consumptions_by_service_location_dto_paged_response_model_dto_api_response_dto import AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO
from metering_client.models.aggregated_service_consumptions_per_period_dto_list_api_response_dto import AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO
from metering_client.models.average_service_consumption_per_service_location_dto_list_api_response_dto import AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO
from metering_client.models.average_service_consumption_per_service_location_request import AverageServiceConsumptionPerServiceLocationRequest
from metering_client.models.bucketed_service_consumption_request import BucketedServiceConsumptionRequest
from metering_client.models.consumption_type_dto_list_api_response_dto import ConsumptionTypeDTOListApiResponseDTO
from metering_client.models.flat_paged_service_consumption_dto_paged_response_model_dto_api_response_dto import FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO
from metering_client.models.flat_service_consumption_dto_list_api_response_dto import FlatServiceConsumptionDTOListApiResponseDTO
from metering_client.models.grouped_service_consumption_dto_list_api_response_dto import GroupedServiceConsumptionDTOListApiResponseDTO
from metering_client.models.service_consumption_bucket_dto_list_api_response_dto import ServiceConsumptionBucketDTOListApiResponseDTO
from metering_client.models.service_consumption_dto_paged_response_model_dto_api_response_dto import ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO
from metering_client.models.service_consumption_get_date_range_dto_api_response_dto import ServiceConsumptionGetDateRangeDTOApiResponseDTO
from metering_client.models.service_consumption_sum_request import ServiceConsumptionSumRequest

from metering_client.api_client import ApiClient, RequestSerialized
from metering_client.api_response import ApiResponse
from metering_client.rest import RESTResponseType


class ServiceConsumptionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_consumption_date_ranges_for_service_location(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the search range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the search range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceConsumptionGetDateRangeDTOApiResponseDTO:
        """Gets consumption date ranges available for a service location

        Gets consumption date ranges available for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the search range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the search range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumption_date_ranges_for_service_location_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionGetDateRangeDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_consumption_date_ranges_for_service_location_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the search range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the search range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceConsumptionGetDateRangeDTOApiResponseDTO]:
        """Gets consumption date ranges available for a service location

        Gets consumption date ranges available for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the search range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the search range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumption_date_ranges_for_service_location_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionGetDateRangeDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_consumption_date_ranges_for_service_location_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the search range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the search range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets consumption date ranges available for a service location

        Gets consumption date ranges available for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the search range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the search range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumption_date_ranges_for_service_location_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionGetDateRangeDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_consumption_date_ranges_for_service_location_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        utility_type,
        unit_of_measure,
        start_date_time,
        end_date_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}/range/date-range-limit',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_consumptions_for_service_location_grouped_on_range(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GroupedServiceConsumptionDTOListApiResponseDTO:
        """Gets consumption data for a service location grouped by range

        Gets consumption data for a service location grouped by range

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumptions_for_service_location_grouped_on_range_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GroupedServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_consumptions_for_service_location_grouped_on_range_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GroupedServiceConsumptionDTOListApiResponseDTO]:
        """Gets consumption data for a service location grouped by range

        Gets consumption data for a service location grouped by range

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumptions_for_service_location_grouped_on_range_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GroupedServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_consumptions_for_service_location_grouped_on_range_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets consumption data for a service location grouped by range

        Gets consumption data for a service location grouped by range

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_consumptions_for_service_location_grouped_on_range_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GroupedServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_consumptions_for_service_location_grouped_on_range_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        utility_type,
        unit_of_measure,
        start_date_time,
        end_date_time,
        order_by,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        # process the header parameters
        if continuation_token is not None:
            _header_params['continuationToken'] = continuation_token
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}/range',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_serviceconsumptions_sluuid(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO:
        """Gets paginated consumption data for a service location

        Gets paginated consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_serviceconsumptions_sluuid_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO]:
        """Gets paginated consumption data for a service location

        Gets paginated consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_serviceconsumptions_sluuid_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets paginated consumption data for a service location

        Gets paginated consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatPagedServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_serviceconsumptions_sluuid_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        utility_type,
        unit_of_measure,
        start_date_time,
        end_date_time,
        order_by,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        # process the header parameters
        if continuation_token is not None:
            _header_params['continuationToken'] = continuation_token
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_serviceconsumptions_sluuid_flat(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period to group data by")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FlatServiceConsumptionDTOListApiResponseDTO:
        """Gets flat consumption data for a service location with optional grouping by period

        Gets flat consumption data for a service location with optional grouping by period

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param group_by_period: Period to group data by
        :type group_by_period: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_flat_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_serviceconsumptions_sluuid_flat_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period to group data by")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FlatServiceConsumptionDTOListApiResponseDTO]:
        """Gets flat consumption data for a service location with optional grouping by period

        Gets flat consumption data for a service location with optional grouping by period

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param group_by_period: Period to group data by
        :type group_by_period: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_flat_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_serviceconsumptions_sluuid_flat_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        group_by_period: Annotated[Optional[StrictStr], Field(description="Period to group data by")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets flat consumption data for a service location with optional grouping by period

        Gets flat consumption data for a service location with optional grouping by period

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param group_by_period: Period to group data by
        :type group_by_period: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_flat_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            group_by_period=group_by_period,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FlatServiceConsumptionDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_serviceconsumptions_sluuid_flat_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        utility_type,
        unit_of_measure,
        group_by_period,
        start_date_time,
        end_date_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if group_by_period is not None:
            
            _query_params.append(('groupByPeriod', group_by_period))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}/flat',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_serviceconsumptions_sluuid_raw(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO:
        """Gets raw consumption data for a service location

        Gets raw consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_raw_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_serviceconsumptions_sluuid_raw_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO]:
        """Gets raw consumption data for a service location

        Gets raw consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_raw_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_serviceconsumptions_sluuid_raw_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        utility_type: Annotated[Optional[StrictStr], Field(description="Type of utility")] = None,
        unit_of_measure: Annotated[Optional[StrictStr], Field(description="Unit of measure")] = None,
        start_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). Start date and time for the data range")] = None,
        end_date_time: Annotated[Optional[datetime], Field(description="Format - date-time (as date-time in RFC3339). End date and time for the data range")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Order by criteria")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets raw consumption data for a service location

        Gets raw consumption data for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param utility_type: Type of utility
        :type utility_type: str
        :param unit_of_measure: Unit of measure
        :type unit_of_measure: str
        :param start_date_time: Format - date-time (as date-time in RFC3339). Start date and time for the data range
        :type start_date_time: datetime
        :param end_date_time: Format - date-time (as date-time in RFC3339). End date and time for the data range
        :type end_date_time: datetime
        :param order_by: Order by criteria
        :type order_by: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_raw_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            utility_type=utility_type,
            unit_of_measure=unit_of_measure,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_serviceconsumptions_sluuid_raw_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        utility_type,
        unit_of_measure,
        start_date_time,
        end_date_time,
        order_by,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        if utility_type is not None:
            
            _query_params.append(('utilityType', utility_type))
            
        if unit_of_measure is not None:
            
            _query_params.append(('unitOfMeasure', unit_of_measure))
            
        if start_date_time is not None:
            if isinstance(start_date_time, datetime):
                _query_params.append(
                    (
                        'startDateTime',
                        start_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            if isinstance(end_date_time, datetime):
                _query_params.append(
                    (
                        'endDateTime',
                        end_date_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDateTime', end_date_time))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        # process the header parameters
        if continuation_token is not None:
            _header_params['continuationToken'] = continuation_token
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}/raw',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_serviceconsumptions_sluuid_types(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConsumptionTypeDTOListApiResponseDTO:
        """Gets available consumption types for a service location

        Gets available consumption types for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_types_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumptionTypeDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_serviceconsumptions_sluuid_types_with_http_info(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConsumptionTypeDTOListApiResponseDTO]:
        """Gets available consumption types for a service location

        Gets available consumption types for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_types_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumptionTypeDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_serviceconsumptions_sluuid_types_without_preload_content(
        self,
        sluuid: Annotated[StrictStr, Field(description="Service location UUID")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets available consumption types for a service location

        Gets available consumption types for a service location

        :param sluuid: Service location UUID (required)
        :type sluuid: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serviceconsumptions_sluuid_types_serialize(
            sluuid=sluuid,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConsumptionTypeDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_serviceconsumptions_sluuid_types_serialize(
        self,
        sluuid,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if sluuid is not None:
            _path_params['sluuid'] = sluuid
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ServiceConsumptions/{sluuid}/types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_serviceconsumptions_aggregatedperperiod(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        aggregated_service_consumption_per_period_request: Annotated[Optional[AggregatedServiceConsumptionPerPeriodRequest], Field(description="Request containing service location IDs and grouping period")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO:
        """Gets aggregated service consumptions per period for a list of service locations

        Gets aggregated service consumptions per period for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param aggregated_service_consumption_per_period_request: Request containing service location IDs and grouping period
        :type aggregated_service_consumption_per_period_request: AggregatedServiceConsumptionPerPeriodRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_aggregatedperperiod_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            aggregated_service_consumption_per_period_request=aggregated_service_consumption_per_period_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_serviceconsumptions_aggregatedperperiod_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        aggregated_service_consumption_per_period_request: Annotated[Optional[AggregatedServiceConsumptionPerPeriodRequest], Field(description="Request containing service location IDs and grouping period")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO]:
        """Gets aggregated service consumptions per period for a list of service locations

        Gets aggregated service consumptions per period for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param aggregated_service_consumption_per_period_request: Request containing service location IDs and grouping period
        :type aggregated_service_consumption_per_period_request: AggregatedServiceConsumptionPerPeriodRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_aggregatedperperiod_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            aggregated_service_consumption_per_period_request=aggregated_service_consumption_per_period_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_serviceconsumptions_aggregatedperperiod_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        aggregated_service_consumption_per_period_request: Annotated[Optional[AggregatedServiceConsumptionPerPeriodRequest], Field(description="Request containing service location IDs and grouping period")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets aggregated service consumptions per period for a list of service locations

        Gets aggregated service consumptions per period for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param aggregated_service_consumption_per_period_request: Request containing service location IDs and grouping period
        :type aggregated_service_consumption_per_period_request: AggregatedServiceConsumptionPerPeriodRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_aggregatedperperiod_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            aggregated_service_consumption_per_period_request=aggregated_service_consumption_per_period_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsPerPeriodDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_serviceconsumptions_aggregatedperperiod_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        aggregated_service_consumption_per_period_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if aggregated_service_consumption_per_period_request is not None:
            _body_params = aggregated_service_consumption_per_period_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ServiceConsumptions/aggregatedperperiod',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_serviceconsumptions_buckets(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        bucketed_service_consumption_request: Annotated[Optional[BucketedServiceConsumptionRequest], Field(description="Request containing buckets and parameters needed to determine service consumption source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ServiceConsumptionBucketDTOListApiResponseDTO:
        """Gets consumption data for a service locations grouped by provided buckets

        Gets consumption data for a service locations grouped by provided buckets

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param bucketed_service_consumption_request: Request containing buckets and parameters needed to determine service consumption source
        :type bucketed_service_consumption_request: BucketedServiceConsumptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_buckets_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            bucketed_service_consumption_request=bucketed_service_consumption_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionBucketDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_serviceconsumptions_buckets_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        bucketed_service_consumption_request: Annotated[Optional[BucketedServiceConsumptionRequest], Field(description="Request containing buckets and parameters needed to determine service consumption source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ServiceConsumptionBucketDTOListApiResponseDTO]:
        """Gets consumption data for a service locations grouped by provided buckets

        Gets consumption data for a service locations grouped by provided buckets

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param bucketed_service_consumption_request: Request containing buckets and parameters needed to determine service consumption source
        :type bucketed_service_consumption_request: BucketedServiceConsumptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_buckets_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            bucketed_service_consumption_request=bucketed_service_consumption_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionBucketDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_serviceconsumptions_buckets_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        bucketed_service_consumption_request: Annotated[Optional[BucketedServiceConsumptionRequest], Field(description="Request containing buckets and parameters needed to determine service consumption source")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets consumption data for a service locations grouped by provided buckets

        Gets consumption data for a service locations grouped by provided buckets

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param bucketed_service_consumption_request: Request containing buckets and parameters needed to determine service consumption source
        :type bucketed_service_consumption_request: BucketedServiceConsumptionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_buckets_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            bucketed_service_consumption_request=bucketed_service_consumption_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ServiceConsumptionBucketDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_serviceconsumptions_buckets_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        bucketed_service_consumption_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if bucketed_service_consumption_request is not None:
            _body_params = bucketed_service_consumption_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ServiceConsumptions/buckets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_serviceconsumptions_export_sum(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        service_consumption_sum_request: Annotated[Optional[ServiceConsumptionSumRequest], Field(description="Request containing service location IDs and date range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO:
        """Gets sum of consumption values for a list of service locations

        Gets sum of consumption values for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param service_consumption_sum_request: Request containing service location IDs and date range
        :type service_consumption_sum_request: ServiceConsumptionSumRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_export_sum_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            continuation_token=continuation_token,
            service_consumption_sum_request=service_consumption_sum_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_serviceconsumptions_export_sum_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        service_consumption_sum_request: Annotated[Optional[ServiceConsumptionSumRequest], Field(description="Request containing service location IDs and date range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO]:
        """Gets sum of consumption values for a list of service locations

        Gets sum of consumption values for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param service_consumption_sum_request: Request containing service location IDs and date range
        :type service_consumption_sum_request: ServiceConsumptionSumRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_export_sum_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            continuation_token=continuation_token,
            service_consumption_sum_request=service_consumption_sum_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_serviceconsumptions_export_sum_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token for paged results continuation")] = None,
        service_consumption_sum_request: Annotated[Optional[ServiceConsumptionSumRequest], Field(description="Request containing service location IDs and date range")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets sum of consumption values for a list of service locations

        Gets sum of consumption values for a list of service locations

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param continuation_token: Token for paged results continuation
        :type continuation_token: str
        :param service_consumption_sum_request: Request containing service location IDs and date range
        :type service_consumption_sum_request: ServiceConsumptionSumRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_export_sum_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            continuation_token=continuation_token,
            service_consumption_sum_request=service_consumption_sum_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AggregatedServiceConsumptionsByServiceLocationDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_serviceconsumptions_export_sum_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        continuation_token,
        service_consumption_sum_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if continuation_token is not None:
            _header_params['continuationToken'] = continuation_token
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if service_consumption_sum_request is not None:
            _body_params = service_consumption_sum_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ServiceConsumptions/export/sum',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_serviceconsumptions_yearlyaverage(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        average_service_consumption_per_service_location_request: Annotated[Optional[AverageServiceConsumptionPerServiceLocationRequest], Field(description="Request containing service location IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO:
        """Gets yearly average consumption per service location

        Gets yearly average consumption per service location

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param average_service_consumption_per_service_location_request: Request containing service location IDs
        :type average_service_consumption_per_service_location_request: AverageServiceConsumptionPerServiceLocationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_yearlyaverage_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            average_service_consumption_per_service_location_request=average_service_consumption_per_service_location_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_serviceconsumptions_yearlyaverage_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        average_service_consumption_per_service_location_request: Annotated[Optional[AverageServiceConsumptionPerServiceLocationRequest], Field(description="Request containing service location IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO]:
        """Gets yearly average consumption per service location

        Gets yearly average consumption per service location

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param average_service_consumption_per_service_location_request: Request containing service location IDs
        :type average_service_consumption_per_service_location_request: AverageServiceConsumptionPerServiceLocationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_yearlyaverage_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            average_service_consumption_per_service_location_request=average_service_consumption_per_service_location_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_serviceconsumptions_yearlyaverage_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        average_service_consumption_per_service_location_request: Annotated[Optional[AverageServiceConsumptionPerServiceLocationRequest], Field(description="Request containing service location IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets yearly average consumption per service location

        Gets yearly average consumption per service location

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param average_service_consumption_per_service_location_request: Request containing service location IDs
        :type average_service_consumption_per_service_location_request: AverageServiceConsumptionPerServiceLocationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_serviceconsumptions_yearlyaverage_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            average_service_consumption_per_service_location_request=average_service_consumption_per_service_location_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AverageServiceConsumptionPerServiceLocationDTOListApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_serviceconsumptions_yearlyaverage_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        average_service_consumption_per_service_location_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if average_service_consumption_per_service_location_request is not None:
            _body_params = average_service_consumption_per_service_location_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ServiceConsumptions/yearlyaverage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


