# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.formula_execution_result_dto import FormulaExecutionResultDTO

class TestFormulaExecutionResultDTO(unittest.TestCase):
    """FormulaExecutionResultDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FormulaExecutionResultDTO:
        """Test FormulaExecutionResultDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FormulaExecutionResultDTO`
        """
        model = FormulaExecutionResultDTO()
        if include_optional:
            return FormulaExecutionResultDTO(
                has_errors = True,
                errors = [
                    metering_client.models.formula_function_exception_dto.FormulaFunctionExceptionDTO(
                        function_position = 56, 
                        error = null, 
                        message = '', 
                        parameters = [
                            ''
                            ], )
                    ],
                output = [
                    metering_client.models.formula_consumption_dto.FormulaConsumptionDTO(
                        output_channel_id = '', 
                        production_day = 56, 
                        time_zone = '', 
                        production_day_start_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        production_day_end_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        values = [
                            metering_client.models.formula_consumption_value_dto.FormulaConsumptionValueDTO(
                                value = 1.337, 
                                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        metering_type = null, 
                        utility_type = null, 
                        direction = null, 
                        unit_of_measure = null, 
                        data_frequency = null, 
                        property_group = null, 
                        time_of_use = '', 
                        external_channel_identifier = '', 
                        service_location_id = '', 
                        formula_stream_name = '', )
                    ]
            )
        else:
            return FormulaExecutionResultDTO(
        )
        """

    def testFormulaExecutionResultDTO(self):
        """Test FormulaExecutionResultDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
