# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.grouped_service_consumption_dto import GroupedServiceConsumptionDTO

class TestGroupedServiceConsumptionDTO(unittest.TestCase):
    """GroupedServiceConsumptionDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GroupedServiceConsumptionDTO:
        """Test GroupedServiceConsumptionDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GroupedServiceConsumptionDTO`
        """
        model = GroupedServiceConsumptionDTO()
        if include_optional:
            return GroupedServiceConsumptionDTO(
                external_identifier = '',
                service_location_id = '',
                time_of_use = '',
                utility_type = 'none',
                unit_of_measure = 'none',
                min_production_day_start_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                max_production_day_end_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                values = [
                    metering_client.models.flat_service_consumption_dto.FlatServiceConsumptionDTO(
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        consumption_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        consumption_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = 1.337, )
                    ]
            )
        else:
            return GroupedServiceConsumptionDTO(
        )
        """

    def testGroupedServiceConsumptionDTO(self):
        """Test GroupedServiceConsumptionDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
