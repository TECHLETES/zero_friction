# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.adjacent_measurement_pairs_dto import AdjacentMeasurementPairsDTO

class TestAdjacentMeasurementPairsDTO(unittest.TestCase):
    """AdjacentMeasurementPairsDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdjacentMeasurementPairsDTO:
        """Test AdjacentMeasurementPairsDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdjacentMeasurementPairsDTO`
        """
        model = AdjacentMeasurementPairsDTO()
        if include_optional:
            return AdjacentMeasurementPairsDTO(
                pairs = [
                    metering_client.models.measurement_pair_dto.MeasurementPairDTO(
                        external_channel_id = '', 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        previous_measurements = [
                            metering_client.models.measurement_dto.MeasurementDTO(
                                id = '', 
                                entity_type = null, 
                                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                discriminator = '', 
                                _etag = '', 
                                require_attention = True, 
                                has_errors = True, 
                                has_warnings = True, 
                                is_read_only = True, 
                                organisation_id = '', 
                                external_channel_identifier = '', 
                                meter_serial_number = '', 
                                operation_id = '', 
                                value = 1.337, 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                deleted = True, 
                                data_frequency = null, 
                                incrementation_type = null, 
                                metering_type = null, 
                                utility_type = null, 
                                direction = null, 
                                unit_of_measure = null, 
                                time_of_use = '', 
                                issue = null, 
                                has_issue = True, )
                            ], 
                        next_measurements = [
                            metering_client.models.measurement_dto.MeasurementDTO(
                                id = '', 
                                entity_type = null, 
                                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                discriminator = '', 
                                _etag = '', 
                                require_attention = True, 
                                has_errors = True, 
                                has_warnings = True, 
                                is_read_only = True, 
                                organisation_id = '', 
                                external_channel_identifier = '', 
                                meter_serial_number = '', 
                                operation_id = '', 
                                value = 1.337, 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                deleted = True, 
                                data_frequency = null, 
                                incrementation_type = null, 
                                metering_type = null, 
                                utility_type = null, 
                                direction = null, 
                                unit_of_measure = null, 
                                time_of_use = '', 
                                issue = null, 
                                has_issue = True, )
                            ], 
                        previous_measurement = null, 
                        next_measurement = null, )
                    ]
            )
        else:
            return AdjacentMeasurementPairsDTO(
        )
        """

    def testAdjacentMeasurementPairsDTO(self):
        """Test AdjacentMeasurementPairsDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
