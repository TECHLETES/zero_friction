# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.measurement_dto import MeasurementDTO

class TestMeasurementDTO(unittest.TestCase):
    """MeasurementDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MeasurementDTO:
        """Test MeasurementDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MeasurementDTO`
        """
        model = MeasurementDTO()
        if include_optional:
            return MeasurementDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                external_channel_identifier = '',
                meter_serial_number = '',
                operation_id = '',
                value = 1.337,
                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                deleted = True,
                data_frequency = 'pt1m',
                incrementation_type = 'delta',
                metering_type = 'none',
                utility_type = 'none',
                direction = 'offtake',
                unit_of_measure = 'none',
                time_of_use = '',
                issue = metering_client.models.metering_issue_reference.MeteringIssueReference(
                    metering_issue_id = '', 
                    error = null, 
                    status = null, 
                    noticed_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                has_issue = True
            )
        else:
            return MeasurementDTO(
        )
        """

    def testMeasurementDTO(self):
        """Test MeasurementDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
