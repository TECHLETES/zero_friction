# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.api.integrations_api import IntegrationsApi


class TestIntegrationsApi(unittest.TestCase):
    """IntegrationsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = IntegrationsApi()

    def tearDown(self) -> None:
        pass

    def test_delete_integrations_import(self) -> None:
        """Test case for delete_integrations_import

        Deletes imports based on provided id's. If there are too many id's, deletes are done asynchronously
        """
        pass

    def test_delete_integrations_import_meteringimportid(self) -> None:
        """Test case for delete_integrations_import_meteringimportid

        Delete an existing import by it's identifier
        """
        pass

    def test_get_integrations_import(self) -> None:
        """Test case for get_integrations_import

        Gets a paged list of metering imports based on the specified filters.
        """
        pass

    def test_get_integrations_import_meteringimportid_issues_interpretation(self) -> None:
        """Test case for get_integrations_import_meteringimportid_issues_interpretation

        Get an overview of issues that were detected during the interpretation of a metering import.
        """
        pass

    def test_get_integrations_import_meteringimportid_issuescount(self) -> None:
        """Test case for get_integrations_import_meteringimportid_issuescount

        Get a count of issues detected during import validation and processing.
        """
        pass

    def test_get_integrations_import_meteringimportid_measurements(self) -> None:
        """Test case for get_integrations_import_meteringimportid_measurements

        Get an overview of all the measurements for a metering import with their possible validation or processing issues.
        """
        pass

    def test_get_integrations_import_overviewcount(self) -> None:
        """Test case for get_integrations_import_overviewcount

        Gets count information for metering import overview, grouped by their status.
        """
        pass

    def test_get_integrations_import_uuid(self) -> None:
        """Test case for get_integrations_import_uuid

        Fetch the details of a metering import to know the status of the metering import and to known how many  values were successfully parsed, validated and processed.
        """
        pass

    def test_patch_integrations_import_markprocessed(self) -> None:
        """Test case for patch_integrations_import_markprocessed

        Marks requested imports as processed, if the current status of the import allows it
        """
        pass

    def test_patch_integrations_import_validate_meteringimportid(self) -> None:
        """Test case for patch_integrations_import_validate_meteringimportid

        Attempts to revalidate a specified import
        """
        pass

    def test_post_integrations_import(self) -> None:
        """Test case for post_integrations_import

        Upload measurements for specific file formats.
        """
        pass

    def test_post_integrations_import_download(self) -> None:
        """Test case for post_integrations_import_download

        Downloads the original files for all imports that are requested
        """
        pass

    def test_post_integrations_import_measurements(self) -> None:
        """Test case for post_integrations_import_measurements

        Upload measurements for a collection of different meters.
        """
        pass

    def test_post_integrations_import_process(self) -> None:
        """Test case for post_integrations_import_process

        Processes all selected imports if they have the status 'Validation failed', 'To process', or 'Processed with issues'.  Before processing valid measurements, it revalidates any current invalid measurements.                For example, if a meter or channel did not exist when the import was created bu
        """
        pass

    def test_post_integrations_import_process_meteringimportid(self) -> None:
        """Test case for post_integrations_import_process_meteringimportid

        Processes the import if it has the status 'Validation failed', 'To process', or 'Processed with issues'.  Before processing valid measurements, it revalidates any current invalid measurements.                For example, if a meter or channel did not exist when the import was created but has since b
        """
        pass

    def test_post_integrations_import_processall(self) -> None:
        """Test case for post_integrations_import_processall

        Processes all imports that have status 'To process' and 'Processed with issues'
        """
        pass


if __name__ == '__main__':
    unittest.main()
