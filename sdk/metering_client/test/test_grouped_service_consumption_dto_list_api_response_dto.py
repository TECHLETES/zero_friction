# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.grouped_service_consumption_dto_list_api_response_dto import GroupedServiceConsumptionDTOListApiResponseDTO

class TestGroupedServiceConsumptionDTOListApiResponseDTO(unittest.TestCase):
    """GroupedServiceConsumptionDTOListApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GroupedServiceConsumptionDTOListApiResponseDTO:
        """Test GroupedServiceConsumptionDTOListApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GroupedServiceConsumptionDTOListApiResponseDTO`
        """
        model = GroupedServiceConsumptionDTOListApiResponseDTO()
        if include_optional:
            return GroupedServiceConsumptionDTOListApiResponseDTO(
                errors = [
                    metering_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            metering_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = [
                    metering_client.models.grouped_service_consumption_dto.GroupedServiceConsumptionDTO(
                        external_identifier = '', 
                        service_location_id = '', 
                        time_of_use = '', 
                        utility_type = null, 
                        unit_of_measure = null, 
                        min_production_day_start_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        max_production_day_end_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        values = [
                            metering_client.models.flat_service_consumption_dto.FlatServiceConsumptionDTO(
                                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                consumption_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                consumption_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value = 1.337, )
                            ], )
                    ]
            )
        else:
            return GroupedServiceConsumptionDTOListApiResponseDTO(
        )
        """

    def testGroupedServiceConsumptionDTOListApiResponseDTO(self):
        """Test GroupedServiceConsumptionDTOListApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
