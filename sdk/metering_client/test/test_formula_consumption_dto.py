# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.formula_consumption_dto import FormulaConsumptionDTO

class TestFormulaConsumptionDTO(unittest.TestCase):
    """FormulaConsumptionDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FormulaConsumptionDTO:
        """Test FormulaConsumptionDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FormulaConsumptionDTO`
        """
        model = FormulaConsumptionDTO()
        if include_optional:
            return FormulaConsumptionDTO(
                output_channel_id = '',
                production_day = 56,
                time_zone = '',
                production_day_start_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                production_day_end_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                values = [
                    metering_client.models.formula_consumption_value_dto.FormulaConsumptionValueDTO(
                        value = 1.337, 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                metering_type = 'none',
                utility_type = 'none',
                direction = 'offtake',
                unit_of_measure = 'none',
                data_frequency = 'pt1m',
                property_group = metering_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                    id = '', 
                    name = '', ),
                time_of_use = '',
                external_channel_identifier = '',
                service_location_id = '',
                formula_stream_name = ''
            )
        else:
            return FormulaConsumptionDTO(
        )
        """

    def testFormulaConsumptionDTO(self):
        """Test FormulaConsumptionDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
