# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.export_consumptions_for_meters_request import ExportConsumptionsForMetersRequest

class TestExportConsumptionsForMetersRequest(unittest.TestCase):
    """ExportConsumptionsForMetersRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExportConsumptionsForMetersRequest:
        """Test ExportConsumptionsForMetersRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExportConsumptionsForMetersRequest`
        """
        model = ExportConsumptionsForMetersRequest()
        if include_optional:
            return ExportConsumptionsForMetersRequest(
                var_query_params = metering_client.models.get_meters_query_params.GetMetersQueryParams(
                    flex_search = '', 
                    include_only_ids = [
                        ''
                        ], 
                    exclude_ids = [
                        ''
                        ], 
                    servicelocation_ids = [
                        ''
                        ], 
                    property_group_ids = [
                        ''
                        ], 
                    meter_type = null, 
                    received_metering_data_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    received_metering_data_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_expected_reading_date_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_expected_reading_date_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    parent_serial_number = '', 
                    filter_by_reading_frequency = True, 
                    reading_frequency = null, 
                    customer_id = '', 
                    meter_type_group = '', 
                    meter_serial_number = '', ),
                quick_filter = '',
                meter_ids = [
                    ''
                    ],
                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                only_validate = True
            )
        else:
            return ExportConsumptionsForMetersRequest(
        )
        """

    def testExportConsumptionsForMetersRequest(self):
        """Test ExportConsumptionsForMetersRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
