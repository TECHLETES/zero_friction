# coding: utf-8

"""
    Metering

    MeterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from metering_client.models.aggregated_service_consumptions_by_service_location_dto import AggregatedServiceConsumptionsByServiceLocationDTO

class TestAggregatedServiceConsumptionsByServiceLocationDTO(unittest.TestCase):
    """AggregatedServiceConsumptionsByServiceLocationDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AggregatedServiceConsumptionsByServiceLocationDTO:
        """Test AggregatedServiceConsumptionsByServiceLocationDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AggregatedServiceConsumptionsByServiceLocationDTO`
        """
        model = AggregatedServiceConsumptionsByServiceLocationDTO()
        if include_optional:
            return AggregatedServiceConsumptionsByServiceLocationDTO(
                service_location = '',
                service_location_address = metering_client.models.address_dto.AddressDTO(
                    street_name = '', 
                    street_number = '', 
                    street_number_addition = '', 
                    postal_code = '', 
                    building_name = '', 
                    locality = '', 
                    city = '', 
                    country = null, 
                    localized_display = '', 
                    line_one = '', 
                    line_two = '', ),
                utility_type = 'none',
                unit_of_measure = 'none',
                time_of_use = '',
                period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                total = 1.337
            )
        else:
            return AggregatedServiceConsumptionsByServiceLocationDTO(
        )
        """

    def testAggregatedServiceConsumptionsByServiceLocationDTO(self):
        """Test AggregatedServiceConsumptionsByServiceLocationDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
