# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from attachments_client.models.digit_shapes import DigitShapes
from typing import Optional, Set
from typing_extensions import Self

class NumberFormatInfo(BaseModel):
    """
    NumberFormatInfo
    """ # noqa: E501
    currency_decimal_digits: Optional[StrictInt] = Field(default=None, alias="currencyDecimalDigits")
    currency_decimal_separator: Optional[StrictStr] = Field(default=None, alias="currencyDecimalSeparator")
    is_read_only: Optional[StrictBool] = Field(default=None, alias="isReadOnly")
    currency_group_sizes: Optional[List[StrictInt]] = Field(default=None, alias="currencyGroupSizes")
    number_group_sizes: Optional[List[StrictInt]] = Field(default=None, alias="numberGroupSizes")
    percent_group_sizes: Optional[List[StrictInt]] = Field(default=None, alias="percentGroupSizes")
    currency_group_separator: Optional[StrictStr] = Field(default=None, alias="currencyGroupSeparator")
    currency_symbol: Optional[StrictStr] = Field(default=None, alias="currencySymbol")
    na_n_symbol: Optional[StrictStr] = Field(default=None, alias="naNSymbol")
    currency_negative_pattern: Optional[StrictInt] = Field(default=None, alias="currencyNegativePattern")
    number_negative_pattern: Optional[StrictInt] = Field(default=None, alias="numberNegativePattern")
    percent_positive_pattern: Optional[StrictInt] = Field(default=None, alias="percentPositivePattern")
    percent_negative_pattern: Optional[StrictInt] = Field(default=None, alias="percentNegativePattern")
    negative_infinity_symbol: Optional[StrictStr] = Field(default=None, alias="negativeInfinitySymbol")
    negative_sign: Optional[StrictStr] = Field(default=None, alias="negativeSign")
    number_decimal_digits: Optional[StrictInt] = Field(default=None, alias="numberDecimalDigits")
    number_decimal_separator: Optional[StrictStr] = Field(default=None, alias="numberDecimalSeparator")
    number_group_separator: Optional[StrictStr] = Field(default=None, alias="numberGroupSeparator")
    currency_positive_pattern: Optional[StrictInt] = Field(default=None, alias="currencyPositivePattern")
    positive_infinity_symbol: Optional[StrictStr] = Field(default=None, alias="positiveInfinitySymbol")
    positive_sign: Optional[StrictStr] = Field(default=None, alias="positiveSign")
    percent_decimal_digits: Optional[StrictInt] = Field(default=None, alias="percentDecimalDigits")
    percent_decimal_separator: Optional[StrictStr] = Field(default=None, alias="percentDecimalSeparator")
    percent_group_separator: Optional[StrictStr] = Field(default=None, alias="percentGroupSeparator")
    percent_symbol: Optional[StrictStr] = Field(default=None, alias="percentSymbol")
    per_mille_symbol: Optional[StrictStr] = Field(default=None, alias="perMilleSymbol")
    native_digits: Optional[List[StrictStr]] = Field(default=None, alias="nativeDigits")
    digit_substitution: Optional[DigitShapes] = Field(default=None, alias="digitSubstitution")
    __properties: ClassVar[List[str]] = ["currencyDecimalDigits", "currencyDecimalSeparator", "isReadOnly", "currencyGroupSizes", "numberGroupSizes", "percentGroupSizes", "currencyGroupSeparator", "currencySymbol", "naNSymbol", "currencyNegativePattern", "numberNegativePattern", "percentPositivePattern", "percentNegativePattern", "negativeInfinitySymbol", "negativeSign", "numberDecimalDigits", "numberDecimalSeparator", "numberGroupSeparator", "currencyPositivePattern", "positiveInfinitySymbol", "positiveSign", "percentDecimalDigits", "percentDecimalSeparator", "percentGroupSeparator", "percentSymbol", "perMilleSymbol", "nativeDigits", "digitSubstitution"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NumberFormatInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_read_only",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if currency_decimal_separator (nullable) is None
        # and model_fields_set contains the field
        if self.currency_decimal_separator is None and "currency_decimal_separator" in self.model_fields_set:
            _dict['currencyDecimalSeparator'] = None

        # set to None if currency_group_sizes (nullable) is None
        # and model_fields_set contains the field
        if self.currency_group_sizes is None and "currency_group_sizes" in self.model_fields_set:
            _dict['currencyGroupSizes'] = None

        # set to None if number_group_sizes (nullable) is None
        # and model_fields_set contains the field
        if self.number_group_sizes is None and "number_group_sizes" in self.model_fields_set:
            _dict['numberGroupSizes'] = None

        # set to None if percent_group_sizes (nullable) is None
        # and model_fields_set contains the field
        if self.percent_group_sizes is None and "percent_group_sizes" in self.model_fields_set:
            _dict['percentGroupSizes'] = None

        # set to None if currency_group_separator (nullable) is None
        # and model_fields_set contains the field
        if self.currency_group_separator is None and "currency_group_separator" in self.model_fields_set:
            _dict['currencyGroupSeparator'] = None

        # set to None if currency_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.currency_symbol is None and "currency_symbol" in self.model_fields_set:
            _dict['currencySymbol'] = None

        # set to None if na_n_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.na_n_symbol is None and "na_n_symbol" in self.model_fields_set:
            _dict['naNSymbol'] = None

        # set to None if negative_infinity_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.negative_infinity_symbol is None and "negative_infinity_symbol" in self.model_fields_set:
            _dict['negativeInfinitySymbol'] = None

        # set to None if negative_sign (nullable) is None
        # and model_fields_set contains the field
        if self.negative_sign is None and "negative_sign" in self.model_fields_set:
            _dict['negativeSign'] = None

        # set to None if number_decimal_separator (nullable) is None
        # and model_fields_set contains the field
        if self.number_decimal_separator is None and "number_decimal_separator" in self.model_fields_set:
            _dict['numberDecimalSeparator'] = None

        # set to None if number_group_separator (nullable) is None
        # and model_fields_set contains the field
        if self.number_group_separator is None and "number_group_separator" in self.model_fields_set:
            _dict['numberGroupSeparator'] = None

        # set to None if positive_infinity_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.positive_infinity_symbol is None and "positive_infinity_symbol" in self.model_fields_set:
            _dict['positiveInfinitySymbol'] = None

        # set to None if positive_sign (nullable) is None
        # and model_fields_set contains the field
        if self.positive_sign is None and "positive_sign" in self.model_fields_set:
            _dict['positiveSign'] = None

        # set to None if percent_decimal_separator (nullable) is None
        # and model_fields_set contains the field
        if self.percent_decimal_separator is None and "percent_decimal_separator" in self.model_fields_set:
            _dict['percentDecimalSeparator'] = None

        # set to None if percent_group_separator (nullable) is None
        # and model_fields_set contains the field
        if self.percent_group_separator is None and "percent_group_separator" in self.model_fields_set:
            _dict['percentGroupSeparator'] = None

        # set to None if percent_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.percent_symbol is None and "percent_symbol" in self.model_fields_set:
            _dict['percentSymbol'] = None

        # set to None if per_mille_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.per_mille_symbol is None and "per_mille_symbol" in self.model_fields_set:
            _dict['perMilleSymbol'] = None

        # set to None if native_digits (nullable) is None
        # and model_fields_set contains the field
        if self.native_digits is None and "native_digits" in self.model_fields_set:
            _dict['nativeDigits'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NumberFormatInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyDecimalDigits": obj.get("currencyDecimalDigits"),
            "currencyDecimalSeparator": obj.get("currencyDecimalSeparator"),
            "isReadOnly": obj.get("isReadOnly"),
            "currencyGroupSizes": obj.get("currencyGroupSizes"),
            "numberGroupSizes": obj.get("numberGroupSizes"),
            "percentGroupSizes": obj.get("percentGroupSizes"),
            "currencyGroupSeparator": obj.get("currencyGroupSeparator"),
            "currencySymbol": obj.get("currencySymbol"),
            "naNSymbol": obj.get("naNSymbol"),
            "currencyNegativePattern": obj.get("currencyNegativePattern"),
            "numberNegativePattern": obj.get("numberNegativePattern"),
            "percentPositivePattern": obj.get("percentPositivePattern"),
            "percentNegativePattern": obj.get("percentNegativePattern"),
            "negativeInfinitySymbol": obj.get("negativeInfinitySymbol"),
            "negativeSign": obj.get("negativeSign"),
            "numberDecimalDigits": obj.get("numberDecimalDigits"),
            "numberDecimalSeparator": obj.get("numberDecimalSeparator"),
            "numberGroupSeparator": obj.get("numberGroupSeparator"),
            "currencyPositivePattern": obj.get("currencyPositivePattern"),
            "positiveInfinitySymbol": obj.get("positiveInfinitySymbol"),
            "positiveSign": obj.get("positiveSign"),
            "percentDecimalDigits": obj.get("percentDecimalDigits"),
            "percentDecimalSeparator": obj.get("percentDecimalSeparator"),
            "percentGroupSeparator": obj.get("percentGroupSeparator"),
            "percentSymbol": obj.get("percentSymbol"),
            "perMilleSymbol": obj.get("perMilleSymbol"),
            "nativeDigits": obj.get("nativeDigits"),
            "digitSubstitution": obj.get("digitSubstitution")
        })
        return _obj


