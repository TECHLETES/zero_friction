# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from attachments_client.models.attachment_visibility import AttachmentVisibility
from attachments_client.models.date_range import DateRange
from attachments_client.models.entity_attachment_file_dto import EntityAttachmentFileDTO
from attachments_client.models.entity_subject_type import EntitySubjectType
from typing import Optional, Set
from typing_extensions import Self

class EntityAttachmentGroupDTO(BaseModel):
    """
    EntityAttachmentGroupDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    entity_subject_type: Optional[EntitySubjectType] = Field(default=None, alias="entitySubjectType")
    entity_subject_id: Optional[StrictStr] = Field(default=None, alias="entitySubjectId")
    entity_subject_display_name: Optional[StrictStr] = Field(default=None, alias="entitySubjectDisplayName")
    localised_attachment_files: Optional[List[EntityAttachmentFileDTO]] = Field(default=None, alias="localisedAttachmentFiles")
    include_in_welcome_email: Optional[StrictBool] = Field(default=None, alias="includeInWelcomeEmail")
    visibility: Optional[AttachmentVisibility] = None
    approval_required: Optional[StrictBool] = Field(default=None, alias="approvalRequired")
    validity: Optional[DateRange] = None
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "entitySubjectType", "entitySubjectId", "entitySubjectDisplayName", "localisedAttachmentFiles", "includeInWelcomeEmail", "visibility", "approvalRequired", "validity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityAttachmentGroupDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in localised_attachment_files (list)
        _items = []
        if self.localised_attachment_files:
            for _item_localised_attachment_files in self.localised_attachment_files:
                if _item_localised_attachment_files:
                    _items.append(_item_localised_attachment_files.to_dict())
            _dict['localisedAttachmentFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of validity
        if self.validity:
            _dict['validity'] = self.validity.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if entity_subject_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_subject_type is None and "entity_subject_type" in self.model_fields_set:
            _dict['entitySubjectType'] = None

        # set to None if entity_subject_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_subject_id is None and "entity_subject_id" in self.model_fields_set:
            _dict['entitySubjectId'] = None

        # set to None if entity_subject_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.entity_subject_display_name is None and "entity_subject_display_name" in self.model_fields_set:
            _dict['entitySubjectDisplayName'] = None

        # set to None if localised_attachment_files (nullable) is None
        # and model_fields_set contains the field
        if self.localised_attachment_files is None and "localised_attachment_files" in self.model_fields_set:
            _dict['localisedAttachmentFiles'] = None

        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        # set to None if validity (nullable) is None
        # and model_fields_set contains the field
        if self.validity is None and "validity" in self.model_fields_set:
            _dict['validity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityAttachmentGroupDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "entitySubjectType": obj.get("entitySubjectType"),
            "entitySubjectId": obj.get("entitySubjectId"),
            "entitySubjectDisplayName": obj.get("entitySubjectDisplayName"),
            "localisedAttachmentFiles": [EntityAttachmentFileDTO.from_dict(_item) for _item in obj["localisedAttachmentFiles"]] if obj.get("localisedAttachmentFiles") is not None else None,
            "includeInWelcomeEmail": obj.get("includeInWelcomeEmail"),
            "visibility": obj.get("visibility"),
            "approvalRequired": obj.get("approvalRequired"),
            "validity": DateRange.from_dict(obj["validity"]) if obj.get("validity") is not None else None
        })
        return _obj


