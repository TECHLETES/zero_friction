# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from attachments_client.models.country_code import CountryCode
from attachments_client.models.culture_info import CultureInfo
from typing import Optional, Set
from typing_extensions import Self

class AddressDataObject(BaseModel):
    """
    AddressDataObject
    """ # noqa: E501
    street_name: Optional[StrictStr] = Field(default=None, alias="streetName")
    street_number: Optional[StrictStr] = Field(default=None, alias="streetNumber")
    street_number_addition: Optional[StrictStr] = Field(default=None, alias="streetNumberAddition")
    building_name: Optional[StrictStr] = Field(default=None, alias="buildingName")
    locality: Optional[StrictStr] = None
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    city: Optional[StrictStr] = None
    country: Optional[CountryCode] = None
    show_country: Optional[StrictBool] = Field(default=None, alias="showCountry")
    culture: Optional[CultureInfo] = None
    display: Optional[StrictStr] = None
    get_lines_formatted_for_country: Optional[List[StrictStr]] = Field(default=None, alias="getLinesFormattedForCountry")
    __properties: ClassVar[List[str]] = ["streetName", "streetNumber", "streetNumberAddition", "buildingName", "locality", "postalCode", "city", "country", "showCountry", "culture", "display", "getLinesFormattedForCountry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressDataObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display",
            "get_lines_formatted_for_country",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if street_name (nullable) is None
        # and model_fields_set contains the field
        if self.street_name is None and "street_name" in self.model_fields_set:
            _dict['streetName'] = None

        # set to None if street_number (nullable) is None
        # and model_fields_set contains the field
        if self.street_number is None and "street_number" in self.model_fields_set:
            _dict['streetNumber'] = None

        # set to None if street_number_addition (nullable) is None
        # and model_fields_set contains the field
        if self.street_number_addition is None and "street_number_addition" in self.model_fields_set:
            _dict['streetNumberAddition'] = None

        # set to None if building_name (nullable) is None
        # and model_fields_set contains the field
        if self.building_name is None and "building_name" in self.model_fields_set:
            _dict['buildingName'] = None

        # set to None if locality (nullable) is None
        # and model_fields_set contains the field
        if self.locality is None and "locality" in self.model_fields_set:
            _dict['locality'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if culture (nullable) is None
        # and model_fields_set contains the field
        if self.culture is None and "culture" in self.model_fields_set:
            _dict['culture'] = None

        # set to None if display (nullable) is None
        # and model_fields_set contains the field
        if self.display is None and "display" in self.model_fields_set:
            _dict['display'] = None

        # set to None if get_lines_formatted_for_country (nullable) is None
        # and model_fields_set contains the field
        if self.get_lines_formatted_for_country is None and "get_lines_formatted_for_country" in self.model_fields_set:
            _dict['getLinesFormattedForCountry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressDataObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "streetName": obj.get("streetName"),
            "streetNumber": obj.get("streetNumber"),
            "streetNumberAddition": obj.get("streetNumberAddition"),
            "buildingName": obj.get("buildingName"),
            "locality": obj.get("locality"),
            "postalCode": obj.get("postalCode"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "showCountry": obj.get("showCountry"),
            "culture": obj.get("culture"),
            "display": obj.get("display"),
            "getLinesFormattedForCountry": obj.get("getLinesFormattedForCountry")
        })
        return _obj


