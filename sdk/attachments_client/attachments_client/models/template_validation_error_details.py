# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from attachments_client.models.entity_subject_type import EntitySubjectType
from attachments_client.models.error_code_message import ErrorCodeMessage
from typing import Optional, Set
from typing_extensions import Self

class TemplateValidationErrorDetails(BaseModel):
    """
    TemplateValidationErrorDetails
    """ # noqa: E501
    originator_type: Optional[EntitySubjectType] = Field(default=None, alias="originatorType")
    originator_id: Optional[StrictStr] = Field(default=None, alias="originatorId")
    message: Optional[ErrorCodeMessage] = None
    subject_type: Optional[EntitySubjectType] = Field(default=None, alias="subjectType")
    subject_id: Optional[StrictStr] = Field(default=None, alias="subjectId")
    __properties: ClassVar[List[str]] = ["originatorType", "originatorId", "message", "subjectType", "subjectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateValidationErrorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        # set to None if originator_type (nullable) is None
        # and model_fields_set contains the field
        if self.originator_type is None and "originator_type" in self.model_fields_set:
            _dict['originatorType'] = None

        # set to None if originator_id (nullable) is None
        # and model_fields_set contains the field
        if self.originator_id is None and "originator_id" in self.model_fields_set:
            _dict['originatorId'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if subject_type (nullable) is None
        # and model_fields_set contains the field
        if self.subject_type is None and "subject_type" in self.model_fields_set:
            _dict['subjectType'] = None

        # set to None if subject_id (nullable) is None
        # and model_fields_set contains the field
        if self.subject_id is None and "subject_id" in self.model_fields_set:
            _dict['subjectId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateValidationErrorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "originatorType": obj.get("originatorType"),
            "originatorId": obj.get("originatorId"),
            "message": ErrorCodeMessage.from_dict(obj["message"]) if obj.get("message") is not None else None,
            "subjectType": obj.get("subjectType"),
            "subjectId": obj.get("subjectId")
        })
        return _obj


