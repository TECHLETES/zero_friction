# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from attachments_client.models.entity_subject_type import EntitySubjectType
from attachments_client.models.template_data_object import TemplateDataObject
from typing import Optional, Set
from typing_extensions import Self

class TemplateDataContainer(BaseModel):
    """
    TemplateDataContainer
    """ # noqa: E501
    created_date_time: Optional[datetime] = Field(default=None, alias="createdDateTime")
    id: Optional[StrictStr] = None
    etag: Optional[StrictStr] = Field(default=None, alias="_etag")
    ttl: Optional[Annotated[int, Field(le=4294967295, strict=True, ge=0)]] = None
    cid: Optional[StrictStr] = Field(default=None, alias="_cid")
    ts: Optional[StrictInt] = Field(default=None, alias="_ts")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    require_attention: Optional[StrictBool] = Field(default=None, alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, alias="hasWarnings")
    organisation_id: Optional[StrictStr] = Field(default=None, alias="organisationId")
    data_object: Optional[TemplateDataObject] = Field(default=None, alias="dataObject")
    discriminator: Optional[StrictStr] = None
    entity_type: Optional[EntitySubjectType] = Field(default=None, alias="entityType")
    __properties: ClassVar[List[str]] = ["createdDateTime", "id", "_etag", "ttl", "_cid", "_ts", "userId", "requireAttention", "hasErrors", "hasWarnings", "organisationId", "dataObject", "discriminator", "entityType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateDataContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
            "discriminator",
            "entity_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_object
        if self.data_object:
            _dict['dataObject'] = self.data_object.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if ttl (nullable) is None
        # and model_fields_set contains the field
        if self.ttl is None and "ttl" in self.model_fields_set:
            _dict['ttl'] = None

        # set to None if cid (nullable) is None
        # and model_fields_set contains the field
        if self.cid is None and "cid" in self.model_fields_set:
            _dict['_cid'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if data_object (nullable) is None
        # and model_fields_set contains the field
        if self.data_object is None and "data_object" in self.model_fields_set:
            _dict['dataObject'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateDataContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdDateTime": obj.get("createdDateTime"),
            "id": obj.get("id"),
            "_etag": obj.get("_etag"),
            "ttl": obj.get("ttl"),
            "_cid": obj.get("_cid"),
            "_ts": obj.get("_ts"),
            "userId": obj.get("userId"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "organisationId": obj.get("organisationId"),
            "dataObject": TemplateDataObject.from_dict(obj["dataObject"]) if obj.get("dataObject") is not None else None,
            "discriminator": obj.get("discriminator"),
            "entityType": obj.get("entityType")
        })
        return _obj


