# coding: utf-8

"""
    Attachments

    Attachments API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from attachments_client.models.address_data_object import AddressDataObject
from attachments_client.models.organization_parameters_data_object import OrganizationParametersDataObject
from typing import Optional, Set
from typing_extensions import Self

class OrganizationDataObject(BaseModel):
    """
    OrganizationDataObject
    """ # noqa: E501
    primary_color: Optional[StrictStr] = Field(default=None, alias="primaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="secondaryColor")
    bank_account: Optional[StrictStr] = Field(default=None, alias="bankAccount")
    bank_account_holder: Optional[StrictStr] = Field(default=None, alias="bankAccountHolder")
    vat_account_number: Optional[StrictStr] = Field(default=None, alias="vatAccountNumber")
    company_account_number: Optional[StrictStr] = Field(default=None, alias="companyAccountNumber")
    description: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    logo_cdn_url: Optional[StrictStr] = Field(default=None, alias="logoCdnUrl")
    address: Optional[AddressDataObject] = None
    email_address: Optional[StrictStr] = Field(default=None, alias="emailAddress")
    telephone: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    telephone_interruptions: Optional[StrictStr] = Field(default=None, alias="telephoneInterruptions")
    support: Optional[StrictStr] = None
    customer_portal: Optional[StrictStr] = Field(default=None, alias="customerPortal")
    parameters: Optional[OrganizationParametersDataObject] = None
    __properties: ClassVar[List[str]] = ["primaryColor", "secondaryColor", "bankAccount", "bankAccountHolder", "vatAccountNumber", "companyAccountNumber", "description", "logo", "logoCdnUrl", "address", "emailAddress", "telephone", "website", "telephoneInterruptions", "support", "customerPortal", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationDataObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['primaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['secondaryColor'] = None

        # set to None if bank_account (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account is None and "bank_account" in self.model_fields_set:
            _dict['bankAccount'] = None

        # set to None if bank_account_holder (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account_holder is None and "bank_account_holder" in self.model_fields_set:
            _dict['bankAccountHolder'] = None

        # set to None if vat_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_account_number is None and "vat_account_number" in self.model_fields_set:
            _dict['vatAccountNumber'] = None

        # set to None if company_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.company_account_number is None and "company_account_number" in self.model_fields_set:
            _dict['companyAccountNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if logo_cdn_url (nullable) is None
        # and model_fields_set contains the field
        if self.logo_cdn_url is None and "logo_cdn_url" in self.model_fields_set:
            _dict['logoCdnUrl'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['emailAddress'] = None

        # set to None if telephone (nullable) is None
        # and model_fields_set contains the field
        if self.telephone is None and "telephone" in self.model_fields_set:
            _dict['telephone'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if telephone_interruptions (nullable) is None
        # and model_fields_set contains the field
        if self.telephone_interruptions is None and "telephone_interruptions" in self.model_fields_set:
            _dict['telephoneInterruptions'] = None

        # set to None if support (nullable) is None
        # and model_fields_set contains the field
        if self.support is None and "support" in self.model_fields_set:
            _dict['support'] = None

        # set to None if customer_portal (nullable) is None
        # and model_fields_set contains the field
        if self.customer_portal is None and "customer_portal" in self.model_fields_set:
            _dict['customerPortal'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationDataObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primaryColor": obj.get("primaryColor"),
            "secondaryColor": obj.get("secondaryColor"),
            "bankAccount": obj.get("bankAccount"),
            "bankAccountHolder": obj.get("bankAccountHolder"),
            "vatAccountNumber": obj.get("vatAccountNumber"),
            "companyAccountNumber": obj.get("companyAccountNumber"),
            "description": obj.get("description"),
            "logo": obj.get("logo"),
            "logoCdnUrl": obj.get("logoCdnUrl"),
            "address": AddressDataObject.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "emailAddress": obj.get("emailAddress"),
            "telephone": obj.get("telephone"),
            "website": obj.get("website"),
            "telephoneInterruptions": obj.get("telephoneInterruptions"),
            "support": obj.get("support"),
            "customerPortal": obj.get("customerPortal"),
            "parameters": OrganizationParametersDataObject.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None
        })
        return _obj


