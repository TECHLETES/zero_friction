# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from masterdata_client.models.meter_dto import MeterDTO

class TestMeterDTO(unittest.TestCase):
    """MeterDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MeterDTO:
        """Test MeterDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MeterDTO`
        """
        model = MeterDTO()
        if include_optional:
            return MeterDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                serial_number = '',
                meter_tag = '',
                meter_type = 'individual',
                model_id = '',
                status_history = [
                    masterdata_client.models.meter_status_history_dto.MeterStatusHistoryDTO(
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        meter_status = null, 
                        service_location_id = '', 
                        installed_at_address = null, 
                        property_group = null, )
                    ],
                channels = [
                    masterdata_client.models.external_channel_dto.ExternalChannelDTO(
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        data_frequency = null, 
                        incrementation_type = null, 
                        metering_type = null, 
                        utility_type = null, 
                        direction = null, 
                        unit_of_measure = null, 
                        time_of_use = '', 
                        description = '', 
                        external_identifier = '', 
                        last_time_received_data = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        measurements_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        relation_external_reference = '', 
                        issues_count = 56, 
                        has_issue = True, 
                        issues = [
                            masterdata_client.models.metering_issue_reference.MeteringIssueReference(
                                metering_issue_id = '', 
                                error = null, 
                                status = null, 
                                noticed_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        built_in = True, 
                        hidden = True, )
                    ],
                last_time_received_data = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                measurements_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                parent_meter_relation = masterdata_client.models.meter_relation_dto.MeterRelationDTO(
                    meter_id = '', 
                    serial_number = '', 
                    external_reference = '', ),
                property_group = masterdata_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                    id = '', 
                    name = '', ),
                time_zone = '',
                meter_properties = None,
                custom_properties = [
                    masterdata_client.models.custom_entity_property_dto.CustomEntityPropertyDTO(
                        custom_entity_property_type_id = '', 
                        values = [
                            masterdata_client.models.custom_entity_property_value_dto.CustomEntityPropertyValueDTO(
                                value_decimal = 1.337, 
                                value_string = '', 
                                value_boolean = True, 
                                value_number = 56, 
                                value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value_dropdown = [
                                    ''
                                    ], 
                                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                measurement_issues_count = 56,
                meter_issues_count = 56,
                issues_count = 56,
                has_issue = True,
                issues = [
                    masterdata_client.models.metering_issue_reference.MeteringIssueReference(
                        metering_issue_id = '', 
                        error = null, 
                        status = null, 
                        noticed_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                reading_frequency = 'hourly',
                next_expected_reading_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return MeterDTO(
        )
        """

    def testMeterDTO(self):
        """Test MeterDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
