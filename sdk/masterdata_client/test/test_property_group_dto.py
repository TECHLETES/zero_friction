# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from masterdata_client.models.property_group_dto import PropertyGroupDTO

class TestPropertyGroupDTO(unittest.TestCase):
    """PropertyGroupDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PropertyGroupDTO:
        """Test PropertyGroupDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PropertyGroupDTO`
        """
        model = PropertyGroupDTO()
        if include_optional:
            return PropertyGroupDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                name = '',
                address = masterdata_client.models.address_dto.AddressDTO(
                    street_name = '', 
                    street_number = '', 
                    street_number_addition = '', 
                    postal_code = '', 
                    building_name = '', 
                    locality = '', 
                    city = '', 
                    country = null, 
                    localized_display = '', 
                    line_one = '', 
                    line_two = '', ),
                default_management_relations = [
                    masterdata_client.models.management_relation_dto.ManagementRelationDTO(
                        customer_id = '', 
                        short_display_name = '', 
                        account_number = '', 
                        management_relation_type = null, )
                    ],
                service_location_ids = [
                    ''
                    ],
                type = 'building',
                cost_allocation_enabled = True,
                communication_configuration = masterdata_client.models.communication_configuration_dto.CommunicationConfigurationDTO(
                    company_name = '', 
                    vat_account_number = '', 
                    company_account_number = '', 
                    logo = '', 
                    logo_cdn_url = '', 
                    primary_color = '', 
                    secondary_color = '', 
                    address = null, 
                    contact_details = null, ),
                custom_properties = [
                    masterdata_client.models.custom_entity_property_dto.CustomEntityPropertyDTO(
                        custom_entity_property_type_id = '', 
                        values = [
                            masterdata_client.models.custom_entity_property_value_dto.CustomEntityPropertyValueDTO(
                                value_decimal = 1.337, 
                                value_string = '', 
                                value_boolean = True, 
                                value_number = 56, 
                                value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value_dropdown = [
                                    ''
                                    ], 
                                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                deleted = True
            )
        else:
            return PropertyGroupDTO(
        )
        """

    def testPropertyGroupDTO(self):
        """Test PropertyGroupDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
