# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from masterdata_client.models.external_channel_dto import ExternalChannelDTO

class TestExternalChannelDTO(unittest.TestCase):
    """ExternalChannelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExternalChannelDTO:
        """Test ExternalChannelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExternalChannelDTO`
        """
        model = ExternalChannelDTO()
        if include_optional:
            return ExternalChannelDTO(
                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_frequency = 'pt1m',
                incrementation_type = 'delta',
                metering_type = 'none',
                utility_type = 'none',
                direction = 'offtake',
                unit_of_measure = 'none',
                time_of_use = '',
                description = '',
                external_identifier = '',
                last_time_received_data = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                measurements_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                relation_external_reference = '',
                issues_count = 56,
                has_issue = True,
                issues = [
                    masterdata_client.models.metering_issue_reference.MeteringIssueReference(
                        metering_issue_id = '', 
                        error = null, 
                        status = null, 
                        noticed_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                built_in = True,
                hidden = True
            )
        else:
            return ExternalChannelDTO(
        )
        """

    def testExternalChannelDTO(self):
        """Test ExternalChannelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
