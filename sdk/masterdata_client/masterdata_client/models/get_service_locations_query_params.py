# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetServiceLocationsQueryParams(BaseModel):
    """
    GetServiceLocationsQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    property_group_ids: Optional[List[StrictStr]] = Field(default=None, alias="propertyGroupIds")
    exclude_service_locations_supplied_in_contract_id: Optional[StrictStr] = Field(default=None, alias="excludeServiceLocationsSuppliedInContractId")
    exclude_service_locations_in_property_group_id: Optional[StrictStr] = Field(default=None, alias="excludeServiceLocationsInPropertyGroupId")
    reference_date_time: Optional[datetime] = Field(default=None, alias="referenceDateTime")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    city: Optional[StrictStr] = None
    street_number: Optional[StrictStr] = Field(default=None, alias="streetNumber")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "customerId", "propertyGroupIds", "excludeServiceLocationsSuppliedInContractId", "excludeServiceLocationsInPropertyGroupId", "referenceDateTime", "postalCode", "city", "streetNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetServiceLocationsQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if property_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_ids is None and "property_group_ids" in self.model_fields_set:
            _dict['propertyGroupIds'] = None

        # set to None if exclude_service_locations_supplied_in_contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_service_locations_supplied_in_contract_id is None and "exclude_service_locations_supplied_in_contract_id" in self.model_fields_set:
            _dict['excludeServiceLocationsSuppliedInContractId'] = None

        # set to None if exclude_service_locations_in_property_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_service_locations_in_property_group_id is None and "exclude_service_locations_in_property_group_id" in self.model_fields_set:
            _dict['excludeServiceLocationsInPropertyGroupId'] = None

        # set to None if reference_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.reference_date_time is None and "reference_date_time" in self.model_fields_set:
            _dict['referenceDateTime'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if street_number (nullable) is None
        # and model_fields_set contains the field
        if self.street_number is None and "street_number" in self.model_fields_set:
            _dict['streetNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetServiceLocationsQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "customerId": obj.get("customerId"),
            "propertyGroupIds": obj.get("propertyGroupIds"),
            "excludeServiceLocationsSuppliedInContractId": obj.get("excludeServiceLocationsSuppliedInContractId"),
            "excludeServiceLocationsInPropertyGroupId": obj.get("excludeServiceLocationsInPropertyGroupId"),
            "referenceDateTime": obj.get("referenceDateTime"),
            "postalCode": obj.get("postalCode"),
            "city": obj.get("city"),
            "streetNumber": obj.get("streetNumber")
        })
        return _obj


