# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.attachment_signature import AttachmentSignature
from masterdata_client.models.create_contract_service_location_request import CreateContractServiceLocationRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateContractRequest(BaseModel):
    """
    CreateContractRequest
    """ # noqa: E501
    contractor_id: Optional[StrictStr] = Field(default=None, alias="contractorId")
    contract_number: Optional[StrictStr] = Field(default=None, alias="contractNumber")
    supply_start_date: Optional[datetime] = Field(default=None, alias="supplyStartDate")
    supply_end_date: Optional[datetime] = Field(default=None, alias="supplyEndDate")
    contracted_service_locations: Optional[List[CreateContractServiceLocationRequest]] = Field(default=None, alias="contractedServiceLocations")
    attachment_signatures: Optional[List[AttachmentSignature]] = Field(default=None, alias="attachmentSignatures")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    use_property_group_product: Optional[StrictBool] = Field(default=None, alias="usePropertyGroupProduct")
    invoice_address: Optional[AddressDTO] = Field(default=None, alias="invoiceAddress")
    external_contract_reference: Optional[StrictStr] = Field(default=None, alias="externalContractReference")
    billing_properties: Optional[Dict[str, Any]] = Field(default=None, alias="billingProperties")
    __properties: ClassVar[List[str]] = ["contractorId", "contractNumber", "supplyStartDate", "supplyEndDate", "contractedServiceLocations", "attachmentSignatures", "productId", "usePropertyGroupProduct", "invoiceAddress", "externalContractReference", "billingProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateContractRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contracted_service_locations (list)
        _items = []
        if self.contracted_service_locations:
            for _item_contracted_service_locations in self.contracted_service_locations:
                if _item_contracted_service_locations:
                    _items.append(_item_contracted_service_locations.to_dict())
            _dict['contractedServiceLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_signatures (list)
        _items = []
        if self.attachment_signatures:
            for _item_attachment_signatures in self.attachment_signatures:
                if _item_attachment_signatures:
                    _items.append(_item_attachment_signatures.to_dict())
            _dict['attachmentSignatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_address
        if self.invoice_address:
            _dict['invoiceAddress'] = self.invoice_address.to_dict()
        # set to None if contractor_id (nullable) is None
        # and model_fields_set contains the field
        if self.contractor_id is None and "contractor_id" in self.model_fields_set:
            _dict['contractorId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if supply_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.supply_end_date is None and "supply_end_date" in self.model_fields_set:
            _dict['supplyEndDate'] = None

        # set to None if contracted_service_locations (nullable) is None
        # and model_fields_set contains the field
        if self.contracted_service_locations is None and "contracted_service_locations" in self.model_fields_set:
            _dict['contractedServiceLocations'] = None

        # set to None if attachment_signatures (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_signatures is None and "attachment_signatures" in self.model_fields_set:
            _dict['attachmentSignatures'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if invoice_address (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_address is None and "invoice_address" in self.model_fields_set:
            _dict['invoiceAddress'] = None

        # set to None if external_contract_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_contract_reference is None and "external_contract_reference" in self.model_fields_set:
            _dict['externalContractReference'] = None

        # set to None if billing_properties (nullable) is None
        # and model_fields_set contains the field
        if self.billing_properties is None and "billing_properties" in self.model_fields_set:
            _dict['billingProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateContractRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractorId": obj.get("contractorId"),
            "contractNumber": obj.get("contractNumber"),
            "supplyStartDate": obj.get("supplyStartDate"),
            "supplyEndDate": obj.get("supplyEndDate"),
            "contractedServiceLocations": [CreateContractServiceLocationRequest.from_dict(_item) for _item in obj["contractedServiceLocations"]] if obj.get("contractedServiceLocations") is not None else None,
            "attachmentSignatures": [AttachmentSignature.from_dict(_item) for _item in obj["attachmentSignatures"]] if obj.get("attachmentSignatures") is not None else None,
            "productId": obj.get("productId"),
            "usePropertyGroupProduct": obj.get("usePropertyGroupProduct"),
            "invoiceAddress": AddressDTO.from_dict(obj["invoiceAddress"]) if obj.get("invoiceAddress") is not None else None,
            "externalContractReference": obj.get("externalContractReference"),
            "billingProperties": obj.get("billingProperties")
        })
        return _obj


