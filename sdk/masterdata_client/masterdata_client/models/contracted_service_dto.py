# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.contracted_service_estimated_consumption_dto import ContractedServiceEstimatedConsumptionDTO
from masterdata_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class ContractedServiceDTO(BaseModel):
    """
    ContractedServiceDTO
    """ # noqa: E501
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    external_identifier: Optional[StrictStr] = Field(default=None, alias="externalIdentifier")
    is_consumption_based: Optional[StrictBool] = Field(default=None, alias="isConsumptionBased")
    estimated_consumptions: Optional[List[ContractedServiceEstimatedConsumptionDTO]] = Field(default=None, alias="estimatedConsumptions")
    __properties: ClassVar[List[str]] = ["startDateTime", "endDateTime", "utilityType", "externalIdentifier", "isConsumptionBased", "estimatedConsumptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractedServiceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in estimated_consumptions (list)
        _items = []
        if self.estimated_consumptions:
            for _item_estimated_consumptions in self.estimated_consumptions:
                if _item_estimated_consumptions:
                    _items.append(_item_estimated_consumptions.to_dict())
            _dict['estimatedConsumptions'] = _items
        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if external_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_identifier is None and "external_identifier" in self.model_fields_set:
            _dict['externalIdentifier'] = None

        # set to None if estimated_consumptions (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_consumptions is None and "estimated_consumptions" in self.model_fields_set:
            _dict['estimatedConsumptions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractedServiceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "utilityType": obj.get("utilityType"),
            "externalIdentifier": obj.get("externalIdentifier"),
            "isConsumptionBased": obj.get("isConsumptionBased"),
            "estimatedConsumptions": [ContractedServiceEstimatedConsumptionDTO.from_dict(_item) for _item in obj["estimatedConsumptions"]] if obj.get("estimatedConsumptions") is not None else None
        })
        return _obj


