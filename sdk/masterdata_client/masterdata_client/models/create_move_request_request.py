# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.move_request_attachment_signature_request import MoveRequestAttachmentSignatureRequest
from masterdata_client.models.move_request_customer_details import MoveRequestCustomerDetails
from masterdata_client.models.move_request_measurement_details import MoveRequestMeasurementDetails
from masterdata_client.models.move_request_service_location_details import MoveRequestServiceLocationDetails
from masterdata_client.models.move_request_type import MoveRequestType
from typing import Optional, Set
from typing_extensions import Self

class CreateMoveRequestRequest(BaseModel):
    """
    CreateMoveRequestRequest
    """ # noqa: E501
    move_request_type: Optional[MoveRequestType] = Field(default=None, alias="moveRequestType")
    mutation_date_time: Optional[datetime] = Field(default=None, alias="mutationDateTime")
    customer_details: Optional[MoveRequestCustomerDetails] = Field(default=None, alias="customerDetails")
    external_contract_id: Optional[StrictStr] = Field(default=None, alias="externalContractId")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    service_location_details: Optional[MoveRequestServiceLocationDetails] = Field(default=None, alias="serviceLocationDetails")
    measurement_details: Optional[List[MoveRequestMeasurementDetails]] = Field(default=None, alias="measurementDetails")
    attachment_signatures: Optional[List[MoveRequestAttachmentSignatureRequest]] = Field(default=None, alias="attachmentSignatures")
    custom_message: Optional[StrictStr] = Field(default=None, alias="customMessage")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    __properties: ClassVar[List[str]] = ["moveRequestType", "mutationDateTime", "customerDetails", "externalContractId", "externalId", "serviceLocationDetails", "measurementDetails", "attachmentSignatures", "customMessage", "productId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateMoveRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customerDetails'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_location_details
        if self.service_location_details:
            _dict['serviceLocationDetails'] = self.service_location_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_details (list)
        _items = []
        if self.measurement_details:
            for _item_measurement_details in self.measurement_details:
                if _item_measurement_details:
                    _items.append(_item_measurement_details.to_dict())
            _dict['measurementDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_signatures (list)
        _items = []
        if self.attachment_signatures:
            for _item_attachment_signatures in self.attachment_signatures:
                if _item_attachment_signatures:
                    _items.append(_item_attachment_signatures.to_dict())
            _dict['attachmentSignatures'] = _items
        # set to None if move_request_type (nullable) is None
        # and model_fields_set contains the field
        if self.move_request_type is None and "move_request_type" in self.model_fields_set:
            _dict['moveRequestType'] = None

        # set to None if customer_details (nullable) is None
        # and model_fields_set contains the field
        if self.customer_details is None and "customer_details" in self.model_fields_set:
            _dict['customerDetails'] = None

        # set to None if external_contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_contract_id is None and "external_contract_id" in self.model_fields_set:
            _dict['externalContractId'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if service_location_details (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_details is None and "service_location_details" in self.model_fields_set:
            _dict['serviceLocationDetails'] = None

        # set to None if measurement_details (nullable) is None
        # and model_fields_set contains the field
        if self.measurement_details is None and "measurement_details" in self.model_fields_set:
            _dict['measurementDetails'] = None

        # set to None if attachment_signatures (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_signatures is None and "attachment_signatures" in self.model_fields_set:
            _dict['attachmentSignatures'] = None

        # set to None if custom_message (nullable) is None
        # and model_fields_set contains the field
        if self.custom_message is None and "custom_message" in self.model_fields_set:
            _dict['customMessage'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateMoveRequestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "moveRequestType": obj.get("moveRequestType"),
            "mutationDateTime": obj.get("mutationDateTime"),
            "customerDetails": MoveRequestCustomerDetails.from_dict(obj["customerDetails"]) if obj.get("customerDetails") is not None else None,
            "externalContractId": obj.get("externalContractId"),
            "externalId": obj.get("externalId"),
            "serviceLocationDetails": MoveRequestServiceLocationDetails.from_dict(obj["serviceLocationDetails"]) if obj.get("serviceLocationDetails") is not None else None,
            "measurementDetails": [MoveRequestMeasurementDetails.from_dict(_item) for _item in obj["measurementDetails"]] if obj.get("measurementDetails") is not None else None,
            "attachmentSignatures": [MoveRequestAttachmentSignatureRequest.from_dict(_item) for _item in obj["attachmentSignatures"]] if obj.get("attachmentSignatures") is not None else None,
            "customMessage": obj.get("customMessage"),
            "productId": obj.get("productId")
        })
        return _obj


