# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.meter_status import MeterStatus
from masterdata_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class MeterStatusHistoryDTO(BaseModel):
    """
    MeterStatusHistoryDTO
    """ # noqa: E501
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    meter_status: Optional[MeterStatus] = Field(default=None, alias="meterStatus")
    service_location_id: Optional[StrictStr] = Field(default=None, alias="serviceLocationId")
    installed_at_address: Optional[AddressDTO] = Field(default=None, alias="installedAtAddress")
    property_group: Optional[PropertyGroupReferenceDTO] = Field(default=None, alias="propertyGroup")
    __properties: ClassVar[List[str]] = ["startDateTime", "endDateTime", "meterStatus", "serviceLocationId", "installedAtAddress", "propertyGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeterStatusHistoryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of installed_at_address
        if self.installed_at_address:
            _dict['installedAtAddress'] = self.installed_at_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_group
        if self.property_group:
            _dict['propertyGroup'] = self.property_group.to_dict()
        # set to None if meter_status (nullable) is None
        # and model_fields_set contains the field
        if self.meter_status is None and "meter_status" in self.model_fields_set:
            _dict['meterStatus'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if installed_at_address (nullable) is None
        # and model_fields_set contains the field
        if self.installed_at_address is None and "installed_at_address" in self.model_fields_set:
            _dict['installedAtAddress'] = None

        # set to None if property_group (nullable) is None
        # and model_fields_set contains the field
        if self.property_group is None and "property_group" in self.model_fields_set:
            _dict['propertyGroup'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeterStatusHistoryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "meterStatus": obj.get("meterStatus"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "installedAtAddress": AddressDTO.from_dict(obj["installedAtAddress"]) if obj.get("installedAtAddress") is not None else None,
            "propertyGroup": PropertyGroupReferenceDTO.from_dict(obj["propertyGroup"]) if obj.get("propertyGroup") is not None else None
        })
        return _obj


