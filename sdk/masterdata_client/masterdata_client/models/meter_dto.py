# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.custom_entity_property_dto import CustomEntityPropertyDTO
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.external_channel_dto import ExternalChannelDTO
from masterdata_client.models.meter_reading_frequency import MeterReadingFrequency
from masterdata_client.models.meter_relation_dto import MeterRelationDTO
from masterdata_client.models.meter_status_history_dto import MeterStatusHistoryDTO
from masterdata_client.models.meter_type import MeterType
from masterdata_client.models.metering_issue_reference import MeteringIssueReference
from masterdata_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class MeterDTO(BaseModel):
    """
    MeterDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    serial_number: Optional[StrictStr] = Field(default=None, alias="serialNumber")
    meter_tag: Optional[StrictStr] = Field(default=None, alias="meterTag")
    meter_type: Optional[MeterType] = Field(default=None, alias="meterType")
    model_id: Optional[StrictStr] = Field(default=None, alias="modelId")
    status_history: Optional[List[MeterStatusHistoryDTO]] = Field(default=None, alias="statusHistory")
    channels: Optional[List[ExternalChannelDTO]] = Field(default=None, description="By default only contains not hidden channels. If you want to get hidden channels, call /md/meters/{meterId}?showhiddenchannels=true")
    last_time_received_data: Optional[datetime] = Field(default=None, alias="lastTimeReceivedData")
    measurements_until: Optional[datetime] = Field(default=None, alias="measurementsUntil")
    parent_meter_relation: Optional[MeterRelationDTO] = Field(default=None, alias="parentMeterRelation")
    property_group: Optional[PropertyGroupReferenceDTO] = Field(default=None, alias="propertyGroup")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    meter_properties: Optional[Dict[str, Any]] = Field(default=None, alias="meterProperties")
    custom_properties: Optional[List[CustomEntityPropertyDTO]] = Field(default=None, alias="customProperties")
    measurement_issues_count: Optional[StrictInt] = Field(default=None, alias="measurementIssuesCount")
    meter_issues_count: Optional[StrictInt] = Field(default=None, alias="meterIssuesCount")
    issues_count: Optional[StrictInt] = Field(default=None, alias="issuesCount")
    has_issue: Optional[StrictBool] = Field(default=None, alias="hasIssue")
    issues: Optional[List[MeteringIssueReference]] = None
    reading_frequency: Optional[MeterReadingFrequency] = Field(default=None, alias="readingFrequency")
    next_expected_reading_date: Optional[datetime] = Field(default=None, alias="nextExpectedReadingDate")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "serialNumber", "meterTag", "meterType", "modelId", "statusHistory", "channels", "lastTimeReceivedData", "measurementsUntil", "parentMeterRelation", "propertyGroup", "timeZone", "meterProperties", "customProperties", "measurementIssuesCount", "meterIssuesCount", "issuesCount", "hasIssue", "issues", "readingFrequency", "nextExpectedReadingDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeterDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
            "last_time_received_data",
            "measurements_until",
            "issues_count",
            "has_issue",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status_history (list)
        _items = []
        if self.status_history:
            for _item_status_history in self.status_history:
                if _item_status_history:
                    _items.append(_item_status_history.to_dict())
            _dict['statusHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in channels (list)
        _items = []
        if self.channels:
            for _item_channels in self.channels:
                if _item_channels:
                    _items.append(_item_channels.to_dict())
            _dict['channels'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_meter_relation
        if self.parent_meter_relation:
            _dict['parentMeterRelation'] = self.parent_meter_relation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_group
        if self.property_group:
            _dict['propertyGroup'] = self.property_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if meter_tag (nullable) is None
        # and model_fields_set contains the field
        if self.meter_tag is None and "meter_tag" in self.model_fields_set:
            _dict['meterTag'] = None

        # set to None if meter_type (nullable) is None
        # and model_fields_set contains the field
        if self.meter_type is None and "meter_type" in self.model_fields_set:
            _dict['meterType'] = None

        # set to None if model_id (nullable) is None
        # and model_fields_set contains the field
        if self.model_id is None and "model_id" in self.model_fields_set:
            _dict['modelId'] = None

        # set to None if status_history (nullable) is None
        # and model_fields_set contains the field
        if self.status_history is None and "status_history" in self.model_fields_set:
            _dict['statusHistory'] = None

        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['channels'] = None

        # set to None if last_time_received_data (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_received_data is None and "last_time_received_data" in self.model_fields_set:
            _dict['lastTimeReceivedData'] = None

        # set to None if measurements_until (nullable) is None
        # and model_fields_set contains the field
        if self.measurements_until is None and "measurements_until" in self.model_fields_set:
            _dict['measurementsUntil'] = None

        # set to None if parent_meter_relation (nullable) is None
        # and model_fields_set contains the field
        if self.parent_meter_relation is None and "parent_meter_relation" in self.model_fields_set:
            _dict['parentMeterRelation'] = None

        # set to None if property_group (nullable) is None
        # and model_fields_set contains the field
        if self.property_group is None and "property_group" in self.model_fields_set:
            _dict['propertyGroup'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if meter_properties (nullable) is None
        # and model_fields_set contains the field
        if self.meter_properties is None and "meter_properties" in self.model_fields_set:
            _dict['meterProperties'] = None

        # set to None if custom_properties (nullable) is None
        # and model_fields_set contains the field
        if self.custom_properties is None and "custom_properties" in self.model_fields_set:
            _dict['customProperties'] = None

        # set to None if issues (nullable) is None
        # and model_fields_set contains the field
        if self.issues is None and "issues" in self.model_fields_set:
            _dict['issues'] = None

        # set to None if reading_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.reading_frequency is None and "reading_frequency" in self.model_fields_set:
            _dict['readingFrequency'] = None

        # set to None if next_expected_reading_date (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_reading_date is None and "next_expected_reading_date" in self.model_fields_set:
            _dict['nextExpectedReadingDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeterDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "serialNumber": obj.get("serialNumber"),
            "meterTag": obj.get("meterTag"),
            "meterType": obj.get("meterType"),
            "modelId": obj.get("modelId"),
            "statusHistory": [MeterStatusHistoryDTO.from_dict(_item) for _item in obj["statusHistory"]] if obj.get("statusHistory") is not None else None,
            "channels": [ExternalChannelDTO.from_dict(_item) for _item in obj["channels"]] if obj.get("channels") is not None else None,
            "lastTimeReceivedData": obj.get("lastTimeReceivedData"),
            "measurementsUntil": obj.get("measurementsUntil"),
            "parentMeterRelation": MeterRelationDTO.from_dict(obj["parentMeterRelation"]) if obj.get("parentMeterRelation") is not None else None,
            "propertyGroup": PropertyGroupReferenceDTO.from_dict(obj["propertyGroup"]) if obj.get("propertyGroup") is not None else None,
            "timeZone": obj.get("timeZone"),
            "meterProperties": obj.get("meterProperties"),
            "customProperties": [CustomEntityPropertyDTO.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None,
            "measurementIssuesCount": obj.get("measurementIssuesCount"),
            "meterIssuesCount": obj.get("meterIssuesCount"),
            "issuesCount": obj.get("issuesCount"),
            "hasIssue": obj.get("hasIssue"),
            "issues": [MeteringIssueReference.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "readingFrequency": obj.get("readingFrequency"),
            "nextExpectedReadingDate": obj.get("nextExpectedReadingDate")
        })
        return _obj


