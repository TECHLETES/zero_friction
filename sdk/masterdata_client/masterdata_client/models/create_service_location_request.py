# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.create_service_request import CreateServiceRequest
from masterdata_client.models.management_relation_request import ManagementRelationRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateServiceLocationRequest(BaseModel):
    """
    CreateServiceLocationRequest
    """ # noqa: E501
    address: Optional[AddressDTO] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    services: Optional[List[CreateServiceRequest]] = None
    management_relations: Optional[List[ManagementRelationRequest]] = Field(default=None, alias="managementRelations")
    __properties: ClassVar[List[str]] = ["address", "externalId", "productId", "services", "managementRelations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateServiceLocationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in management_relations (list)
        _items = []
        if self.management_relations:
            for _item_management_relations in self.management_relations:
                if _item_management_relations:
                    _items.append(_item_management_relations.to_dict())
            _dict['managementRelations'] = _items
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if services (nullable) is None
        # and model_fields_set contains the field
        if self.services is None and "services" in self.model_fields_set:
            _dict['services'] = None

        # set to None if management_relations (nullable) is None
        # and model_fields_set contains the field
        if self.management_relations is None and "management_relations" in self.model_fields_set:
            _dict['managementRelations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateServiceLocationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": AddressDTO.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "externalId": obj.get("externalId"),
            "productId": obj.get("productId"),
            "services": [CreateServiceRequest.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "managementRelations": [ManagementRelationRequest.from_dict(_item) for _item in obj["managementRelations"]] if obj.get("managementRelations") is not None else None
        })
        return _obj


