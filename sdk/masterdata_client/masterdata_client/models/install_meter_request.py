# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.external_channel_request import ExternalChannelRequest
from masterdata_client.models.meter_reading_frequency import MeterReadingFrequency
from typing import Optional, Set
from typing_extensions import Self

class InstallMeterRequest(BaseModel):
    """
    InstallMeterRequest
    """ # noqa: E501
    mutation_date_time: Optional[datetime] = Field(default=None, alias="mutationDateTime")
    service_location_id: Optional[StrictStr] = Field(default=None, alias="serviceLocationId")
    property_group_id: Optional[StrictStr] = Field(default=None, alias="propertyGroupId")
    address_installed: Optional[AddressDTO] = Field(default=None, alias="addressInstalled")
    channel_templates: Optional[List[ExternalChannelRequest]] = Field(default=None, alias="channelTemplates")
    next_expected_reading_date: Optional[datetime] = Field(default=None, alias="nextExpectedReadingDate")
    reading_frequency: Optional[MeterReadingFrequency] = Field(default=None, alias="readingFrequency")
    __properties: ClassVar[List[str]] = ["mutationDateTime", "serviceLocationId", "propertyGroupId", "addressInstalled", "channelTemplates", "nextExpectedReadingDate", "readingFrequency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstallMeterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_installed
        if self.address_installed:
            _dict['addressInstalled'] = self.address_installed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in channel_templates (list)
        _items = []
        if self.channel_templates:
            for _item_channel_templates in self.channel_templates:
                if _item_channel_templates:
                    _items.append(_item_channel_templates.to_dict())
            _dict['channelTemplates'] = _items
        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if property_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_id is None and "property_group_id" in self.model_fields_set:
            _dict['propertyGroupId'] = None

        # set to None if address_installed (nullable) is None
        # and model_fields_set contains the field
        if self.address_installed is None and "address_installed" in self.model_fields_set:
            _dict['addressInstalled'] = None

        # set to None if channel_templates (nullable) is None
        # and model_fields_set contains the field
        if self.channel_templates is None and "channel_templates" in self.model_fields_set:
            _dict['channelTemplates'] = None

        # set to None if next_expected_reading_date (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_reading_date is None and "next_expected_reading_date" in self.model_fields_set:
            _dict['nextExpectedReadingDate'] = None

        # set to None if reading_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.reading_frequency is None and "reading_frequency" in self.model_fields_set:
            _dict['readingFrequency'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstallMeterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mutationDateTime": obj.get("mutationDateTime"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "propertyGroupId": obj.get("propertyGroupId"),
            "addressInstalled": AddressDTO.from_dict(obj["addressInstalled"]) if obj.get("addressInstalled") is not None else None,
            "channelTemplates": [ExternalChannelRequest.from_dict(_item) for _item in obj["channelTemplates"]] if obj.get("channelTemplates") is not None else None,
            "nextExpectedReadingDate": obj.get("nextExpectedReadingDate"),
            "readingFrequency": obj.get("readingFrequency")
        })
        return _obj


