# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.meter_reference import MeterReference
from masterdata_client.models.prepayment_account_status import PrepaymentAccountStatus
from masterdata_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class PrepaymentAccountDTO(BaseModel):
    """
    PrepaymentAccountDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    status: Optional[PrepaymentAccountStatus] = None
    meter: Optional[MeterReference] = None
    share_balance_across_utilities: Optional[StrictBool] = Field(default=None, alias="shareBalanceAcrossUtilities")
    channel_identifier: Optional[StrictStr] = Field(default=None, alias="channelIdentifier")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    contract_id: Optional[StrictStr] = Field(default=None, alias="contractId")
    service_location_id: Optional[StrictStr] = Field(default=None, alias="serviceLocationId")
    external_reference: Optional[StrictStr] = Field(default=None, alias="externalReference")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    debt: Optional[Union[StrictFloat, StrictInt]] = None
    emergency_credit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="emergencyCredit")
    balance_until: Optional[datetime] = Field(default=None, alias="balanceUntil")
    last_time_received_prepayment_transactions: Optional[datetime] = Field(default=None, alias="lastTimeReceivedPrepaymentTransactions")
    prepayment_transactions_until: Optional[datetime] = Field(default=None, alias="prepaymentTransactionsUntil")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "status", "meter", "shareBalanceAcrossUtilities", "channelIdentifier", "customerId", "contractId", "serviceLocationId", "externalReference", "utilityType", "startDateTime", "endDateTime", "balance", "debt", "emergencyCredit", "balanceUntil", "lastTimeReceivedPrepaymentTransactions", "prepaymentTransactionsUntil"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrepaymentAccountDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meter
        if self.meter:
            _dict['meter'] = self.meter.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if meter (nullable) is None
        # and model_fields_set contains the field
        if self.meter is None and "meter" in self.model_fields_set:
            _dict['meter'] = None

        # set to None if channel_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.channel_identifier is None and "channel_identifier" in self.model_fields_set:
            _dict['channelIdentifier'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_reference is None and "external_reference" in self.model_fields_set:
            _dict['externalReference'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if balance_until (nullable) is None
        # and model_fields_set contains the field
        if self.balance_until is None and "balance_until" in self.model_fields_set:
            _dict['balanceUntil'] = None

        # set to None if last_time_received_prepayment_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_received_prepayment_transactions is None and "last_time_received_prepayment_transactions" in self.model_fields_set:
            _dict['lastTimeReceivedPrepaymentTransactions'] = None

        # set to None if prepayment_transactions_until (nullable) is None
        # and model_fields_set contains the field
        if self.prepayment_transactions_until is None and "prepayment_transactions_until" in self.model_fields_set:
            _dict['prepaymentTransactionsUntil'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrepaymentAccountDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "status": obj.get("status"),
            "meter": MeterReference.from_dict(obj["meter"]) if obj.get("meter") is not None else None,
            "shareBalanceAcrossUtilities": obj.get("shareBalanceAcrossUtilities"),
            "channelIdentifier": obj.get("channelIdentifier"),
            "customerId": obj.get("customerId"),
            "contractId": obj.get("contractId"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "externalReference": obj.get("externalReference"),
            "utilityType": obj.get("utilityType"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "balance": obj.get("balance"),
            "debt": obj.get("debt"),
            "emergencyCredit": obj.get("emergencyCredit"),
            "balanceUntil": obj.get("balanceUntil"),
            "lastTimeReceivedPrepaymentTransactions": obj.get("lastTimeReceivedPrepaymentTransactions"),
            "prepaymentTransactionsUntil": obj.get("prepaymentTransactionsUntil")
        })
        return _obj


