# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.data_frequency import DataFrequency
from masterdata_client.models.direction import Direction
from masterdata_client.models.incrementation_type import IncrementationType
from masterdata_client.models.metering_type import MeteringType
from masterdata_client.models.unit_of_measure import UnitOfMeasure
from masterdata_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class ExternalChannelRequest(BaseModel):
    """
    ExternalChannelRequest
    """ # noqa: E501
    data_frequency: Optional[DataFrequency] = Field(default=None, alias="dataFrequency")
    metering_type: Optional[MeteringType] = Field(default=None, alias="meteringType")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    direction: Optional[Direction] = None
    incrementation_type: Optional[IncrementationType] = Field(default=None, alias="incrementationType")
    time_of_use: Optional[StrictStr] = Field(default=None, alias="timeOfUse")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="unitOfMeasure")
    external_identifier: Optional[StrictStr] = Field(default=None, alias="externalIdentifier")
    description: Optional[StrictStr] = None
    relation_external_reference: Optional[StrictStr] = Field(default=None, alias="relationExternalReference")
    __properties: ClassVar[List[str]] = ["dataFrequency", "meteringType", "utilityType", "direction", "incrementationType", "timeOfUse", "unitOfMeasure", "externalIdentifier", "description", "relationExternalReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.data_frequency is None and "data_frequency" in self.model_fields_set:
            _dict['dataFrequency'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if incrementation_type (nullable) is None
        # and model_fields_set contains the field
        if self.incrementation_type is None and "incrementation_type" in self.model_fields_set:
            _dict['incrementationType'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if external_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_identifier is None and "external_identifier" in self.model_fields_set:
            _dict['externalIdentifier'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if relation_external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.relation_external_reference is None and "relation_external_reference" in self.model_fields_set:
            _dict['relationExternalReference'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataFrequency": obj.get("dataFrequency"),
            "meteringType": obj.get("meteringType"),
            "utilityType": obj.get("utilityType"),
            "direction": obj.get("direction"),
            "incrementationType": obj.get("incrementationType"),
            "timeOfUse": obj.get("timeOfUse"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "externalIdentifier": obj.get("externalIdentifier"),
            "description": obj.get("description"),
            "relationExternalReference": obj.get("relationExternalReference")
        })
        return _obj


