# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.contract_billing_method import ContractBillingMethod
from masterdata_client.models.contract_status import ContractStatus
from typing import Optional, Set
from typing_extensions import Self

class CustomerContractDTO(BaseModel):
    """
    Represents a contract associated with a customer
    """ # noqa: E501
    contract_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the contract", alias="contractId")
    contract_number: Optional[StrictStr] = Field(default=None, description="Contract number for reference", alias="contractNumber")
    supply_start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the contract", alias="supplyStartDateTime")
    supply_end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the contract", alias="supplyEndDateTime")
    current_contract_status: Optional[ContractStatus] = Field(default=None, description="Current status of the contract", alias="currentContractStatus")
    contract_billing_method: Optional[ContractBillingMethod] = Field(default=None, description="Billing method for the contract", alias="contractBillingMethod")
    __properties: ClassVar[List[str]] = ["contractId", "contractNumber", "supplyStartDateTime", "supplyEndDateTime", "currentContractStatus", "contractBillingMethod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerContractDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if current_contract_status (nullable) is None
        # and model_fields_set contains the field
        if self.current_contract_status is None and "current_contract_status" in self.model_fields_set:
            _dict['currentContractStatus'] = None

        # set to None if contract_billing_method (nullable) is None
        # and model_fields_set contains the field
        if self.contract_billing_method is None and "contract_billing_method" in self.model_fields_set:
            _dict['contractBillingMethod'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerContractDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractId": obj.get("contractId"),
            "contractNumber": obj.get("contractNumber"),
            "supplyStartDateTime": obj.get("supplyStartDateTime"),
            "supplyEndDateTime": obj.get("supplyEndDateTime"),
            "currentContractStatus": obj.get("currentContractStatus"),
            "contractBillingMethod": obj.get("contractBillingMethod")
        })
        return _obj


