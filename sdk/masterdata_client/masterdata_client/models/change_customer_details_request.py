# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.country_code import CountryCode
from masterdata_client.models.customer_type import CustomerType
from typing import Optional, Set
from typing_extensions import Self

class ChangeCustomerDetailsRequest(BaseModel):
    """
    ChangeCustomerDetailsRequest
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    salutation: Optional[StrictStr] = None
    initials: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    birth_date: Optional[datetime] = Field(default=None, alias="birthDate")
    ssin: Optional[StrictStr] = Field(default=None, description="Social security identification number")
    ssin_country: Optional[CountryCode] = Field(default=None, description="Social security identification number country, used for validation", alias="ssinCountry")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    organization_number: Optional[StrictStr] = Field(default=None, alias="organizationNumber")
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    customer_type: Optional[CustomerType] = Field(default=None, alias="customerType")
    __properties: ClassVar[List[str]] = ["accountNumber", "salutation", "initials", "firstName", "lastName", "birthDate", "ssin", "ssinCountry", "companyName", "organizationNumber", "vatNumber", "customerType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeCustomerDetailsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if salutation (nullable) is None
        # and model_fields_set contains the field
        if self.salutation is None and "salutation" in self.model_fields_set:
            _dict['salutation'] = None

        # set to None if initials (nullable) is None
        # and model_fields_set contains the field
        if self.initials is None and "initials" in self.model_fields_set:
            _dict['initials'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if ssin (nullable) is None
        # and model_fields_set contains the field
        if self.ssin is None and "ssin" in self.model_fields_set:
            _dict['ssin'] = None

        # set to None if ssin_country (nullable) is None
        # and model_fields_set contains the field
        if self.ssin_country is None and "ssin_country" in self.model_fields_set:
            _dict['ssinCountry'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if organization_number (nullable) is None
        # and model_fields_set contains the field
        if self.organization_number is None and "organization_number" in self.model_fields_set:
            _dict['organizationNumber'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        # set to None if customer_type (nullable) is None
        # and model_fields_set contains the field
        if self.customer_type is None and "customer_type" in self.model_fields_set:
            _dict['customerType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeCustomerDetailsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "salutation": obj.get("salutation"),
            "initials": obj.get("initials"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "birthDate": obj.get("birthDate"),
            "ssin": obj.get("ssin"),
            "ssinCountry": obj.get("ssinCountry"),
            "companyName": obj.get("companyName"),
            "organizationNumber": obj.get("organizationNumber"),
            "vatNumber": obj.get("vatNumber"),
            "customerType": obj.get("customerType")
        })
        return _obj


