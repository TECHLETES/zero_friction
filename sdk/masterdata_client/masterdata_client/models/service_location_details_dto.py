# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.localised_error_dto import LocalisedErrorDTO
from masterdata_client.models.management_relation_dto import ManagementRelationDTO
from masterdata_client.models.move_request_contract_details_dto import MoveRequestContractDetailsDTO
from masterdata_client.models.service_location_service_details_dto import ServiceLocationServiceDetailsDTO
from typing import Optional, Set
from typing_extensions import Self

class ServiceLocationDetailsDTO(BaseModel):
    """
    ServiceLocationDetailsDTO
    """ # noqa: E501
    previous_contract_details: Optional[MoveRequestContractDetailsDTO] = Field(default=None, alias="previousContractDetails")
    current_contract_details: Optional[MoveRequestContractDetailsDTO] = Field(default=None, alias="currentContractDetails")
    owner: Optional[ManagementRelationDTO] = None
    address: Optional[AddressDTO] = None
    services: Optional[List[ServiceLocationServiceDetailsDTO]] = None
    linked: Optional[StrictBool] = None
    internal_id: Optional[StrictStr] = Field(default=None, alias="internalId")
    errors: Optional[List[LocalisedErrorDTO]] = None
    __properties: ClassVar[List[str]] = ["previousContractDetails", "currentContractDetails", "owner", "address", "services", "linked", "internalId", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceLocationDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of previous_contract_details
        if self.previous_contract_details:
            _dict['previousContractDetails'] = self.previous_contract_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_contract_details
        if self.current_contract_details:
            _dict['currentContractDetails'] = self.current_contract_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # set to None if previous_contract_details (nullable) is None
        # and model_fields_set contains the field
        if self.previous_contract_details is None and "previous_contract_details" in self.model_fields_set:
            _dict['previousContractDetails'] = None

        # set to None if current_contract_details (nullable) is None
        # and model_fields_set contains the field
        if self.current_contract_details is None and "current_contract_details" in self.model_fields_set:
            _dict['currentContractDetails'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if services (nullable) is None
        # and model_fields_set contains the field
        if self.services is None and "services" in self.model_fields_set:
            _dict['services'] = None

        # set to None if internal_id (nullable) is None
        # and model_fields_set contains the field
        if self.internal_id is None and "internal_id" in self.model_fields_set:
            _dict['internalId'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceLocationDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "previousContractDetails": MoveRequestContractDetailsDTO.from_dict(obj["previousContractDetails"]) if obj.get("previousContractDetails") is not None else None,
            "currentContractDetails": MoveRequestContractDetailsDTO.from_dict(obj["currentContractDetails"]) if obj.get("currentContractDetails") is not None else None,
            "owner": ManagementRelationDTO.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "address": AddressDTO.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "services": [ServiceLocationServiceDetailsDTO.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "linked": obj.get("linked"),
            "internalId": obj.get("internalId"),
            "errors": [LocalisedErrorDTO.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None
        })
        return _obj


