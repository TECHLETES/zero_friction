# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.attachment_signature import AttachmentSignature
from masterdata_client.models.contract_details_dto import ContractDetailsDTO
from masterdata_client.models.customer_details_dto import CustomerDetailsDTO
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.measurement_details_dto import MeasurementDetailsDTO
from masterdata_client.models.move_request_status import MoveRequestStatus
from masterdata_client.models.move_request_type import MoveRequestType
from masterdata_client.models.service_location_details_dto import ServiceLocationDetailsDTO
from typing import Optional, Set
from typing_extensions import Self

class MoveRequestDTO(BaseModel):
    """
    MoveRequestDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    customer_details: Optional[CustomerDetailsDTO] = Field(default=None, alias="customerDetails")
    service_location_details: Optional[ServiceLocationDetailsDTO] = Field(default=None, alias="serviceLocationDetails")
    measurement_details: Optional[List[MeasurementDetailsDTO]] = Field(default=None, alias="measurementDetails")
    contract_details: Optional[ContractDetailsDTO] = Field(default=None, alias="contractDetails")
    move_request_type: Optional[MoveRequestType] = Field(default=None, alias="moveRequestType")
    status: Optional[MoveRequestStatus] = None
    mutation_date_time: Optional[datetime] = Field(default=None, alias="mutationDateTime")
    custom_message: Optional[StrictStr] = Field(default=None, alias="customMessage")
    attachment_signatures: Optional[List[AttachmentSignature]] = Field(default=None, alias="attachmentSignatures")
    has_any_errors: Optional[StrictBool] = Field(default=None, alias="hasAnyErrors")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "externalId", "customerDetails", "serviceLocationDetails", "measurementDetails", "contractDetails", "moveRequestType", "status", "mutationDateTime", "customMessage", "attachmentSignatures", "hasAnyErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MoveRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_details
        if self.customer_details:
            _dict['customerDetails'] = self.customer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_location_details
        if self.service_location_details:
            _dict['serviceLocationDetails'] = self.service_location_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_details (list)
        _items = []
        if self.measurement_details:
            for _item_measurement_details in self.measurement_details:
                if _item_measurement_details:
                    _items.append(_item_measurement_details.to_dict())
            _dict['measurementDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of contract_details
        if self.contract_details:
            _dict['contractDetails'] = self.contract_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_signatures (list)
        _items = []
        if self.attachment_signatures:
            for _item_attachment_signatures in self.attachment_signatures:
                if _item_attachment_signatures:
                    _items.append(_item_attachment_signatures.to_dict())
            _dict['attachmentSignatures'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if customer_details (nullable) is None
        # and model_fields_set contains the field
        if self.customer_details is None and "customer_details" in self.model_fields_set:
            _dict['customerDetails'] = None

        # set to None if service_location_details (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_details is None and "service_location_details" in self.model_fields_set:
            _dict['serviceLocationDetails'] = None

        # set to None if measurement_details (nullable) is None
        # and model_fields_set contains the field
        if self.measurement_details is None and "measurement_details" in self.model_fields_set:
            _dict['measurementDetails'] = None

        # set to None if contract_details (nullable) is None
        # and model_fields_set contains the field
        if self.contract_details is None and "contract_details" in self.model_fields_set:
            _dict['contractDetails'] = None

        # set to None if move_request_type (nullable) is None
        # and model_fields_set contains the field
        if self.move_request_type is None and "move_request_type" in self.model_fields_set:
            _dict['moveRequestType'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if custom_message (nullable) is None
        # and model_fields_set contains the field
        if self.custom_message is None and "custom_message" in self.model_fields_set:
            _dict['customMessage'] = None

        # set to None if attachment_signatures (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_signatures is None and "attachment_signatures" in self.model_fields_set:
            _dict['attachmentSignatures'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MoveRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "externalId": obj.get("externalId"),
            "customerDetails": CustomerDetailsDTO.from_dict(obj["customerDetails"]) if obj.get("customerDetails") is not None else None,
            "serviceLocationDetails": ServiceLocationDetailsDTO.from_dict(obj["serviceLocationDetails"]) if obj.get("serviceLocationDetails") is not None else None,
            "measurementDetails": [MeasurementDetailsDTO.from_dict(_item) for _item in obj["measurementDetails"]] if obj.get("measurementDetails") is not None else None,
            "contractDetails": ContractDetailsDTO.from_dict(obj["contractDetails"]) if obj.get("contractDetails") is not None else None,
            "moveRequestType": obj.get("moveRequestType"),
            "status": obj.get("status"),
            "mutationDateTime": obj.get("mutationDateTime"),
            "customMessage": obj.get("customMessage"),
            "attachmentSignatures": [AttachmentSignature.from_dict(_item) for _item in obj["attachmentSignatures"]] if obj.get("attachmentSignatures") is not None else None,
            "hasAnyErrors": obj.get("hasAnyErrors")
        })
        return _obj


