# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.communication_configuration_dto import CommunicationConfigurationDTO
from masterdata_client.models.custom_entity_property_dto import CustomEntityPropertyDTO
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.management_relation_dto import ManagementRelationDTO
from masterdata_client.models.property_group_type import PropertyGroupType
from typing import Optional, Set
from typing_extensions import Self

class PropertyGroupDTO(BaseModel):
    """
    PropertyGroupDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    name: Optional[StrictStr] = None
    address: Optional[AddressDTO] = None
    default_management_relations: Optional[List[ManagementRelationDTO]] = Field(default=None, alias="defaultManagementRelations")
    service_location_ids: Optional[List[StrictStr]] = Field(default=None, alias="serviceLocationIds")
    type: Optional[PropertyGroupType] = None
    cost_allocation_enabled: Optional[StrictBool] = Field(default=None, alias="costAllocationEnabled")
    communication_configuration: Optional[CommunicationConfigurationDTO] = Field(default=None, alias="communicationConfiguration")
    custom_properties: Optional[List[CustomEntityPropertyDTO]] = Field(default=None, alias="customProperties")
    deleted: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "name", "address", "defaultManagementRelations", "serviceLocationIds", "type", "costAllocationEnabled", "communicationConfiguration", "customProperties", "deleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyGroupDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in default_management_relations (list)
        _items = []
        if self.default_management_relations:
            for _item_default_management_relations in self.default_management_relations:
                if _item_default_management_relations:
                    _items.append(_item_default_management_relations.to_dict())
            _dict['defaultManagementRelations'] = _items
        # override the default output from pydantic by calling `to_dict()` of communication_configuration
        if self.communication_configuration:
            _dict['communicationConfiguration'] = self.communication_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if default_management_relations (nullable) is None
        # and model_fields_set contains the field
        if self.default_management_relations is None and "default_management_relations" in self.model_fields_set:
            _dict['defaultManagementRelations'] = None

        # set to None if service_location_ids (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_ids is None and "service_location_ids" in self.model_fields_set:
            _dict['serviceLocationIds'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if communication_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.communication_configuration is None and "communication_configuration" in self.model_fields_set:
            _dict['communicationConfiguration'] = None

        # set to None if custom_properties (nullable) is None
        # and model_fields_set contains the field
        if self.custom_properties is None and "custom_properties" in self.model_fields_set:
            _dict['customProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyGroupDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "name": obj.get("name"),
            "address": AddressDTO.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "defaultManagementRelations": [ManagementRelationDTO.from_dict(_item) for _item in obj["defaultManagementRelations"]] if obj.get("defaultManagementRelations") is not None else None,
            "serviceLocationIds": obj.get("serviceLocationIds"),
            "type": obj.get("type"),
            "costAllocationEnabled": obj.get("costAllocationEnabled"),
            "communicationConfiguration": CommunicationConfigurationDTO.from_dict(obj["communicationConfiguration"]) if obj.get("communicationConfiguration") is not None else None,
            "customProperties": [CustomEntityPropertyDTO.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None,
            "deleted": obj.get("deleted")
        })
        return _obj


