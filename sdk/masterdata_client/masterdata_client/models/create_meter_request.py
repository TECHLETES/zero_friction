# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.create_meter_parent_relation_request import CreateMeterParentRelationRequest
from masterdata_client.models.external_channel_request import ExternalChannelRequest
from masterdata_client.models.meter_reading_frequency import MeterReadingFrequency
from masterdata_client.models.meter_type import MeterType
from typing import Optional, Set
from typing_extensions import Self

class CreateMeterRequest(BaseModel):
    """
    CreateMeterRequest
    """ # noqa: E501
    serial_number: Optional[StrictStr] = Field(default=None, alias="serialNumber")
    meter_type: Optional[MeterType] = Field(default=None, alias="meterType")
    meter_tag: Optional[StrictStr] = Field(default=None, alias="meterTag")
    model_id: Optional[StrictStr] = Field(default=None, alias="modelId")
    mutation_date_time: Optional[datetime] = Field(default=None, alias="mutationDateTime")
    channels: Optional[List[ExternalChannelRequest]] = None
    reading_frequency: Optional[MeterReadingFrequency] = Field(default=None, alias="readingFrequency")
    next_expected_reading_date: Optional[datetime] = Field(default=None, alias="nextExpectedReadingDate")
    properties: Optional[Dict[str, Any]] = None
    parent_relation: Optional[CreateMeterParentRelationRequest] = Field(default=None, alias="parentRelation")
    __properties: ClassVar[List[str]] = ["serialNumber", "meterType", "meterTag", "modelId", "mutationDateTime", "channels", "readingFrequency", "nextExpectedReadingDate", "properties", "parentRelation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateMeterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in channels (list)
        _items = []
        if self.channels:
            for _item_channels in self.channels:
                if _item_channels:
                    _items.append(_item_channels.to_dict())
            _dict['channels'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_relation
        if self.parent_relation:
            _dict['parentRelation'] = self.parent_relation.to_dict()
        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if meter_type (nullable) is None
        # and model_fields_set contains the field
        if self.meter_type is None and "meter_type" in self.model_fields_set:
            _dict['meterType'] = None

        # set to None if meter_tag (nullable) is None
        # and model_fields_set contains the field
        if self.meter_tag is None and "meter_tag" in self.model_fields_set:
            _dict['meterTag'] = None

        # set to None if model_id (nullable) is None
        # and model_fields_set contains the field
        if self.model_id is None and "model_id" in self.model_fields_set:
            _dict['modelId'] = None

        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['channels'] = None

        # set to None if reading_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.reading_frequency is None and "reading_frequency" in self.model_fields_set:
            _dict['readingFrequency'] = None

        # set to None if next_expected_reading_date (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_reading_date is None and "next_expected_reading_date" in self.model_fields_set:
            _dict['nextExpectedReadingDate'] = None

        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict['properties'] = None

        # set to None if parent_relation (nullable) is None
        # and model_fields_set contains the field
        if self.parent_relation is None and "parent_relation" in self.model_fields_set:
            _dict['parentRelation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateMeterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serialNumber": obj.get("serialNumber"),
            "meterType": obj.get("meterType"),
            "meterTag": obj.get("meterTag"),
            "modelId": obj.get("modelId"),
            "mutationDateTime": obj.get("mutationDateTime"),
            "channels": [ExternalChannelRequest.from_dict(_item) for _item in obj["channels"]] if obj.get("channels") is not None else None,
            "readingFrequency": obj.get("readingFrequency"),
            "nextExpectedReadingDate": obj.get("nextExpectedReadingDate"),
            "properties": obj.get("properties"),
            "parentRelation": CreateMeterParentRelationRequest.from_dict(obj["parentRelation"]) if obj.get("parentRelation") is not None else None
        })
        return _obj


