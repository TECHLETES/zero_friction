# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.attachment_signature import AttachmentSignature
from masterdata_client.models.billing_details_dto import BillingDetailsDTO
from masterdata_client.models.contract_service_location_dto import ContractServiceLocationDTO
from masterdata_client.models.contract_status import ContractStatus
from masterdata_client.models.contract_status_history_dto import ContractStatusHistoryDTO
from masterdata_client.models.contractor_dto import ContractorDTO
from masterdata_client.models.custom_entity_property_dto import CustomEntityPropertyDTO
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class ContractDTO(BaseModel):
    """
    ContractDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    contract_number: Optional[StrictStr] = Field(default=None, alias="contractNumber")
    contractor: Optional[ContractorDTO] = None
    supply_start_date: Optional[datetime] = Field(default=None, alias="supplyStartDate")
    supply_end_date: Optional[datetime] = Field(default=None, alias="supplyEndDate")
    service_locations: Optional[List[ContractServiceLocationDTO]] = Field(default=None, alias="serviceLocations")
    status_history: Optional[List[ContractStatusHistoryDTO]] = Field(default=None, alias="statusHistory")
    current_contract_status: Optional[ContractStatus] = Field(default=None, alias="currentContractStatus")
    billing_details: Optional[BillingDetailsDTO] = Field(default=None, alias="billingDetails")
    external_contract_reference: Optional[StrictStr] = Field(default=None, alias="externalContractReference")
    payment_terms_id: Optional[StrictStr] = Field(default=None, alias="paymentTermsId")
    blocked_for_deletion: Optional[StrictBool] = Field(default=None, alias="blockedForDeletion")
    expect_advances_to_be_imported_periodically: Optional[StrictBool] = Field(default=None, alias="expectAdvancesToBeImportedPeriodically")
    use_property_group_product: Optional[StrictBool] = Field(default=None, alias="usePropertyGroupProduct")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, alias="propertyGroups")
    attachment_signatures: Optional[List[AttachmentSignature]] = Field(default=None, alias="attachmentSignatures")
    custom_properties: Optional[List[CustomEntityPropertyDTO]] = Field(default=None, alias="customProperties")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "contractNumber", "contractor", "supplyStartDate", "supplyEndDate", "serviceLocations", "statusHistory", "currentContractStatus", "billingDetails", "externalContractReference", "paymentTermsId", "blockedForDeletion", "expectAdvancesToBeImportedPeriodically", "usePropertyGroupProduct", "propertyGroups", "attachmentSignatures", "customProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contractor
        if self.contractor:
            _dict['contractor'] = self.contractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_locations (list)
        _items = []
        if self.service_locations:
            for _item_service_locations in self.service_locations:
                if _item_service_locations:
                    _items.append(_item_service_locations.to_dict())
            _dict['serviceLocations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in status_history (list)
        _items = []
        if self.status_history:
            for _item_status_history in self.status_history:
                if _item_status_history:
                    _items.append(_item_status_history.to_dict())
            _dict['statusHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_details
        if self.billing_details:
            _dict['billingDetails'] = self.billing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_signatures (list)
        _items = []
        if self.attachment_signatures:
            for _item_attachment_signatures in self.attachment_signatures:
                if _item_attachment_signatures:
                    _items.append(_item_attachment_signatures.to_dict())
            _dict['attachmentSignatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if contractor (nullable) is None
        # and model_fields_set contains the field
        if self.contractor is None and "contractor" in self.model_fields_set:
            _dict['contractor'] = None

        # set to None if service_locations (nullable) is None
        # and model_fields_set contains the field
        if self.service_locations is None and "service_locations" in self.model_fields_set:
            _dict['serviceLocations'] = None

        # set to None if status_history (nullable) is None
        # and model_fields_set contains the field
        if self.status_history is None and "status_history" in self.model_fields_set:
            _dict['statusHistory'] = None

        # set to None if current_contract_status (nullable) is None
        # and model_fields_set contains the field
        if self.current_contract_status is None and "current_contract_status" in self.model_fields_set:
            _dict['currentContractStatus'] = None

        # set to None if billing_details (nullable) is None
        # and model_fields_set contains the field
        if self.billing_details is None and "billing_details" in self.model_fields_set:
            _dict['billingDetails'] = None

        # set to None if external_contract_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_contract_reference is None and "external_contract_reference" in self.model_fields_set:
            _dict['externalContractReference'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if attachment_signatures (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_signatures is None and "attachment_signatures" in self.model_fields_set:
            _dict['attachmentSignatures'] = None

        # set to None if custom_properties (nullable) is None
        # and model_fields_set contains the field
        if self.custom_properties is None and "custom_properties" in self.model_fields_set:
            _dict['customProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "contractNumber": obj.get("contractNumber"),
            "contractor": ContractorDTO.from_dict(obj["contractor"]) if obj.get("contractor") is not None else None,
            "supplyStartDate": obj.get("supplyStartDate"),
            "supplyEndDate": obj.get("supplyEndDate"),
            "serviceLocations": [ContractServiceLocationDTO.from_dict(_item) for _item in obj["serviceLocations"]] if obj.get("serviceLocations") is not None else None,
            "statusHistory": [ContractStatusHistoryDTO.from_dict(_item) for _item in obj["statusHistory"]] if obj.get("statusHistory") is not None else None,
            "currentContractStatus": obj.get("currentContractStatus"),
            "billingDetails": BillingDetailsDTO.from_dict(obj["billingDetails"]) if obj.get("billingDetails") is not None else None,
            "externalContractReference": obj.get("externalContractReference"),
            "paymentTermsId": obj.get("paymentTermsId"),
            "blockedForDeletion": obj.get("blockedForDeletion"),
            "expectAdvancesToBeImportedPeriodically": obj.get("expectAdvancesToBeImportedPeriodically"),
            "usePropertyGroupProduct": obj.get("usePropertyGroupProduct"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "attachmentSignatures": [AttachmentSignature.from_dict(_item) for _item in obj["attachmentSignatures"]] if obj.get("attachmentSignatures") is not None else None,
            "customProperties": [CustomEntityPropertyDTO.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None
        })
        return _obj


