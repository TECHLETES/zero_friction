# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.annual_statement_reference import AnnualStatementReference
from masterdata_client.models.bank_account_dto import BankAccountDTO
from masterdata_client.models.contact_entry_dto import ContactEntryDTO
from masterdata_client.models.country_code import CountryCode
from masterdata_client.models.custom_entity_property_dto import CustomEntityPropertyDTO
from masterdata_client.models.customer_billing_settings_dto import CustomerBillingSettingsDTO
from masterdata_client.models.customer_communication_preferences_dto import CustomerCommunicationPreferencesDTO
from masterdata_client.models.customer_contract_dto import CustomerContractDTO
from masterdata_client.models.customer_group_reference_dto import CustomerGroupReferenceDTO
from masterdata_client.models.customer_portal_properties_dto import CustomerPortalPropertiesDTO
from masterdata_client.models.customer_type import CustomerType
from masterdata_client.models.entity_subject_type import EntitySubjectType
from masterdata_client.models.payment_method import PaymentMethod
from masterdata_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class CustomerDTO(BaseModel):
    """
    Represents a customer entity with all associated information
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    account_number: Optional[StrictStr] = Field(default=None, description="Unique account number assigned to the customer", alias="accountNumber")
    salutation: Optional[StrictStr] = Field(default=None, description="Customer's salutation (e.g., Mr., Mrs., Dr.)")
    initials: Optional[StrictStr] = Field(default=None, description="Customer's initials")
    first_name: Optional[StrictStr] = Field(default=None, description="Customer's first name", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Customer's last name", alias="lastName")
    birth_date: Optional[datetime] = Field(default=None, description="Customer's date of birth", alias="birthDate")
    ssin: Optional[StrictStr] = Field(default=None, description="Social Security Identification Number")
    ssin_country: Optional[CountryCode] = Field(default=None, description="Country code associated with the SSIN", alias="ssinCountry")
    short_display_name: Optional[StrictStr] = Field(default=None, description="Short display name for the customer", alias="shortDisplayName")
    customer_type: Optional[CustomerType] = Field(default=None, description="Type of customer (e.g., Individual, Business)", alias="customerType")
    company_name: Optional[StrictStr] = Field(default=None, description="Company name for business customers", alias="companyName")
    organization_number: Optional[StrictStr] = Field(default=None, description="Organization registration number", alias="organizationNumber")
    vat_number: Optional[StrictStr] = Field(default=None, description="Value Added Tax registration number", alias="vatNumber")
    payment_terms_id: Optional[StrictStr] = Field(default=None, description="Identifier for payment terms", alias="paymentTermsId")
    default_payment_method: Optional[PaymentMethod] = Field(default=None, description="Default payment method for the customer", alias="defaultPaymentMethod")
    invoice_address: Optional[AddressDTO] = Field(default=None, description="Address for invoice delivery", alias="invoiceAddress")
    bank_account_ibans: Optional[List[BankAccountDTO]] = Field(default=None, description="List of bank account IBANs associated with the customer", alias="bankAccountIbans")
    contact_details: Optional[List[ContactEntryDTO]] = Field(default=None, description="Collection of contact details for the customer", alias="contactDetails")
    contracts: Optional[List[CustomerContractDTO]] = Field(default=None, description="Collection of contracts associated with the customer")
    communication_preferences: Optional[CustomerCommunicationPreferencesDTO] = Field(default=None, description="Customer's communication preferences", alias="communicationPreferences")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with the customer", alias="propertyGroups")
    customer_group: Optional[CustomerGroupReferenceDTO] = Field(default=None, description="Customer group reference", alias="customerGroup")
    billing_settings: Optional[CustomerBillingSettingsDTO] = Field(default=None, description="Customer's billing settings", alias="billingSettings")
    custom_properties: Optional[List[CustomEntityPropertyDTO]] = Field(default=None, description="List of custom properties associated with the customer", alias="customProperties")
    activation_code: Optional[StrictStr] = Field(default=None, description="Activation code for customer portal access", alias="activationCode")
    portal_properties: Optional[CustomerPortalPropertiesDTO] = Field(default=None, description="Portal-specific properties for the customer", alias="portalProperties")
    generated_annual_statements: Optional[List[AnnualStatementReference]] = Field(default=None, description="List of generated annual statements for the customer", alias="generatedAnnualStatements")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "accountNumber", "salutation", "initials", "firstName", "lastName", "birthDate", "ssin", "ssinCountry", "shortDisplayName", "customerType", "companyName", "organizationNumber", "vatNumber", "paymentTermsId", "defaultPaymentMethod", "invoiceAddress", "bankAccountIbans", "contactDetails", "contracts", "communicationPreferences", "propertyGroups", "customerGroup", "billingSettings", "customProperties", "activationCode", "portalProperties", "generatedAnnualStatements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoice_address
        if self.invoice_address:
            _dict['invoiceAddress'] = self.invoice_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bank_account_ibans (list)
        _items = []
        if self.bank_account_ibans:
            for _item_bank_account_ibans in self.bank_account_ibans:
                if _item_bank_account_ibans:
                    _items.append(_item_bank_account_ibans.to_dict())
            _dict['bankAccountIbans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contact_details (list)
        _items = []
        if self.contact_details:
            for _item_contact_details in self.contact_details:
                if _item_contact_details:
                    _items.append(_item_contact_details.to_dict())
            _dict['contactDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contracts (list)
        _items = []
        if self.contracts:
            for _item_contracts in self.contracts:
                if _item_contracts:
                    _items.append(_item_contracts.to_dict())
            _dict['contracts'] = _items
        # override the default output from pydantic by calling `to_dict()` of communication_preferences
        if self.communication_preferences:
            _dict['communicationPreferences'] = self.communication_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer_group
        if self.customer_group:
            _dict['customerGroup'] = self.customer_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_settings
        if self.billing_settings:
            _dict['billingSettings'] = self.billing_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of portal_properties
        if self.portal_properties:
            _dict['portalProperties'] = self.portal_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in generated_annual_statements (list)
        _items = []
        if self.generated_annual_statements:
            for _item_generated_annual_statements in self.generated_annual_statements:
                if _item_generated_annual_statements:
                    _items.append(_item_generated_annual_statements.to_dict())
            _dict['generatedAnnualStatements'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if salutation (nullable) is None
        # and model_fields_set contains the field
        if self.salutation is None and "salutation" in self.model_fields_set:
            _dict['salutation'] = None

        # set to None if initials (nullable) is None
        # and model_fields_set contains the field
        if self.initials is None and "initials" in self.model_fields_set:
            _dict['initials'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if ssin (nullable) is None
        # and model_fields_set contains the field
        if self.ssin is None and "ssin" in self.model_fields_set:
            _dict['ssin'] = None

        # set to None if ssin_country (nullable) is None
        # and model_fields_set contains the field
        if self.ssin_country is None and "ssin_country" in self.model_fields_set:
            _dict['ssinCountry'] = None

        # set to None if short_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_display_name is None and "short_display_name" in self.model_fields_set:
            _dict['shortDisplayName'] = None

        # set to None if customer_type (nullable) is None
        # and model_fields_set contains the field
        if self.customer_type is None and "customer_type" in self.model_fields_set:
            _dict['customerType'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if organization_number (nullable) is None
        # and model_fields_set contains the field
        if self.organization_number is None and "organization_number" in self.model_fields_set:
            _dict['organizationNumber'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if default_payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.default_payment_method is None and "default_payment_method" in self.model_fields_set:
            _dict['defaultPaymentMethod'] = None

        # set to None if invoice_address (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_address is None and "invoice_address" in self.model_fields_set:
            _dict['invoiceAddress'] = None

        # set to None if bank_account_ibans (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account_ibans is None and "bank_account_ibans" in self.model_fields_set:
            _dict['bankAccountIbans'] = None

        # set to None if contact_details (nullable) is None
        # and model_fields_set contains the field
        if self.contact_details is None and "contact_details" in self.model_fields_set:
            _dict['contactDetails'] = None

        # set to None if contracts (nullable) is None
        # and model_fields_set contains the field
        if self.contracts is None and "contracts" in self.model_fields_set:
            _dict['contracts'] = None

        # set to None if communication_preferences (nullable) is None
        # and model_fields_set contains the field
        if self.communication_preferences is None and "communication_preferences" in self.model_fields_set:
            _dict['communicationPreferences'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if customer_group (nullable) is None
        # and model_fields_set contains the field
        if self.customer_group is None and "customer_group" in self.model_fields_set:
            _dict['customerGroup'] = None

        # set to None if billing_settings (nullable) is None
        # and model_fields_set contains the field
        if self.billing_settings is None and "billing_settings" in self.model_fields_set:
            _dict['billingSettings'] = None

        # set to None if custom_properties (nullable) is None
        # and model_fields_set contains the field
        if self.custom_properties is None and "custom_properties" in self.model_fields_set:
            _dict['customProperties'] = None

        # set to None if activation_code (nullable) is None
        # and model_fields_set contains the field
        if self.activation_code is None and "activation_code" in self.model_fields_set:
            _dict['activationCode'] = None

        # set to None if portal_properties (nullable) is None
        # and model_fields_set contains the field
        if self.portal_properties is None and "portal_properties" in self.model_fields_set:
            _dict['portalProperties'] = None

        # set to None if generated_annual_statements (nullable) is None
        # and model_fields_set contains the field
        if self.generated_annual_statements is None and "generated_annual_statements" in self.model_fields_set:
            _dict['generatedAnnualStatements'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "accountNumber": obj.get("accountNumber"),
            "salutation": obj.get("salutation"),
            "initials": obj.get("initials"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "birthDate": obj.get("birthDate"),
            "ssin": obj.get("ssin"),
            "ssinCountry": obj.get("ssinCountry"),
            "shortDisplayName": obj.get("shortDisplayName"),
            "customerType": obj.get("customerType"),
            "companyName": obj.get("companyName"),
            "organizationNumber": obj.get("organizationNumber"),
            "vatNumber": obj.get("vatNumber"),
            "paymentTermsId": obj.get("paymentTermsId"),
            "defaultPaymentMethod": obj.get("defaultPaymentMethod"),
            "invoiceAddress": AddressDTO.from_dict(obj["invoiceAddress"]) if obj.get("invoiceAddress") is not None else None,
            "bankAccountIbans": [BankAccountDTO.from_dict(_item) for _item in obj["bankAccountIbans"]] if obj.get("bankAccountIbans") is not None else None,
            "contactDetails": [ContactEntryDTO.from_dict(_item) for _item in obj["contactDetails"]] if obj.get("contactDetails") is not None else None,
            "contracts": [CustomerContractDTO.from_dict(_item) for _item in obj["contracts"]] if obj.get("contracts") is not None else None,
            "communicationPreferences": CustomerCommunicationPreferencesDTO.from_dict(obj["communicationPreferences"]) if obj.get("communicationPreferences") is not None else None,
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "customerGroup": CustomerGroupReferenceDTO.from_dict(obj["customerGroup"]) if obj.get("customerGroup") is not None else None,
            "billingSettings": CustomerBillingSettingsDTO.from_dict(obj["billingSettings"]) if obj.get("billingSettings") is not None else None,
            "customProperties": [CustomEntityPropertyDTO.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None,
            "activationCode": obj.get("activationCode"),
            "portalProperties": CustomerPortalPropertiesDTO.from_dict(obj["portalProperties"]) if obj.get("portalProperties") is not None else None,
            "generatedAnnualStatements": [AnnualStatementReference.from_dict(_item) for _item in obj["generatedAnnualStatements"]] if obj.get("generatedAnnualStatements") is not None else None
        })
        return _obj


