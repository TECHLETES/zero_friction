# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.calendar_algorithm_type import CalendarAlgorithmType
from typing import Optional, Set
from typing_extensions import Self

class Calendar(BaseModel):
    """
    Calendar
    """ # noqa: E501
    min_supported_date_time: Optional[datetime] = Field(default=None, alias="minSupportedDateTime")
    max_supported_date_time: Optional[datetime] = Field(default=None, alias="maxSupportedDateTime")
    algorithm_type: Optional[CalendarAlgorithmType] = Field(default=None, alias="algorithmType")
    is_read_only: Optional[StrictBool] = Field(default=None, alias="isReadOnly")
    eras: Optional[List[StrictInt]] = None
    two_digit_year_max: Optional[StrictInt] = Field(default=None, alias="twoDigitYearMax")
    __properties: ClassVar[List[str]] = ["minSupportedDateTime", "maxSupportedDateTime", "algorithmType", "isReadOnly", "eras", "twoDigitYearMax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Calendar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "min_supported_date_time",
            "max_supported_date_time",
            "algorithm_type",
            "is_read_only",
            "eras",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if eras (nullable) is None
        # and model_fields_set contains the field
        if self.eras is None and "eras" in self.model_fields_set:
            _dict['eras'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Calendar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minSupportedDateTime": obj.get("minSupportedDateTime"),
            "maxSupportedDateTime": obj.get("maxSupportedDateTime"),
            "algorithmType": obj.get("algorithmType"),
            "isReadOnly": obj.get("isReadOnly"),
            "eras": obj.get("eras"),
            "twoDigitYearMax": obj.get("twoDigitYearMax")
        })
        return _obj


