# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetCustomersQueryParams(BaseModel):
    """
    GetCustomersQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    customer_type: Optional[StrictStr] = Field(default=None, alias="customerType")
    default_payment_method: Optional[StrictStr] = Field(default=None, alias="defaultPaymentMethod")
    property_group_ids: Optional[List[StrictStr]] = Field(default=None, alias="propertyGroupIds")
    exclude_property_group_id: Optional[StrictStr] = Field(default=None, alias="excludePropertyGroupId")
    customer_group_id: Optional[StrictStr] = Field(default=None, alias="customerGroupId")
    exclude_customer_group_id: Optional[StrictStr] = Field(default=None, alias="excludeCustomerGroupId")
    customer_group_name: Optional[StrictStr] = Field(default=None, alias="customerGroupName")
    name_contains: Optional[StrictStr] = Field(default=None, alias="nameContains")
    activation_code: Optional[StrictStr] = Field(default=None, alias="activationCode")
    priority_service_register_property_type_id: Optional[StrictStr] = Field(default=None, alias="priorityServiceRegisterPropertyTypeId")
    vulnerability_register_property_type_id: Optional[StrictStr] = Field(default=None, alias="vulnerabilityRegisterPropertyTypeId")
    priority_service_register_ids: Optional[List[StrictStr]] = Field(default=None, alias="priorityServiceRegisterIds")
    vulnerability_register_ids: Optional[List[StrictStr]] = Field(default=None, alias="vulnerabilityRegisterIds")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "customerType", "defaultPaymentMethod", "propertyGroupIds", "excludePropertyGroupId", "customerGroupId", "excludeCustomerGroupId", "customerGroupName", "nameContains", "activationCode", "priorityServiceRegisterPropertyTypeId", "vulnerabilityRegisterPropertyTypeId", "priorityServiceRegisterIds", "vulnerabilityRegisterIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCustomersQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if customer_type (nullable) is None
        # and model_fields_set contains the field
        if self.customer_type is None and "customer_type" in self.model_fields_set:
            _dict['customerType'] = None

        # set to None if default_payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.default_payment_method is None and "default_payment_method" in self.model_fields_set:
            _dict['defaultPaymentMethod'] = None

        # set to None if property_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_ids is None and "property_group_ids" in self.model_fields_set:
            _dict['propertyGroupIds'] = None

        # set to None if exclude_property_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_property_group_id is None and "exclude_property_group_id" in self.model_fields_set:
            _dict['excludePropertyGroupId'] = None

        # set to None if customer_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_group_id is None and "customer_group_id" in self.model_fields_set:
            _dict['customerGroupId'] = None

        # set to None if exclude_customer_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_customer_group_id is None and "exclude_customer_group_id" in self.model_fields_set:
            _dict['excludeCustomerGroupId'] = None

        # set to None if customer_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.customer_group_name is None and "customer_group_name" in self.model_fields_set:
            _dict['customerGroupName'] = None

        # set to None if name_contains (nullable) is None
        # and model_fields_set contains the field
        if self.name_contains is None and "name_contains" in self.model_fields_set:
            _dict['nameContains'] = None

        # set to None if activation_code (nullable) is None
        # and model_fields_set contains the field
        if self.activation_code is None and "activation_code" in self.model_fields_set:
            _dict['activationCode'] = None

        # set to None if priority_service_register_property_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.priority_service_register_property_type_id is None and "priority_service_register_property_type_id" in self.model_fields_set:
            _dict['priorityServiceRegisterPropertyTypeId'] = None

        # set to None if vulnerability_register_property_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.vulnerability_register_property_type_id is None and "vulnerability_register_property_type_id" in self.model_fields_set:
            _dict['vulnerabilityRegisterPropertyTypeId'] = None

        # set to None if priority_service_register_ids (nullable) is None
        # and model_fields_set contains the field
        if self.priority_service_register_ids is None and "priority_service_register_ids" in self.model_fields_set:
            _dict['priorityServiceRegisterIds'] = None

        # set to None if vulnerability_register_ids (nullable) is None
        # and model_fields_set contains the field
        if self.vulnerability_register_ids is None and "vulnerability_register_ids" in self.model_fields_set:
            _dict['vulnerabilityRegisterIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCustomersQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "customerType": obj.get("customerType"),
            "defaultPaymentMethod": obj.get("defaultPaymentMethod"),
            "propertyGroupIds": obj.get("propertyGroupIds"),
            "excludePropertyGroupId": obj.get("excludePropertyGroupId"),
            "customerGroupId": obj.get("customerGroupId"),
            "excludeCustomerGroupId": obj.get("excludeCustomerGroupId"),
            "customerGroupName": obj.get("customerGroupName"),
            "nameContains": obj.get("nameContains"),
            "activationCode": obj.get("activationCode"),
            "priorityServiceRegisterPropertyTypeId": obj.get("priorityServiceRegisterPropertyTypeId"),
            "vulnerabilityRegisterPropertyTypeId": obj.get("vulnerabilityRegisterPropertyTypeId"),
            "priorityServiceRegisterIds": obj.get("priorityServiceRegisterIds"),
            "vulnerabilityRegisterIds": obj.get("vulnerabilityRegisterIds")
        })
        return _obj


