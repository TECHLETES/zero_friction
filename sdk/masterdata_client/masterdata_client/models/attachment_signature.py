# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.entity_attachment_origin import EntityAttachmentOrigin
from masterdata_client.models.error_code import ErrorCode
from typing import Optional, Set
from typing_extensions import Self

class AttachmentSignature(BaseModel):
    """
    AttachmentSignature
    """ # noqa: E501
    culture: Optional[str] = None
    attachment_file_name: Optional[StrictStr] = Field(default=None, alias="attachmentFileName")
    error_code: Optional[ErrorCode] = Field(default=None, alias="errorCode")
    origin: Optional[EntityAttachmentOrigin] = None
    product_attachment_id: Optional[StrictStr] = Field(default=None, alias="productAttachmentId")
    attachment_file_id: Optional[StrictStr] = Field(default=None, alias="attachmentFileId")
    entity_attachment_group_id: Optional[StrictStr] = Field(default=None, alias="entityAttachmentGroupId")
    sign_date: Optional[datetime] = Field(default=None, alias="signDate")
    viewed_date: Optional[datetime] = Field(default=None, alias="viewedDate")
    __properties: ClassVar[List[str]] = ["culture", "attachmentFileName", "errorCode", "origin", "productAttachmentId", "attachmentFileId", "entityAttachmentGroupId", "signDate", "viewedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachmentSignature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if attachment_file_name (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_file_name is None and "attachment_file_name" in self.model_fields_set:
            _dict['attachmentFileName'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['errorCode'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if product_attachment_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_attachment_id is None and "product_attachment_id" in self.model_fields_set:
            _dict['productAttachmentId'] = None

        # set to None if attachment_file_id (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_file_id is None and "attachment_file_id" in self.model_fields_set:
            _dict['attachmentFileId'] = None

        # set to None if entity_attachment_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_attachment_group_id is None and "entity_attachment_group_id" in self.model_fields_set:
            _dict['entityAttachmentGroupId'] = None

        # set to None if sign_date (nullable) is None
        # and model_fields_set contains the field
        if self.sign_date is None and "sign_date" in self.model_fields_set:
            _dict['signDate'] = None

        # set to None if viewed_date (nullable) is None
        # and model_fields_set contains the field
        if self.viewed_date is None and "viewed_date" in self.model_fields_set:
            _dict['viewedDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachmentSignature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "culture": obj.get("culture"),
            "attachmentFileName": obj.get("attachmentFileName"),
            "errorCode": obj.get("errorCode"),
            "origin": obj.get("origin"),
            "productAttachmentId": obj.get("productAttachmentId"),
            "attachmentFileId": obj.get("attachmentFileId"),
            "entityAttachmentGroupId": obj.get("entityAttachmentGroupId"),
            "signDate": obj.get("signDate"),
            "viewedDate": obj.get("viewedDate")
        })
        return _obj


