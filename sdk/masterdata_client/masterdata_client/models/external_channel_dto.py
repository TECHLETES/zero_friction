# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from masterdata_client.models.data_frequency import DataFrequency
from masterdata_client.models.direction import Direction
from masterdata_client.models.incrementation_type import IncrementationType
from masterdata_client.models.metering_issue_reference import MeteringIssueReference
from masterdata_client.models.metering_type import MeteringType
from masterdata_client.models.unit_of_measure import UnitOfMeasure
from masterdata_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class ExternalChannelDTO(BaseModel):
    """
    ExternalChannelDTO
    """ # noqa: E501
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    data_frequency: Optional[DataFrequency] = Field(default=None, alias="dataFrequency")
    incrementation_type: Optional[IncrementationType] = Field(default=None, alias="incrementationType")
    metering_type: Optional[MeteringType] = Field(default=None, alias="meteringType")
    utility_type: Optional[UtilityType] = Field(default=None, alias="utilityType")
    direction: Optional[Direction] = None
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="unitOfMeasure")
    time_of_use: Optional[StrictStr] = Field(default=None, alias="timeOfUse")
    description: Optional[StrictStr] = None
    external_identifier: Optional[StrictStr] = Field(default=None, alias="externalIdentifier")
    last_time_received_data: Optional[datetime] = Field(default=None, alias="lastTimeReceivedData")
    measurements_until: Optional[datetime] = Field(default=None, alias="measurementsUntil")
    relation_external_reference: Optional[StrictStr] = Field(default=None, alias="relationExternalReference")
    issues_count: Optional[StrictInt] = Field(default=None, alias="issuesCount")
    has_issue: Optional[StrictBool] = Field(default=None, alias="hasIssue")
    issues: Optional[List[MeteringIssueReference]] = None
    built_in: Optional[StrictBool] = Field(default=None, alias="builtIn")
    hidden: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["startDateTime", "endDateTime", "dataFrequency", "incrementationType", "meteringType", "utilityType", "direction", "unitOfMeasure", "timeOfUse", "description", "externalIdentifier", "lastTimeReceivedData", "measurementsUntil", "relationExternalReference", "issuesCount", "hasIssue", "issues", "builtIn", "hidden"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalChannelDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_issue",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item_issues in self.issues:
                if _item_issues:
                    _items.append(_item_issues.to_dict())
            _dict['issues'] = _items
        # set to None if data_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.data_frequency is None and "data_frequency" in self.model_fields_set:
            _dict['dataFrequency'] = None

        # set to None if incrementation_type (nullable) is None
        # and model_fields_set contains the field
        if self.incrementation_type is None and "incrementation_type" in self.model_fields_set:
            _dict['incrementationType'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if external_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_identifier is None and "external_identifier" in self.model_fields_set:
            _dict['externalIdentifier'] = None

        # set to None if last_time_received_data (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_received_data is None and "last_time_received_data" in self.model_fields_set:
            _dict['lastTimeReceivedData'] = None

        # set to None if measurements_until (nullable) is None
        # and model_fields_set contains the field
        if self.measurements_until is None and "measurements_until" in self.model_fields_set:
            _dict['measurementsUntil'] = None

        # set to None if relation_external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.relation_external_reference is None and "relation_external_reference" in self.model_fields_set:
            _dict['relationExternalReference'] = None

        # set to None if issues (nullable) is None
        # and model_fields_set contains the field
        if self.issues is None and "issues" in self.model_fields_set:
            _dict['issues'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalChannelDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "dataFrequency": obj.get("dataFrequency"),
            "incrementationType": obj.get("incrementationType"),
            "meteringType": obj.get("meteringType"),
            "utilityType": obj.get("utilityType"),
            "direction": obj.get("direction"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "timeOfUse": obj.get("timeOfUse"),
            "description": obj.get("description"),
            "externalIdentifier": obj.get("externalIdentifier"),
            "lastTimeReceivedData": obj.get("lastTimeReceivedData"),
            "measurementsUntil": obj.get("measurementsUntil"),
            "relationExternalReference": obj.get("relationExternalReference"),
            "issuesCount": obj.get("issuesCount"),
            "hasIssue": obj.get("hasIssue"),
            "issues": [MeteringIssueReference.from_dict(_item) for _item in obj["issues"]] if obj.get("issues") is not None else None,
            "builtIn": obj.get("builtIn"),
            "hidden": obj.get("hidden")
        })
        return _obj


