# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class EntitySubjectType(str, Enum):
    """
    EntitySubjectType
    """

    """
    allowed enum values
    """
    NONE = 'none'
    CUSTOMER = 'customer'
    CONTRACT = 'contract'
    METER = 'meter'
    SERVICELOCATION = 'servicelocation'
    INVOICE = 'invoice'
    IMPORTJOB = 'importjob'
    PROPERTYGROUP = 'propertygroup'
    PAYMENT = 'payment'
    COMMUNICATIONENTRY = 'communicationentry'
    EXPORTJOB = 'exportjob'
    DATAEXPORT = 'dataexport'
    DATAIMPORT = 'dataimport'
    ENTITYATTRIBUTE = 'entityattribute'
    ASSET = 'asset'
    BANKACCOUNT = 'bankaccount'
    BILLINGITEM = 'billingitem'
    BILLINGTARIFF = 'billingtariff'
    COSTCOMPONENT = 'costcomponent'
    COSTCOMPONENTVALUE = 'costcomponentvalue'
    MODEL = 'model'
    NUMBERSEQUENCE = 'numbersequence'
    BILLINGPARAMETERS = 'billingparameters'
    PRODUCT = 'product'
    TAXCODE = 'taxcode'
    TEMPLATE = 'template'
    BILLINGRELATION = 'billingrelation'
    TRANSACTION = 'transaction'
    DATAIMPORTFILEFORMAT = 'dataimportfileformat'
    DATAEXPORTFILEFORMAT = 'dataexportfileformat'
    TENANT = 'tenant'
    CONSUMPTION = 'consumption'
    ATTACHMENT = 'attachment'
    EXPORTJOBLINE = 'exportjobline'
    CULTURETABLE = 'culturetable'
    COLLECTIONCASE = 'collectioncase'
    COLLECTIONFLOWSTEP = 'collectionflowstep'
    CONSUMPTIONUNITTYPE = 'consumptionunittype'
    INCOMINGINVOICE = 'incominginvoice'
    MOVEREQUEST = 'moverequest'
    ACTIVITYENTRY = 'activityentry'
    COMMENTENTRY = 'commententry'
    PROBLEM = 'problem'
    RELATEDENTITY = 'relatedentity'
    CUSTOMERAGINGREPORT = 'customeragingreport'
    BILLINGCOMPLETENESS = 'billingcompleteness'
    PROPERTYGROUPBILLINGCONFIGURATION = 'propertygroupbillingconfiguration'
    PROPERTYGROUPBILLINGPERIOD = 'propertygroupbillingperiod'
    COLLECTIONFLOW = 'collectionflow'
    CONFIGUREDPLUGIN = 'configuredplugin'
    ORGANIZATIONSCENARIOS = 'organizationscenarios'
    PAYMENTTERMS = 'paymentterms'
    PAYMENTDELAYSETTING = 'paymentdelaysetting'
    PAYMENTPARAMETERS = 'paymentparameters'
    DOMAINAUTHENTICATIONPARAMETERS = 'domainauthenticationparameters'
    COMMUNICATIONPARAMETERS = 'communicationparameters'
    ORGANIZATION = 'organization'
    INCOMINGINVOICECOMPONENT = 'incominginvoicecomponent'
    COSTALLOCATIONCOMPONENT = 'costallocationcomponent'
    SCHEDULEDATTEMPT = 'scheduledattempt'
    PLUGINTRIGGER = 'plugintrigger'
    EXPORTENTITYCONTAINER = 'exportentitycontainer'
    EXTERNALBANKSTATEMENT = 'externalbankstatement'
    EXTERNALBANKTRANSACTION = 'externalbanktransaction'
    EXTERNALMEASUREMENT = 'externalmeasurement'
    IMPORTJOBENTITYISSUE = 'importjobentityissue'
    INTERMEDIATEEXPORTFORMAT = 'intermediateexportformat'
    CONSUMPTIONUNIT = 'consumptionunit'
    CALCULATEDCONSUMPTION = 'calculatedconsumption'
    PROPERTYGROUPMETERINGCONFIGURATION = 'propertygroupmeteringconfiguration'
    MEASUREMENT = 'measurement'
    EXTERNALCHANNEL = 'externalchannel'
    SERVICECONSUMPTION = 'serviceconsumption'
    PURGEREQUEST = 'purgerequest'
    MIGRATIONVERSION = 'migrationversion'
    FORMULACONSUMPTION = 'formulaconsumption'
    TEMPLATEDATAOBJECT = 'templatedataobject'
    DATAUPGRADEBASELINE = 'dataupgradebaseline'
    PROCESSREQUEST = 'processrequest'
    VALIDATIONREQUEST = 'validationrequest'
    POSTPROCESSREQUEST = 'postprocessrequest'
    OUTGOINGBANKINGTRANSACTION = 'outgoingbankingtransaction'
    INCOMINGMUTATION = 'incomingmutation'
    OUTGOINGMUTATION = 'outgoingmutation'
    INCOMINGBANKINGTRANSACTION = 'incomingbankingtransaction'
    CUSTOMERBANKACCOUNT = 'customerbankaccount'
    PLUGINMANUALTRIGGER = 'pluginmanualtrigger'
    BILLINGCUSTOMER = 'billingcustomer'
    ENUMSYMBOLTRANSLATION = 'enumsymboltranslation'
    SCENARIOTRANSLATION = 'scenariotranslation'
    SYNTHETICLOADPROFILE = 'syntheticloadprofile'
    CONSUMERGROUP = 'consumergroup'
    ESTIMABLECONTRACT = 'estimablecontract'
    PLUGININBOUNDWEBHOOKTRIGGER = 'plugininboundwebhooktrigger'
    PLUGINMAPPINGENTRY = 'pluginmappingentry'
    EAVESTIMATIONRUN = 'eavestimationrun'
    CUSTOMENTITYPROPERTYTYPE = 'customentitypropertytype'
    CUSTOMENTITYPROPERTY = 'customentityproperty'
    PLUGINFEEDENTRY = 'pluginfeedentry'
    REGIONALREGULATIONSCONFIGURATION = 'regionalregulationsconfiguration'
    ENTITYATTACHMENT = 'entityattachment'
    ENTITYATTACHMENTGROUP = 'entityattachmentgroup'
    PROPERTYGROUPFORECASTINGCONFIGURATION = 'propertygroupforecastingconfiguration'
    PREPAYMENTTRANSACTION = 'prepaymenttransaction'
    CUSTOMERAGINGHEADER = 'customeragingheader'
    ESTIMATEDBILLINGCOMPLETENESS = 'estimatedbillingcompleteness'
    ESTIMATEDINVOICE = 'estimatedinvoice'
    CUSTOMERGROUP = 'customergroup'
    METERINGISSUE = 'meteringissue'
    METERINGPARAMETERS = 'meteringparameters'
    MUTINGRULE = 'mutingrule'
    REPORTMAPPINGENTRY = 'reportmappingentry'
    METERINGIMPORT = 'meteringimport'
    PREPAYMENTACCOUNT = 'prepaymentaccount'
    USER = 'user'
    ROLE = 'role'
    BASEIMPORT = 'baseimport'
    SYSTEMUSAGERECORD = 'systemusagerecord'
    PORTALSETTINGS = 'portalsettings'
    ANNUALSTATEMENT = 'annualstatement'
    ORGANIZATIONSCENARIO = 'organizationscenario'
    ACCOUNTING = 'accounting'
    SOCIALTARIFFEXPORT = 'socialtariffexport'
    SOCIALTARIFFIMPORTHEADER = 'socialtariffimportheader'
    SOCIALTARIFFIMPORTLINE = 'socialtariffimportline'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EntitySubjectType from a JSON string"""
        return cls(json.loads(json_str))


