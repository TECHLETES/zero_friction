# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateCustomerPortalDetailsRequest(BaseModel):
    """
    UpdateCustomerPortalDetailsRequest
    """ # noqa: E501
    application_user_id: Optional[StrictStr] = Field(default=None, alias="applicationUserId")
    reset_password_token: Optional[StrictStr] = Field(default=None, alias="resetPasswordToken")
    confirm_account_token: Optional[StrictStr] = Field(default=None, alias="confirmAccountToken")
    email: Optional[StrictStr] = None
    send_communication: Optional[StrictBool] = Field(default=None, alias="sendCommunication")
    __properties: ClassVar[List[str]] = ["applicationUserId", "resetPasswordToken", "confirmAccountToken", "email", "sendCommunication"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCustomerPortalDetailsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if application_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.application_user_id is None and "application_user_id" in self.model_fields_set:
            _dict['applicationUserId'] = None

        # set to None if reset_password_token (nullable) is None
        # and model_fields_set contains the field
        if self.reset_password_token is None and "reset_password_token" in self.model_fields_set:
            _dict['resetPasswordToken'] = None

        # set to None if confirm_account_token (nullable) is None
        # and model_fields_set contains the field
        if self.confirm_account_token is None and "confirm_account_token" in self.model_fields_set:
            _dict['confirmAccountToken'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCustomerPortalDetailsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationUserId": obj.get("applicationUserId"),
            "resetPasswordToken": obj.get("resetPasswordToken"),
            "confirmAccountToken": obj.get("confirmAccountToken"),
            "email": obj.get("email"),
            "sendCommunication": obj.get("sendCommunication")
        })
        return _obj


