# coding: utf-8

"""
    Masterdata

    MasterData API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from masterdata_client.models.address_dto import AddressDTO
from masterdata_client.models.advance_frequency import AdvanceFrequency
from masterdata_client.models.contract_billing_method import ContractBillingMethod
from masterdata_client.models.invoice_frequency import InvoiceFrequency
from masterdata_client.models.product_period_reference_dto import ProductPeriodReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class BillingDetailsDTO(BaseModel):
    """
    BillingDetailsDTO
    """ # noqa: E501
    billing_method: Optional[ContractBillingMethod] = Field(default=None, alias="billingMethod")
    invoice_frequency: Optional[InvoiceFrequency] = Field(default=None, alias="invoiceFrequency")
    advance_frequency: Optional[AdvanceFrequency] = Field(default=None, alias="advanceFrequency")
    contractual_advance_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="contractualAdvanceAmount")
    products: Optional[List[ProductPeriodReferenceDTO]] = None
    invoice_address: Optional[AddressDTO] = Field(default=None, alias="invoiceAddress")
    first_invoice_start_date_time: Optional[datetime] = Field(default=None, alias="firstInvoiceStartDateTime")
    first_invoice_end_date_time: Optional[datetime] = Field(default=None, alias="firstInvoiceEndDateTime")
    blocked: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["billingMethod", "invoiceFrequency", "advanceFrequency", "contractualAdvanceAmount", "products", "invoiceAddress", "firstInvoiceStartDateTime", "firstInvoiceEndDateTime", "blocked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_address
        if self.invoice_address:
            _dict['invoiceAddress'] = self.invoice_address.to_dict()
        # set to None if billing_method (nullable) is None
        # and model_fields_set contains the field
        if self.billing_method is None and "billing_method" in self.model_fields_set:
            _dict['billingMethod'] = None

        # set to None if invoice_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_frequency is None and "invoice_frequency" in self.model_fields_set:
            _dict['invoiceFrequency'] = None

        # set to None if advance_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.advance_frequency is None and "advance_frequency" in self.model_fields_set:
            _dict['advanceFrequency'] = None

        # set to None if products (nullable) is None
        # and model_fields_set contains the field
        if self.products is None and "products" in self.model_fields_set:
            _dict['products'] = None

        # set to None if invoice_address (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_address is None and "invoice_address" in self.model_fields_set:
            _dict['invoiceAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingMethod": obj.get("billingMethod"),
            "invoiceFrequency": obj.get("invoiceFrequency"),
            "advanceFrequency": obj.get("advanceFrequency"),
            "contractualAdvanceAmount": obj.get("contractualAdvanceAmount"),
            "products": [ProductPeriodReferenceDTO.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "invoiceAddress": AddressDTO.from_dict(obj["invoiceAddress"]) if obj.get("invoiceAddress") is not None else None,
            "firstInvoiceStartDateTime": obj.get("firstInvoiceStartDateTime"),
            "firstInvoiceEndDateTime": obj.get("firstInvoiceEndDateTime"),
            "blocked": obj.get("blocked")
        })
        return _obj


