# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.transaction_dto import TransactionDTO

class TestTransactionDTO(unittest.TestCase):
    """TransactionDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransactionDTO:
        """Test TransactionDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransactionDTO`
        """
        model = TransactionDTO()
        if include_optional:
            return TransactionDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                transaction_type = 'invoice',
                transaction_sub_type = 'adjustbalance',
                transaction_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                transaction_due_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                transaction_amount = 1.337,
                transaction_open_amount = 1.337,
                customer_id = '',
                debtor = billing_client.models.debtor_dto.DebtorDTO(
                    customer_id = '', 
                    display_name = '', 
                    customer_account_number = '', 
                    customer_type = null, 
                    customer_group = null, ),
                organisation_bank_account_id = '',
                company_bank_account_id = '',
                payment_reference = '',
                reference_details = billing_client.models.transaction_reference_details_dto.TransactionReferenceDetailsDTO(
                    transaction_reference_type = null, 
                    transaction_reference_id = '', 
                    parameters = null, ),
                settlement_details = billing_client.models.settlement_details_dto.SettlementDetailsDTO(
                    settled_transactions_with_amounts = [
                        billing_client.models.settled_transaction_dto.SettledTransactionDTO(
                            transaction_id = '', 
                            settled_amount = 1.337, 
                            transaction_reference_type = null, 
                            transaction_reference_id = '', 
                            transaction_reference_display_name = '', 
                            transaction_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                reversed = True,
                reversal_reason = 'manualreverse',
                reversal_additional_information = '',
                automatically_closed = True,
                awaiting_bank_confirmation = True,
                awaiting_bank_confirmation_transaction_id = '',
                awaiting_bank_confirmation_transaction_identification = '',
                awaiting_bank_confirmation_transaction_type = 'paymentrequests',
                property_groups = [
                    billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                        id = '', 
                        name = '', )
                    ],
                incoming_banking_transaction_id = '',
                incoming_mutation_id = '',
                outgoing_banking_transaction_id = '',
                outgoing_mutation_id = ''
            )
        else:
            return TransactionDTO(
        )
        """

    def testTransactionDTO(self):
        """Test TransactionDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
