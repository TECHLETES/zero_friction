# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.invoice_ubl_validation_error_response_dto import InvoiceUBLValidationErrorResponseDTO

class TestInvoiceUBLValidationErrorResponseDTO(unittest.TestCase):
    """InvoiceUBLValidationErrorResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InvoiceUBLValidationErrorResponseDTO:
        """Test InvoiceUBLValidationErrorResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InvoiceUBLValidationErrorResponseDTO`
        """
        model = InvoiceUBLValidationErrorResponseDTO()
        if include_optional:
            return InvoiceUBLValidationErrorResponseDTO(
                general_errors = [
                    billing_client.models.invoice_ubl_validation_general_error_dto.InvoiceUBLValidationGeneralErrorDTO(
                        error_message = null, )
                    ],
                specific_errors = [
                    billing_client.models.invoice_ubl_validation_specific_error_dto.InvoiceUBLValidationSpecificErrorDTO(
                        invoice_id = '', 
                        invoice_number = '', 
                        error_subject = null, 
                        error_subject_id = '', 
                        error_message = null, )
                    ],
                unique_invoices_with_errors = 56
            )
        else:
            return InvoiceUBLValidationErrorResponseDTO(
        )
        """

    def testInvoiceUBLValidationErrorResponseDTO(self):
        """Test InvoiceUBLValidationErrorResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
