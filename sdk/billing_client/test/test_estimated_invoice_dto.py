# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.estimated_invoice_dto import EstimatedInvoiceDTO

class TestEstimatedInvoiceDTO(unittest.TestCase):
    """EstimatedInvoiceDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimatedInvoiceDTO:
        """Test EstimatedInvoiceDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimatedInvoiceDTO`
        """
        model = EstimatedInvoiceDTO()
        if include_optional:
            return EstimatedInvoiceDTO(
                customer_id = '',
                contract_id = '',
                original_billing_completeness_id = '',
                product = billing_client.models.product_reference_dto.ProductReferenceDTO(
                    id = '', 
                    name = '', 
                    product_id = '', 
                    product_name = '', ),
                calculation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                total_amount_incl_vat = 1.337,
                total_amount_excl_vat = 1.337,
                total_vat_amount = 1.337,
                remaining_amount = 1.337,
                lines = [
                    billing_client.models.estimated_invoice_line_dto.EstimatedInvoiceLineDTO(
                        calculation_type = null, 
                        billing_item_reference = null, 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        amount_excl_vat = 1.337, 
                        vat = 1.337, 
                        amount_incl_vat = 1.337, 
                        quantity = 1.337, 
                        raw_quantity = 1.337, 
                        unit_price = 1.337, 
                        vat_rate = 1.337, 
                        unit_of_measure = null, 
                        utility_type = null, 
                        service_location_id = '', 
                        billing_tariff_accuracy = null, 
                        cost_component_accuracies = [
                            billing_client.models.period_for_entity_dto.PeriodForEntityDTO(
                                entity_id = '', 
                                entity_period = null, 
                                out_dated = True, )
                            ], 
                        tax_accuracy = null, 
                        accuracy = null, 
                        quantity_accuracy = null, )
                    ],
                advances = [
                    billing_client.models.estimated_advance_period_dto.EstimatedAdvancePeriodDTO(
                        period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        amount_excl_vat = 1.337, 
                        vat = 1.337, 
                        amount_incl_vat = 1.337, 
                        quantity = 1.337, 
                        unit_price = 1.337, 
                        vat_rate = 1.337, 
                        paid = True, 
                        invoice_id = '', )
                    ],
                accuracy = 'low'
            )
        else:
            return EstimatedInvoiceDTO(
        )
        """

    def testEstimatedInvoiceDTO(self):
        """Test EstimatedInvoiceDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
