# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.property_group_billing_configuration_dto_api_response_dto import PropertyGroupBillingConfigurationDTOApiResponseDTO

class TestPropertyGroupBillingConfigurationDTOApiResponseDTO(unittest.TestCase):
    """PropertyGroupBillingConfigurationDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PropertyGroupBillingConfigurationDTOApiResponseDTO:
        """Test PropertyGroupBillingConfigurationDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PropertyGroupBillingConfigurationDTOApiResponseDTO`
        """
        model = PropertyGroupBillingConfigurationDTOApiResponseDTO()
        if include_optional:
            return PropertyGroupBillingConfigurationDTOApiResponseDTO(
                errors = [
                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = billing_client.models.property_group_billing_configuration_dto.PropertyGroupBillingConfigurationDTO(
                    id = '', 
                    entity_type = null, 
                    created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discriminator = '', 
                    _etag = '', 
                    require_attention = True, 
                    has_errors = True, 
                    has_warnings = True, 
                    is_read_only = True, 
                    organisation_id = '', 
                    property_group = null, 
                    company_bank_account_id = '', 
                    advance_frequency = null, 
                    invoice_frequency = null, 
                    invoice_day = 56, 
                    invoice_month = 56, 
                    product_id = '', 
                    payment_terms_id = '', 
                    required_incoming_invoice_components = [
                        billing_client.models.incoming_invoice_component_dto.IncomingInvoiceComponentDTO(
                            id = '', 
                            optional = True, )
                        ], 
                    calculation_configurations = [
                        billing_client.models.property_group_calculation_configuration_dto.PropertyGroupCalculationConfigurationDTO(
                            name = '', 
                            id = '', 
                            service_location_ids = [
                                ''
                                ], 
                            billing_items = [
                                billing_client.models.calculation_configuration_billing_item_dto.CalculationConfigurationBillingItemDTO(
                                    billing_item_id = '', 
                                    deviating_tariff_calculation = True, 
                                    tariff_formula = null, 
                                    tariff_validation_result = null, )
                                ], )
                        ], 
                    cost_allocation_enabled = True, 
                    cost_allocation_validated = True, 
                    note_to_customer = '', 
                    localisation_level = null, 
                    localised_fields = [
                        ''
                        ], 
                    translated_fields = {
                        'key' : {
                            'key' : ''
                            }
                        }, )
            )
        else:
            return PropertyGroupBillingConfigurationDTOApiResponseDTO(
        )
        """

    def testPropertyGroupBillingConfigurationDTOApiResponseDTO(self):
        """Test PropertyGroupBillingConfigurationDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
