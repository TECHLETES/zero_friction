# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.required_quantity_grouped_dto import RequiredQuantityGroupedDTO

class TestRequiredQuantityGroupedDTO(unittest.TestCase):
    """RequiredQuantityGroupedDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequiredQuantityGroupedDTO:
        """Test RequiredQuantityGroupedDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequiredQuantityGroupedDTO`
        """
        model = RequiredQuantityGroupedDTO()
        if include_optional:
            return RequiredQuantityGroupedDTO(
                contract_required_quantities = [
                    billing_client.models.required_quantity_contract_grouped_dto.RequiredQuantityContractGroupedDTO(
                        billing_item_id = '', 
                        required_quantities = [
                            billing_client.models.required_quantity_dto.RequiredQuantityDTO(
                                billing_item_id = '', 
                                service_location_id = '', 
                                calculation_group_id = '', 
                                complete = True, 
                                errors = [
                                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                                        key = null, 
                                        correlation_id = '', 
                                        message = '', 
                                        message_values = [
                                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                                data_type = null, 
                                                value = '', 
                                                capitalize = True, )
                                            ], )
                                    ], 
                                validation_errors = [
                                    billing_client.models.required_quantity_validation_error_dto.RequiredQuantityValidationErrorDTO(
                                        reason = null, 
                                        error = null, 
                                        problem_entity = null, 
                                        impacted_entity = null, 
                                        related_entities = [
                                            billing_client.models.related_entity_dto.RelatedEntityDTO(
                                                entity_subject_type = null, 
                                                entity_subject_id = '', )
                                            ], )
                                    ], )
                            ], )
                    ],
                location_required_quantities = [
                    billing_client.models.required_quantity_location_grouped_dto.RequiredQuantityLocationGroupedDTO(
                        service_location_id = '', 
                        required_quantities = [
                            billing_client.models.required_quantity_dto.RequiredQuantityDTO(
                                billing_item_id = '', 
                                service_location_id = '', 
                                calculation_group_id = '', 
                                complete = True, 
                                errors = [
                                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                                        key = null, 
                                        correlation_id = '', 
                                        message = '', 
                                        message_values = [
                                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                                data_type = null, 
                                                value = '', 
                                                capitalize = True, )
                                            ], )
                                    ], 
                                validation_errors = [
                                    billing_client.models.required_quantity_validation_error_dto.RequiredQuantityValidationErrorDTO(
                                        reason = null, 
                                        error = null, 
                                        problem_entity = null, 
                                        impacted_entity = null, 
                                        related_entities = [
                                            billing_client.models.related_entity_dto.RelatedEntityDTO(
                                                entity_subject_type = null, 
                                                entity_subject_id = '', )
                                            ], )
                                    ], )
                            ], )
                    ]
            )
        else:
            return RequiredQuantityGroupedDTO(
        )
        """

    def testRequiredQuantityGroupedDTO(self):
        """Test RequiredQuantityGroupedDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
