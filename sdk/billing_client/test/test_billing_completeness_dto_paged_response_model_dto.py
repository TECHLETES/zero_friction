# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.billing_completeness_dto_paged_response_model_dto import BillingCompletenessDTOPagedResponseModelDTO

class TestBillingCompletenessDTOPagedResponseModelDTO(unittest.TestCase):
    """BillingCompletenessDTOPagedResponseModelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingCompletenessDTOPagedResponseModelDTO:
        """Test BillingCompletenessDTOPagedResponseModelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingCompletenessDTOPagedResponseModelDTO`
        """
        model = BillingCompletenessDTOPagedResponseModelDTO()
        if include_optional:
            return BillingCompletenessDTOPagedResponseModelDTO(
                results = [
                    billing_client.models.billing_completeness_dto.BillingCompletenessDTO(
                        id = '', 
                        entity_type = null, 
                        created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discriminator = '', 
                        _etag = '', 
                        require_attention = True, 
                        has_errors = True, 
                        has_warnings = True, 
                        is_read_only = True, 
                        organisation_id = '', 
                        contract_id = '', 
                        contract_num = '', 
                        debtor = null, 
                        billing_relation_id = '', 
                        period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = null, 
                        input_missing_details = null, 
                        has_corrections = True, 
                        invoice_type = null, 
                        blocked = True, 
                        required_quantities_grouped = null, 
                        advance_periods = [
                            billing_client.models.advance_period_dto.AdvancePeriodDTO(
                                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                advance_amount_excl_vat = 1.337, 
                                invoice_id = '', 
                                invoice_num = '', 
                                invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                sent_status = null, 
                                paid = True, 
                                automatically_deleted = True, 
                                manually_deleted = True, )
                            ], 
                        expect_advances_to_be_imported_periodically = True, 
                        cost_allocation_billable = True, 
                        invoicing_upfront = True, 
                        invoicing_checkpoint_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        product_id = '', 
                        property_groups = [
                            billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                                id = '', 
                                name = '', )
                            ], )
                    ],
                has_next_page = True,
                next_page_token = '',
                total_records = 56,
                sortable_fields = [
                    ''
                    ],
                aggregate_details = [
                    billing_client.models.aggregate_details_dto.AggregateDetailsDTO(
                        code = '', 
                        translation = '', 
                        value = 1.337, 
                        value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return BillingCompletenessDTOPagedResponseModelDTO(
        )
        """

    def testBillingCompletenessDTOPagedResponseModelDTO(self):
        """Test BillingCompletenessDTOPagedResponseModelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
