# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.annual_statement_dto_paged_response_model_dto_api_response_dto import AnnualStatementDTOPagedResponseModelDTOApiResponseDTO

class TestAnnualStatementDTOPagedResponseModelDTOApiResponseDTO(unittest.TestCase):
    """AnnualStatementDTOPagedResponseModelDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnnualStatementDTOPagedResponseModelDTOApiResponseDTO:
        """Test AnnualStatementDTOPagedResponseModelDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnnualStatementDTOPagedResponseModelDTOApiResponseDTO`
        """
        model = AnnualStatementDTOPagedResponseModelDTOApiResponseDTO()
        if include_optional:
            return AnnualStatementDTOPagedResponseModelDTOApiResponseDTO(
                errors = [
                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = billing_client.models.annual_statement_dto_paged_response_model_dto.AnnualStatementDTOPagedResponseModelDTO(
                    results = [
                        billing_client.models.annual_statement_dto.AnnualStatementDTO(
                            id = '', 
                            entity_type = null, 
                            created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discriminator = '', 
                            _etag = '', 
                            require_attention = True, 
                            has_errors = True, 
                            has_warnings = True, 
                            is_read_only = True, 
                            organisation_id = '', 
                            annual_statement_number = '', 
                            year = 56, 
                            version = 56, 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = null, 
                            generation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            sent = null, 
                            failure_reason_code = null, 
                            failure_details = '', 
                            supports_external_printing = True, 
                            attachment_id = '', 
                            debtor = null, 
                            property_groups = [
                                billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                                    id = '', 
                                    name = '', )
                                ], )
                        ], 
                    has_next_page = True, 
                    next_page_token = '', 
                    total_records = 56, 
                    sortable_fields = [
                        ''
                        ], 
                    aggregate_details = [
                        billing_client.models.aggregate_details_dto.AggregateDetailsDTO(
                            code = '', 
                            translation = '', 
                            value = 1.337, 
                            value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], )
            )
        else:
            return AnnualStatementDTOPagedResponseModelDTOApiResponseDTO(
        )
        """

    def testAnnualStatementDTOPagedResponseModelDTOApiResponseDTO(self):
        """Test AnnualStatementDTOPagedResponseModelDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
