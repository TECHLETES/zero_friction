# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.collection_case_dto_paged_response_model_dto import CollectionCaseDTOPagedResponseModelDTO

class TestCollectionCaseDTOPagedResponseModelDTO(unittest.TestCase):
    """CollectionCaseDTOPagedResponseModelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectionCaseDTOPagedResponseModelDTO:
        """Test CollectionCaseDTOPagedResponseModelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectionCaseDTOPagedResponseModelDTO`
        """
        model = CollectionCaseDTOPagedResponseModelDTO()
        if include_optional:
            return CollectionCaseDTOPagedResponseModelDTO(
                results = [
                    billing_client.models.collection_case_dto.CollectionCaseDTO(
                        id = '', 
                        entity_type = null, 
                        created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discriminator = '', 
                        _etag = '', 
                        require_attention = True, 
                        has_errors = True, 
                        has_warnings = True, 
                        is_read_only = True, 
                        organisation_id = '', 
                        collection_num = '', 
                        sequence_num = 56, 
                        workflow_id = '', 
                        workflow_name = '', 
                        debtor = null, 
                        manual_intervention_required = True, 
                        status = null, 
                        steps = [
                            billing_client.models.collection_case_step_dto.CollectionCaseStepDTO(
                                id = '', 
                                step_id = '', 
                                order = 56, 
                                name = '', 
                                trigger_days = 56, 
                                execute_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                step_type = null, 
                                communication_type = null, 
                                communication_level = null, 
                                charge_type = null, 
                                charges = null, 
                                executed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                documents_sent_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                document_id = '', 
                                email_id = '', 
                                status = null, 
                                failure_reason_code = null, 
                                failure_details = '', 
                                supports_external_printing = True, 
                                retry_count = 56, )
                            ], 
                        last_step = null, 
                        next_step = null, 
                        next_action_due = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        referenced_transactions = [
                            ''
                            ], 
                        payment_reference = '', 
                        property_groups = [
                            billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                                id = '', 
                                name = '', )
                            ], 
                        total_open_amount_incl_vat = 1.337, 
                        custom_properties = [
                            billing_client.models.custom_entity_property_dto.CustomEntityPropertyDTO(
                                custom_entity_property_type_id = '', 
                                values = [
                                    billing_client.models.custom_entity_property_value_dto.CustomEntityPropertyValueDTO(
                                        value_decimal = 1.337, 
                                        value_string = '', 
                                        value_boolean = True, 
                                        value_number = 56, 
                                        value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        value_dropdown = [
                                            ''
                                            ], 
                                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], )
                            ], )
                    ],
                has_next_page = True,
                next_page_token = '',
                total_records = 56,
                sortable_fields = [
                    ''
                    ],
                aggregate_details = [
                    billing_client.models.aggregate_details_dto.AggregateDetailsDTO(
                        code = '', 
                        translation = '', 
                        value = 1.337, 
                        value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return CollectionCaseDTOPagedResponseModelDTO(
        )
        """

    def testCollectionCaseDTOPagedResponseModelDTO(self):
        """Test CollectionCaseDTOPagedResponseModelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
