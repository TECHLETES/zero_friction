# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.payment_dto import PaymentDTO

class TestPaymentDTO(unittest.TestCase):
    """PaymentDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentDTO:
        """Test PaymentDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentDTO`
        """
        model = PaymentDTO()
        if include_optional:
            return PaymentDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                type = 'incomingtransfer',
                payment_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                payment_reference = '',
                remittance_information = '',
                amount = 1.337,
                company_bank_account_id = '',
                debtor = billing_client.models.debtor_dto.DebtorDTO(
                    customer_id = '', 
                    display_name = '', 
                    customer_account_number = '', 
                    customer_type = null, 
                    customer_group = null, ),
                customer_bank_account_iban = '',
                is_manual = True,
                payment_entity_references = [
                    billing_client.models.payment_entity_reference_dto.PaymentEntityReferenceDTO(
                        transaction_id = '', 
                        reference_id = '', 
                        reference_type = null, )
                    ],
                is_reversed = True,
                reversal_details = billing_client.models.payment_reversal_details_dto.PaymentReversalDetailsDTO(
                    reversal_reason = null, 
                    reversal_additional_information = '', 
                    reversal_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    reversal_incoming_banking_transaction_id = '', 
                    reversal_incoming_banking_transaction_identification = '', 
                    reversal_incoming_mutation_id = '', ),
                outgoing_mutation_id = '',
                outgoing_banking_transaction_id = '',
                outgoing_banking_transaction_identification = '',
                is_confirmed_by_bank = True,
                incoming_banking_transaction_id = '',
                incoming_banking_transaction_identification = '',
                incoming_mutation_id = '',
                canonical_search = ''
            )
        else:
            return PaymentDTO(
        )
        """

    def testPaymentDTO(self):
        """Test PaymentDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
