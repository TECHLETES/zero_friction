# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.invoice_dto import InvoiceDTO

class TestInvoiceDTO(unittest.TestCase):
    """InvoiceDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InvoiceDTO:
        """Test InvoiceDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InvoiceDTO`
        """
        model = InvoiceDTO()
        if include_optional:
            return InvoiceDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                invoice_num = '',
                sequence_number = 56,
                invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = 'advance',
                status = 'created',
                debtor = billing_client.models.debtor_dto.DebtorDTO(
                    customer_id = '', 
                    display_name = '', 
                    customer_account_number = '', 
                    customer_type = null, 
                    customer_group = null, ),
                contract_id = '',
                contract_number = '',
                note_to_customer = '',
                external_reference = '',
                due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                lines = [
                    billing_client.models.invoice_line_dto.InvoiceLineDTO(
                        billing_item_id = '', 
                        billing_tariff_id = '', 
                        description = '', 
                        amount_excl_vat = 1.337, 
                        amount_incl_vat = 1.337, 
                        vat = 1.337, 
                        quantity = 1.337, 
                        raw_quantity = 1.337, 
                        unit_price = 1.337, 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        tax_code_id = '', 
                        tax_rate = 1.337, 
                        unit_of_measure = null, 
                        utility_type = null, 
                        line_type = null, 
                        consumption_based = True, 
                        service_location_id = '', 
                        original_invoice_id = '', 
                        sort_order = 56, 
                        id = '', )
                    ],
                remaining_invoice_amount = 1.337,
                total_amount_incl_vat = 1.337,
                total_amount_excl_vat = 1.337,
                payment_details = billing_client.models.payment_details_dto.PaymentDetailsDTO(
                    paid = True, 
                    current_payment_status = null, 
                    payment_reference = '', 
                    payment_method = null, 
                    direct_debit_collection_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    amount_of_times_retried = 56, 
                    status_history = [
                        billing_client.models.payment_status_history_dto.PaymentStatusHistoryDTO(
                            payment_status = null, 
                            outgoing_banking_transaction_id = '', 
                            outgoing_banking_transaction_identification = '', 
                            outgoing_mutation_id = '', 
                            outgoing_mutation_description = '', 
                            incoming_banking_transaction_id = '', 
                            incoming_banking_transaction_identification = '', 
                            incoming_mutation_id = '', 
                            incoming_mutation_description = '', 
                            reversal_reason = null, 
                            reversal_additional_information = '', 
                            mutation_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                attachment_id = '',
                credited_by_invoice_id = '',
                credited_invoice_id = '',
                billing_completeness_id = '',
                property_groups = [
                    billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                        id = '', 
                        name = '', )
                    ],
                product = billing_client.models.product_reference_dto.ProductReferenceDTO(
                    id = '', 
                    name = '', 
                    product_id = '', 
                    product_name = '', ),
                company_bank_account_id = '',
                consumption_calculation_inputs = [
                    billing_client.models.consumption_calculation_input_dto.ConsumptionCalculationInputDTO(
                        service_location_id = '', 
                        external_channel_identifier = '', 
                        meter_serial_number = '', 
                        time_zone = '', 
                        utility_type = null, 
                        metering_type = null, 
                        unit_of_measure = null, 
                        time_of_use = '', 
                        first_measurement = null, 
                        second_measurement = null, 
                        consumption_value = 1.337, 
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                collection_details = billing_client.models.collection_case_details_dto.CollectionCaseDetailsDTO(
                    collection_case_id = '', 
                    closed = True, 
                    workflow_id = '', 
                    workflow_name = '', 
                    previous_step_id = '', 
                    previous_step_name = '', 
                    previous_step_executed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    previous_step_status = null, 
                    next_step_id = '', 
                    next_step_name = '', 
                    next_step_execution_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                sent = 'notsent',
                failure_reason_code = billing_client.models.localised_error_dto.LocalisedErrorDTO(
                    key = null, 
                    correlation_id = '', 
                    message = '', 
                    message_values = [
                        billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                            data_type = null, 
                            value = '', 
                            capitalize = True, )
                        ], ),
                failure_details = '',
                supports_external_printing = True,
                export_status = 'notexported',
                new_advance_amount_excl_vat = 1.337,
                new_advance_amount_incl_vat = 1.337,
                advance_calculation_details = billing_client.models.advance_calculation_details_dto.AdvanceCalculationDetailsDTO(
                    new_advance_amount_excl_vat = 1.337, 
                    new_advance_amount_incl_vat = 1.337, 
                    old_advance_amount_incl_vat = 1.337, 
                    next_invoice_amount_incl_vat = 1.337, 
                    next_invoice_amount_accuracy = null, 
                    recalculation_type = null, 
                    fallback_reason = null, 
                    changed_by_user_id = '', ),
                ubl_attachment_details = billing_client.models.invoice_ubl_attachment_details_dto.InvoiceUBLAttachmentDetailsDTO(
                    errors = [
                        billing_client.models.invoice_ubl_validation_error_dto.InvoiceUBLValidationErrorDTO(
                            originator_type = null, 
                            originator_id = '', 
                            message = null, )
                        ], 
                    attachment_id = '', 
                    attachment_file_name = '', )
            )
        else:
            return InvoiceDTO(
        )
        """

    def testInvoiceDTO(self):
        """Test InvoiceDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
