# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.billing_completeness_insights_response_dto import BillingCompletenessInsightsResponseDTO

class TestBillingCompletenessInsightsResponseDTO(unittest.TestCase):
    """BillingCompletenessInsightsResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingCompletenessInsightsResponseDTO:
        """Test BillingCompletenessInsightsResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingCompletenessInsightsResponseDTO`
        """
        model = BillingCompletenessInsightsResponseDTO()
        if include_optional:
            return BillingCompletenessInsightsResponseDTO(
                next_advance_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                advance_frequency = 'none',
                advance_amount = 1.337,
                advances_created = 56,
                advances_needed = 56,
                invoice_frequency = 'monthly',
                active_invoice_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                active_invoice_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                active_status = 'waiting',
                active_billing_completeness_id = '',
                estimated_invoice_id = '',
                estimated_invoice_amount = 1.337,
                has_open_advance_periods_with_different_tax_rate = True,
                accuracy_state = 'low',
                draft_invoice_id = '',
                draft_invoice_amount = 1.337
            )
        else:
            return BillingCompletenessInsightsResponseDTO(
        )
        """

    def testBillingCompletenessInsightsResponseDTO(self):
        """Test BillingCompletenessInsightsResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
