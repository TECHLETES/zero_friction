# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.required_quantity_validation_error_dto import RequiredQuantityValidationErrorDTO

class TestRequiredQuantityValidationErrorDTO(unittest.TestCase):
    """RequiredQuantityValidationErrorDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RequiredQuantityValidationErrorDTO:
        """Test RequiredQuantityValidationErrorDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RequiredQuantityValidationErrorDTO`
        """
        model = RequiredQuantityValidationErrorDTO()
        if include_optional:
            return RequiredQuantityValidationErrorDTO(
                reason = 'unknown',
                error = 'ASSET_ALREADY_EXISTS',
                problem_entity = billing_client.models.reason_entity_dto.ReasonEntityDTO(
                    entity_subject_type = null, 
                    entity_subject_id = '', ),
                impacted_entity = billing_client.models.impacted_entity_dto.ImpactedEntityDTO(
                    entity_subject_type = null, 
                    entity_subject_id = '', ),
                related_entities = [
                    billing_client.models.related_entity_dto.RelatedEntityDTO(
                        entity_subject_type = null, 
                        entity_subject_id = '', )
                    ]
            )
        else:
            return RequiredQuantityValidationErrorDTO(
        )
        """

    def testRequiredQuantityValidationErrorDTO(self):
        """Test RequiredQuantityValidationErrorDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
