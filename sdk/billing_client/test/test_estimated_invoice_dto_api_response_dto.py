# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.estimated_invoice_dto_api_response_dto import EstimatedInvoiceDTOApiResponseDTO

class TestEstimatedInvoiceDTOApiResponseDTO(unittest.TestCase):
    """EstimatedInvoiceDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimatedInvoiceDTOApiResponseDTO:
        """Test EstimatedInvoiceDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimatedInvoiceDTOApiResponseDTO`
        """
        model = EstimatedInvoiceDTOApiResponseDTO()
        if include_optional:
            return EstimatedInvoiceDTOApiResponseDTO(
                errors = [
                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = billing_client.models.estimated_invoice_dto.EstimatedInvoiceDTO(
                    customer_id = '', 
                    contract_id = '', 
                    original_billing_completeness_id = '', 
                    product = null, 
                    calculation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    total_amount_incl_vat = 1.337, 
                    total_amount_excl_vat = 1.337, 
                    total_vat_amount = 1.337, 
                    remaining_amount = 1.337, 
                    lines = [
                        billing_client.models.estimated_invoice_line_dto.EstimatedInvoiceLineDTO(
                            calculation_type = null, 
                            billing_item_reference = null, 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            amount_excl_vat = 1.337, 
                            vat = 1.337, 
                            amount_incl_vat = 1.337, 
                            quantity = 1.337, 
                            raw_quantity = 1.337, 
                            unit_price = 1.337, 
                            vat_rate = 1.337, 
                            unit_of_measure = null, 
                            utility_type = null, 
                            service_location_id = '', 
                            billing_tariff_accuracy = null, 
                            cost_component_accuracies = [
                                billing_client.models.period_for_entity_dto.PeriodForEntityDTO(
                                    entity_id = '', 
                                    entity_period = null, 
                                    out_dated = True, )
                                ], 
                            tax_accuracy = null, 
                            accuracy = null, 
                            quantity_accuracy = null, )
                        ], 
                    advances = [
                        billing_client.models.estimated_advance_period_dto.EstimatedAdvancePeriodDTO(
                            period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            amount_excl_vat = 1.337, 
                            vat = 1.337, 
                            amount_incl_vat = 1.337, 
                            quantity = 1.337, 
                            unit_price = 1.337, 
                            vat_rate = 1.337, 
                            paid = True, 
                            invoice_id = '', )
                        ], 
                    accuracy = null, )
            )
        else:
            return EstimatedInvoiceDTOApiResponseDTO(
        )
        """

    def testEstimatedInvoiceDTOApiResponseDTO(self):
        """Test EstimatedInvoiceDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
