# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.consumption_calculation_input_dto import ConsumptionCalculationInputDTO

class TestConsumptionCalculationInputDTO(unittest.TestCase):
    """ConsumptionCalculationInputDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsumptionCalculationInputDTO:
        """Test ConsumptionCalculationInputDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsumptionCalculationInputDTO`
        """
        model = ConsumptionCalculationInputDTO()
        if include_optional:
            return ConsumptionCalculationInputDTO(
                service_location_id = '',
                external_channel_identifier = '',
                meter_serial_number = '',
                time_zone = '',
                utility_type = 'none',
                metering_type = 'none',
                unit_of_measure = 'none',
                time_of_use = '',
                first_measurement = billing_client.models.consumption_calculation_measurement_dto.ConsumptionCalculationMeasurementDTO(
                    value = 1.337, 
                    reading_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    unit_of_measure = null, ),
                second_measurement = billing_client.models.consumption_calculation_measurement_dto.ConsumptionCalculationMeasurementDTO(
                    value = 1.337, 
                    reading_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    unit_of_measure = null, ),
                consumption_value = 1.337,
                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ConsumptionCalculationInputDTO(
        )
        """

    def testConsumptionCalculationInputDTO(self):
        """Test ConsumptionCalculationInputDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
