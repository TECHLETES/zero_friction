# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.invoice_dto_api_response_dto import InvoiceDTOApiResponseDTO

class TestInvoiceDTOApiResponseDTO(unittest.TestCase):
    """InvoiceDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InvoiceDTOApiResponseDTO:
        """Test InvoiceDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InvoiceDTOApiResponseDTO`
        """
        model = InvoiceDTOApiResponseDTO()
        if include_optional:
            return InvoiceDTOApiResponseDTO(
                errors = [
                    billing_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = billing_client.models.invoice_dto.InvoiceDTO(
                    id = '', 
                    entity_type = null, 
                    created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discriminator = '', 
                    _etag = '', 
                    require_attention = True, 
                    has_errors = True, 
                    has_warnings = True, 
                    is_read_only = True, 
                    organisation_id = '', 
                    invoice_num = '', 
                    sequence_number = 56, 
                    invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    type = null, 
                    status = null, 
                    debtor = null, 
                    contract_id = '', 
                    contract_number = '', 
                    note_to_customer = '', 
                    external_reference = '', 
                    due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    lines = [
                        billing_client.models.invoice_line_dto.InvoiceLineDTO(
                            billing_item_id = '', 
                            billing_tariff_id = '', 
                            description = '', 
                            amount_excl_vat = 1.337, 
                            amount_incl_vat = 1.337, 
                            vat = 1.337, 
                            quantity = 1.337, 
                            raw_quantity = 1.337, 
                            unit_price = 1.337, 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            tax_code_id = '', 
                            tax_rate = 1.337, 
                            unit_of_measure = null, 
                            utility_type = null, 
                            line_type = null, 
                            consumption_based = True, 
                            service_location_id = '', 
                            original_invoice_id = '', 
                            sort_order = 56, 
                            id = '', )
                        ], 
                    remaining_invoice_amount = 1.337, 
                    total_amount_incl_vat = 1.337, 
                    total_amount_excl_vat = 1.337, 
                    payment_details = null, 
                    attachment_id = '', 
                    credited_by_invoice_id = '', 
                    credited_invoice_id = '', 
                    billing_completeness_id = '', 
                    property_groups = [
                        billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                            id = '', 
                            name = '', )
                        ], 
                    product = null, 
                    company_bank_account_id = '', 
                    consumption_calculation_inputs = [
                        billing_client.models.consumption_calculation_input_dto.ConsumptionCalculationInputDTO(
                            service_location_id = '', 
                            external_channel_identifier = '', 
                            meter_serial_number = '', 
                            time_zone = '', 
                            utility_type = null, 
                            metering_type = null, 
                            unit_of_measure = null, 
                            time_of_use = '', 
                            first_measurement = null, 
                            second_measurement = null, 
                            consumption_value = 1.337, 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    collection_details = null, 
                    sent = null, 
                    failure_reason_code = null, 
                    failure_details = '', 
                    supports_external_printing = True, 
                    export_status = null, 
                    new_advance_amount_excl_vat = 1.337, 
                    new_advance_amount_incl_vat = 1.337, 
                    advance_calculation_details = null, 
                    ubl_attachment_details = null, )
            )
        else:
            return InvoiceDTOApiResponseDTO(
        )
        """

    def testInvoiceDTOApiResponseDTO(self):
        """Test InvoiceDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
