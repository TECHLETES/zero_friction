# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.estimated_billing_completeness_dto import EstimatedBillingCompletenessDTO

class TestEstimatedBillingCompletenessDTO(unittest.TestCase):
    """EstimatedBillingCompletenessDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimatedBillingCompletenessDTO:
        """Test EstimatedBillingCompletenessDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimatedBillingCompletenessDTO`
        """
        model = EstimatedBillingCompletenessDTO()
        if include_optional:
            return EstimatedBillingCompletenessDTO(
                id = '',
                entity_type = 'none',
                created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discriminator = '',
                etag = '',
                require_attention = True,
                has_errors = True,
                has_warnings = True,
                is_read_only = True,
                organisation_id = '',
                contract_id = '',
                contract_num = '',
                debtor = billing_client.models.debtor_dto.DebtorDTO(
                    customer_id = '', 
                    display_name = '', 
                    customer_account_number = '', 
                    customer_type = null, 
                    customer_group = null, ),
                billing_relation_id = '',
                period_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = 'waiting',
                input_missing_details = billing_client.models.input_missing_details_dto.InputMissingDetailsDTO(
                    reason = null, 
                    extra_info = '', ),
                has_corrections = True,
                invoice_type = 'advance',
                blocked = True,
                required_quantities_grouped = billing_client.models.required_quantity_grouped_dto.RequiredQuantityGroupedDTO(
                    contract_required_quantities = [
                        billing_client.models.required_quantity_contract_grouped_dto.RequiredQuantityContractGroupedDTO(
                            billing_item_id = '', 
                            required_quantities = [
                                billing_client.models.required_quantity_dto.RequiredQuantityDTO(
                                    billing_item_id = '', 
                                    service_location_id = '', 
                                    calculation_group_id = '', 
                                    complete = True, 
                                    errors = [
                                        billing_client.models.localised_error_dto.LocalisedErrorDTO(
                                            key = null, 
                                            correlation_id = '', 
                                            message = '', 
                                            message_values = [
                                                billing_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                                    data_type = null, 
                                                    value = '', 
                                                    capitalize = True, )
                                                ], )
                                        ], 
                                    validation_errors = [
                                        billing_client.models.required_quantity_validation_error_dto.RequiredQuantityValidationErrorDTO(
                                            reason = null, 
                                            error = null, 
                                            problem_entity = null, 
                                            impacted_entity = null, 
                                            related_entities = [
                                                billing_client.models.related_entity_dto.RelatedEntityDTO(
                                                    entity_subject_type = null, 
                                                    entity_subject_id = '', )
                                                ], )
                                        ], )
                                ], )
                        ], 
                    location_required_quantities = [
                        billing_client.models.required_quantity_location_grouped_dto.RequiredQuantityLocationGroupedDTO(
                            service_location_id = '', )
                        ], ),
                advance_periods = [
                    billing_client.models.advance_period_dto.AdvancePeriodDTO(
                        start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        advance_amount_excl_vat = 1.337, 
                        invoice_id = '', 
                        invoice_num = '', 
                        invoice_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        sent_status = null, 
                        paid = True, 
                        automatically_deleted = True, 
                        manually_deleted = True, )
                    ],
                expect_advances_to_be_imported_periodically = True,
                cost_allocation_billable = True,
                invoicing_upfront = True,
                invoicing_checkpoint_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                product_id = '',
                property_groups = [
                    billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                        id = '', 
                        name = '', )
                    ],
                original_billing_completeness_id = '',
                estimation_messages_requested = [
                    ''
                    ],
                validation_errors = [
                    billing_client.models.error_code_message.ErrorCodeMessage(
                        error_code = null, 
                        values = [
                            billing_client.models.error_code_message_value.ErrorCodeMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ]
            )
        else:
            return EstimatedBillingCompletenessDTO(
        )
        """

    def testEstimatedBillingCompletenessDTO(self):
        """Test EstimatedBillingCompletenessDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
