# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.billing_relation_dto import BillingRelationDTO

class TestBillingRelationDTO(unittest.TestCase):
    """BillingRelationDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingRelationDTO:
        """Test BillingRelationDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingRelationDTO`
        """
        model = BillingRelationDTO()
        if include_optional:
            return BillingRelationDTO(
                id = '',
                debtor = billing_client.models.debtor_dto.DebtorDTO(
                    customer_id = '', 
                    display_name = '', 
                    customer_account_number = '', 
                    customer_type = null, 
                    customer_group = null, ),
                payment_terms_id = '',
                payment_method = 'sct',
                advance_details = billing_client.models.advance_details_dto.AdvanceDetailsDTO(
                    advance_amount = 1.337, 
                    original_amount = 1.337, 
                    changed_by = null, 
                    changed_by_user_id = '', 
                    changed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    advance_amount_excl_vat = 1.337, 
                    advance_frequency = null, ),
                invoice_details = billing_client.models.invoice_details_dto.InvoiceDetailsDTO(
                    invoice_frequency = null, 
                    first_invoice_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    first_invoice_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                contract = billing_client.models.billing_contract_dto.BillingContractDTO(
                    contract_id = '', 
                    contract_number = '', 
                    products = [
                        billing_client.models.product_period_reference_dto.ProductPeriodReferenceDTO(
                            product_id = '', 
                            product_name = '', 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    services = [
                        billing_client.models.billed_service_dto.BilledServiceDTO(
                            utility_type = null, 
                            service_location_id = '', 
                            supply_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            supply_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            external_identifier = '', )
                        ], 
                    use_property_group_product = True, 
                    property_groups = [
                        billing_client.models.property_group_reference_dto.PropertyGroupReferenceDTO(
                            id = '', 
                            name = '', )
                        ], 
                    billing_method = null, ),
                contract_start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                contract_end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                block_details = billing_client.models.block_details_dto.BlockDetailsDTO(
                    blocked = True, 
                    blocked_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    blocked_by = '', 
                    blocked_comment = '', ),
                expect_advances_to_be_imported_periodically = True,
                time_zone = ''
            )
        else:
            return BillingRelationDTO(
        )
        """

    def testBillingRelationDTO(self):
        """Test BillingRelationDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
