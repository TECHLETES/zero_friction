# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.estimated_invoice_line_dto import EstimatedInvoiceLineDTO

class TestEstimatedInvoiceLineDTO(unittest.TestCase):
    """EstimatedInvoiceLineDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EstimatedInvoiceLineDTO:
        """Test EstimatedInvoiceLineDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EstimatedInvoiceLineDTO`
        """
        model = EstimatedInvoiceLineDTO()
        if include_optional:
            return EstimatedInvoiceLineDTO(
                calculation_type = 'consumption',
                billing_item_reference = billing_client.models.billing_item_reference.BillingItemReference(
                    billing_item_id = '', 
                    billing_item_name = '', ),
                start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                amount_excl_vat = 1.337,
                vat = 1.337,
                amount_incl_vat = 1.337,
                quantity = 1.337,
                raw_quantity = 1.337,
                unit_price = 1.337,
                vat_rate = 1.337,
                unit_of_measure = 'none',
                utility_type = 'none',
                service_location_id = '',
                billing_tariff_accuracy = billing_client.models.period_for_entity_dto.PeriodForEntityDTO(
                    entity_id = '', 
                    entity_period = null, 
                    out_dated = True, ),
                cost_component_accuracies = [
                    billing_client.models.period_for_entity_dto.PeriodForEntityDTO(
                        entity_id = '', 
                        entity_period = null, 
                        out_dated = True, )
                    ],
                tax_accuracy = billing_client.models.period_for_entity_dto.PeriodForEntityDTO(
                    entity_id = '', 
                    entity_period = null, 
                    out_dated = True, ),
                accuracy = 'low',
                quantity_accuracy = 'low'
            )
        else:
            return EstimatedInvoiceLineDTO(
        )
        """

    def testEstimatedInvoiceLineDTO(self):
        """Test EstimatedInvoiceLineDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
