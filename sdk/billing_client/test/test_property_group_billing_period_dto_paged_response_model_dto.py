# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from billing_client.models.property_group_billing_period_dto_paged_response_model_dto import PropertyGroupBillingPeriodDTOPagedResponseModelDTO

class TestPropertyGroupBillingPeriodDTOPagedResponseModelDTO(unittest.TestCase):
    """PropertyGroupBillingPeriodDTOPagedResponseModelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PropertyGroupBillingPeriodDTOPagedResponseModelDTO:
        """Test PropertyGroupBillingPeriodDTOPagedResponseModelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PropertyGroupBillingPeriodDTOPagedResponseModelDTO`
        """
        model = PropertyGroupBillingPeriodDTOPagedResponseModelDTO()
        if include_optional:
            return PropertyGroupBillingPeriodDTOPagedResponseModelDTO(
                results = [
                    billing_client.models.property_group_billing_period_dto.PropertyGroupBillingPeriodDTO(
                        id = '', 
                        entity_type = null, 
                        created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discriminator = '', 
                        _etag = '', 
                        require_attention = True, 
                        has_errors = True, 
                        has_warnings = True, 
                        is_read_only = True, 
                        organisation_id = '', 
                        property_group_id = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        incoming_invoice_components = [
                            billing_client.models.incoming_invoice_component_details_dto.IncomingInvoiceComponentDetailsDTO(
                                incoming_invoice_component_id = '', 
                                potentially_complete = True, 
                                values = [
                                    billing_client.models.incoming_invoice_component_value_dto.IncomingInvoiceComponentValueDTO(
                                        id = '', 
                                        value = 1.337, 
                                        incoming_invoice_id = '', )
                                    ], )
                            ], 
                        calculation_configurations = [
                            billing_client.models.property_group_billing_period_calculation_configuration_details_dto.PropertyGroupBillingPeriodCalculationConfigurationDetailsDTO(
                                calculation_configuration_id = '', 
                                tariff_status = null, 
                                billing_items = [
                                    billing_client.models.billing_item_details_dto.BillingItemDetailsDTO(
                                        billing_item_id = '', 
                                        deviating_tariffs = [
                                            billing_client.models.calculated_tariff_dto.CalculatedTariffDTO(
                                                tariff = 1.337, 
                                                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                            ], 
                                        tariff_execution_errors = [
                                            billing_client.models.formula_function_exception_dto.FormulaFunctionExceptionDTO(
                                                function_position = 56, 
                                                error = null, 
                                                message = '', 
                                                parameters = [
                                                    ''
                                                    ], )
                                            ], )
                                    ], )
                            ], 
                        locked = True, )
                    ],
                has_next_page = True,
                next_page_token = '',
                total_records = 56,
                sortable_fields = [
                    ''
                    ],
                aggregate_details = [
                    billing_client.models.aggregate_details_dto.AggregateDetailsDTO(
                        code = '', 
                        translation = '', 
                        value = 1.337, 
                        value_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return PropertyGroupBillingPeriodDTOPagedResponseModelDTO(
        )
        """

    def testPropertyGroupBillingPeriodDTOPagedResponseModelDTO(self):
        """Test PropertyGroupBillingPeriodDTOPagedResponseModelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
