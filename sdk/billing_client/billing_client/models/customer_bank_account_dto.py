# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.customer_mandate_dto import CustomerMandateDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from typing import Optional, Set
from typing_extensions import Self

class CustomerBankAccountDTO(BaseModel):
    """
    Represents a customer's bank account information.  This DTO contains details about the bank account, associated mandates, and usage information.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    customer_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the customer associated with this bank account.", alias="customerId")
    active_mandate: Optional[CustomerMandateDTO] = Field(default=None, description="The currently active mandate for this bank account.", alias="activeMandate")
    customer_mandates: Optional[List[CustomerMandateDTO]] = Field(default=None, description="List of all mandates associated with this bank account.", alias="customerMandates")
    iban: Optional[StrictStr] = Field(default=None, description="The International Bank Account Number (IBAN) for this account.")
    bic: Optional[StrictStr] = Field(default=None, description="The Bank Identifier Code (BIC) for this account.")
    added_from_incoming_banking_transaction: Optional[StrictBool] = Field(default=None, description="Indicates whether this bank account was added from an incoming banking transaction.", alias="addedFromIncomingBankingTransaction")
    is_default: Optional[StrictBool] = Field(default=None, description="Indicates whether this is the default bank account for the customer.", alias="isDefault")
    last_used_date: Optional[datetime] = Field(default=None, description="The date and time when this bank account was last used.", alias="lastUsedDate")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "customerId", "activeMandate", "customerMandates", "iban", "bic", "addedFromIncomingBankingTransaction", "isDefault", "lastUsedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerBankAccountDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_mandate
        if self.active_mandate:
            _dict['activeMandate'] = self.active_mandate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customer_mandates (list)
        _items = []
        if self.customer_mandates:
            for _item_customer_mandates in self.customer_mandates:
                if _item_customer_mandates:
                    _items.append(_item_customer_mandates.to_dict())
            _dict['customerMandates'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if active_mandate (nullable) is None
        # and model_fields_set contains the field
        if self.active_mandate is None and "active_mandate" in self.model_fields_set:
            _dict['activeMandate'] = None

        # set to None if customer_mandates (nullable) is None
        # and model_fields_set contains the field
        if self.customer_mandates is None and "customer_mandates" in self.model_fields_set:
            _dict['customerMandates'] = None

        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if bic (nullable) is None
        # and model_fields_set contains the field
        if self.bic is None and "bic" in self.model_fields_set:
            _dict['bic'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerBankAccountDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "customerId": obj.get("customerId"),
            "activeMandate": CustomerMandateDTO.from_dict(obj["activeMandate"]) if obj.get("activeMandate") is not None else None,
            "customerMandates": [CustomerMandateDTO.from_dict(_item) for _item in obj["customerMandates"]] if obj.get("customerMandates") is not None else None,
            "iban": obj.get("iban"),
            "bic": obj.get("bic"),
            "addedFromIncomingBankingTransaction": obj.get("addedFromIncomingBankingTransaction"),
            "isDefault": obj.get("isDefault"),
            "lastUsedDate": obj.get("lastUsedDate")
        })
        return _obj


