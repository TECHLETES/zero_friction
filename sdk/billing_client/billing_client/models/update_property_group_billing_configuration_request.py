# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.advance_frequency import AdvanceFrequency
from billing_client.models.invoice_frequency import InvoiceFrequency
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class UpdatePropertyGroupBillingConfigurationRequest(BaseModel):
    """
    Represents a request to update a property group billing configuration.  This DTO is used to modify various billing settings for a property group, including frequencies, payment terms, and bank account details.
    """ # noqa: E501
    property_group: Optional[PropertyGroupReferenceDTO] = Field(default=None, description="Reference to the property group being configured.", alias="propertyGroup")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the company bank account to be used for billing.", alias="companyBankAccountId")
    advance_frequency: Optional[AdvanceFrequency] = Field(default=None, description="The frequency at which advance payments will be collected.", alias="advanceFrequency")
    invoice_frequency: Optional[InvoiceFrequency] = Field(default=None, description="The frequency at which invoices will be generated.", alias="invoiceFrequency")
    invoice_day: Optional[StrictInt] = Field(default=None, description="The day of the month when invoices should be generated.", alias="invoiceDay")
    invoice_month: Optional[StrictInt] = Field(default=None, description="The month when invoices should be generated (used for yearly frequency).", alias="invoiceMonth")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product associated with this billing configuration.", alias="productId")
    payment_terms_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment terms to be applied.", alias="paymentTermsId")
    __properties: ClassVar[List[str]] = ["propertyGroup", "companyBankAccountId", "advanceFrequency", "invoiceFrequency", "invoiceDay", "invoiceMonth", "productId", "paymentTermsId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePropertyGroupBillingConfigurationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of property_group
        if self.property_group:
            _dict['propertyGroup'] = self.property_group.to_dict()
        # set to None if property_group (nullable) is None
        # and model_fields_set contains the field
        if self.property_group is None and "property_group" in self.model_fields_set:
            _dict['propertyGroup'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if advance_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.advance_frequency is None and "advance_frequency" in self.model_fields_set:
            _dict['advanceFrequency'] = None

        # set to None if invoice_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_frequency is None and "invoice_frequency" in self.model_fields_set:
            _dict['invoiceFrequency'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePropertyGroupBillingConfigurationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyGroup": PropertyGroupReferenceDTO.from_dict(obj["propertyGroup"]) if obj.get("propertyGroup") is not None else None,
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "advanceFrequency": obj.get("advanceFrequency"),
            "invoiceFrequency": obj.get("invoiceFrequency"),
            "invoiceDay": obj.get("invoiceDay"),
            "invoiceMonth": obj.get("invoiceMonth"),
            "productId": obj.get("productId"),
            "paymentTermsId": obj.get("paymentTermsId")
        })
        return _obj


