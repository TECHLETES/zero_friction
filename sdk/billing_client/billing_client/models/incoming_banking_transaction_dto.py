# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.incoming_banking_transaction_company_bank_account_dto import IncomingBankingTransactionCompanyBankAccountDTO
from billing_client.models.incoming_banking_transaction_entity_counts_dto import IncomingBankingTransactionEntityCountsDTO
from billing_client.models.incoming_banking_transaction_iban_confirmation_dto import IncomingBankingTransactionIbanConfirmationDTO
from billing_client.models.incoming_banking_transaction_status import IncomingBankingTransactionStatus
from billing_client.models.localised_error_dto import LocalisedErrorDTO
from typing import Optional, Set
from typing_extensions import Self

class IncomingBankingTransactionDTO(BaseModel):
    """
    Represents an incoming banking transaction file and its associated data.  This DTO contains information about the transaction file, balances, and processing status.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    identification: Optional[StrictStr] = Field(default=None, description="The unique identifier of the transaction file.")
    sequence_num: Optional[StrictInt] = Field(default=None, description="The sequence number of the transaction file.", alias="sequenceNum")
    status: Optional[IncomingBankingTransactionStatus] = Field(default=None, description="The current status of the transaction file.")
    file_creation_date_time: Optional[datetime] = Field(default=None, description="The date and time when the file was created.", alias="fileCreationDateTime")
    opening_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The opening balance of the account at the start of the transaction period.", alias="openingBalance")
    closing_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The closing balance of the account at the end of the transaction period.", alias="closingBalance")
    opening_balance_date: Optional[datetime] = Field(default=None, description="The date and time of the opening balance.", alias="openingBalanceDate")
    closing_balance_date: Optional[datetime] = Field(default=None, description="The date and time of the closing balance.", alias="closingBalanceDate")
    company_bank_account: Optional[IncomingBankingTransactionCompanyBankAccountDTO] = Field(default=None, description="Information about the company bank account associated with this transaction.", alias="companyBankAccount")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the transaction file.", alias="fileName")
    internal_file_path: Optional[StrictStr] = Field(default=None, description="The internal file path where the transaction file is stored.", alias="internalFilePath")
    entity_counts: Optional[IncomingBankingTransactionEntityCountsDTO] = Field(default=None, description="Statistics about the entities processed in this transaction file.", alias="entityCounts")
    locked: Optional[StrictBool] = Field(default=None, description="Indicates whether the transaction file is locked for processing.")
    errors: Optional[List[LocalisedErrorDTO]] = Field(default=None, description="List of localized errors that occurred during processing.")
    automatically_created: Optional[StrictBool] = Field(default=None, description="Indicates whether this transaction was automatically created.", alias="automaticallyCreated")
    iban_confirmations: Optional[List[IncomingBankingTransactionIbanConfirmationDTO]] = Field(default=None, description="List of IBAN confirmations associated with this transaction.", alias="ibanConfirmations")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "identification", "sequenceNum", "status", "fileCreationDateTime", "openingBalance", "closingBalance", "openingBalanceDate", "closingBalanceDate", "companyBankAccount", "fileName", "internalFilePath", "entityCounts", "locked", "errors", "automaticallyCreated", "ibanConfirmations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_bank_account
        if self.company_bank_account:
            _dict['companyBankAccount'] = self.company_bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_counts
        if self.entity_counts:
            _dict['entityCounts'] = self.entity_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iban_confirmations (list)
        _items = []
        if self.iban_confirmations:
            for _item_iban_confirmations in self.iban_confirmations:
                if _item_iban_confirmations:
                    _items.append(_item_iban_confirmations.to_dict())
            _dict['ibanConfirmations'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if identification (nullable) is None
        # and model_fields_set contains the field
        if self.identification is None and "identification" in self.model_fields_set:
            _dict['identification'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if opening_balance (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance is None and "opening_balance" in self.model_fields_set:
            _dict['openingBalance'] = None

        # set to None if closing_balance (nullable) is None
        # and model_fields_set contains the field
        if self.closing_balance is None and "closing_balance" in self.model_fields_set:
            _dict['closingBalance'] = None

        # set to None if company_bank_account (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account is None and "company_bank_account" in self.model_fields_set:
            _dict['companyBankAccount'] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['fileName'] = None

        # set to None if internal_file_path (nullable) is None
        # and model_fields_set contains the field
        if self.internal_file_path is None and "internal_file_path" in self.model_fields_set:
            _dict['internalFilePath'] = None

        # set to None if entity_counts (nullable) is None
        # and model_fields_set contains the field
        if self.entity_counts is None and "entity_counts" in self.model_fields_set:
            _dict['entityCounts'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if iban_confirmations (nullable) is None
        # and model_fields_set contains the field
        if self.iban_confirmations is None and "iban_confirmations" in self.model_fields_set:
            _dict['ibanConfirmations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "identification": obj.get("identification"),
            "sequenceNum": obj.get("sequenceNum"),
            "status": obj.get("status"),
            "fileCreationDateTime": obj.get("fileCreationDateTime"),
            "openingBalance": obj.get("openingBalance"),
            "closingBalance": obj.get("closingBalance"),
            "openingBalanceDate": obj.get("openingBalanceDate"),
            "closingBalanceDate": obj.get("closingBalanceDate"),
            "companyBankAccount": IncomingBankingTransactionCompanyBankAccountDTO.from_dict(obj["companyBankAccount"]) if obj.get("companyBankAccount") is not None else None,
            "fileName": obj.get("fileName"),
            "internalFilePath": obj.get("internalFilePath"),
            "entityCounts": IncomingBankingTransactionEntityCountsDTO.from_dict(obj["entityCounts"]) if obj.get("entityCounts") is not None else None,
            "locked": obj.get("locked"),
            "errors": [LocalisedErrorDTO.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "automaticallyCreated": obj.get("automaticallyCreated"),
            "ibanConfirmations": [IncomingBankingTransactionIbanConfirmationDTO.from_dict(_item) for _item in obj["ibanConfirmations"]] if obj.get("ibanConfirmations") is not None else None
        })
        return _obj


