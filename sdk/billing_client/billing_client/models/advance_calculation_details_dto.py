# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.advance_calculation_fallback_reason import AdvanceCalculationFallbackReason
from billing_client.models.advance_recalculation_type import AdvanceRecalculationType
from billing_client.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class AdvanceCalculationDetailsDTO(BaseModel):
    """
    Represents details of advance payment calculations
    """ # noqa: E501
    new_advance_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="New advance amount excluding VAT", alias="newAdvanceAmountExclVAT")
    new_advance_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="New advance amount including VAT", alias="newAdvanceAmountInclVAT")
    old_advance_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Old advance amount including VAT", alias="oldAdvanceAmountInclVAT")
    next_invoice_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Next invoice amount including VAT", alias="nextInvoiceAmountInclVat")
    next_invoice_amount_accuracy: Optional[Level] = Field(default=None, description="Accuracy level of the next invoice amount", alias="nextInvoiceAmountAccuracy")
    recalculation_type: Optional[AdvanceRecalculationType] = Field(default=None, description="Type of advance recalculation", alias="recalculationType")
    fallback_reason: Optional[AdvanceCalculationFallbackReason] = Field(default=None, description="Reason for fallback in advance calculation", alias="fallbackReason")
    changed_by_user_id: Optional[StrictStr] = Field(default=None, description="Identifier of the user who made the changes", alias="changedByUserId")
    __properties: ClassVar[List[str]] = ["newAdvanceAmountExclVAT", "newAdvanceAmountInclVAT", "oldAdvanceAmountInclVAT", "nextInvoiceAmountInclVat", "nextInvoiceAmountAccuracy", "recalculationType", "fallbackReason", "changedByUserId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvanceCalculationDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if new_advance_amount_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.new_advance_amount_excl_vat is None and "new_advance_amount_excl_vat" in self.model_fields_set:
            _dict['newAdvanceAmountExclVAT'] = None

        # set to None if new_advance_amount_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.new_advance_amount_incl_vat is None and "new_advance_amount_incl_vat" in self.model_fields_set:
            _dict['newAdvanceAmountInclVAT'] = None

        # set to None if next_invoice_amount_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.next_invoice_amount_incl_vat is None and "next_invoice_amount_incl_vat" in self.model_fields_set:
            _dict['nextInvoiceAmountInclVat'] = None

        # set to None if next_invoice_amount_accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.next_invoice_amount_accuracy is None and "next_invoice_amount_accuracy" in self.model_fields_set:
            _dict['nextInvoiceAmountAccuracy'] = None

        # set to None if recalculation_type (nullable) is None
        # and model_fields_set contains the field
        if self.recalculation_type is None and "recalculation_type" in self.model_fields_set:
            _dict['recalculationType'] = None

        # set to None if fallback_reason (nullable) is None
        # and model_fields_set contains the field
        if self.fallback_reason is None and "fallback_reason" in self.model_fields_set:
            _dict['fallbackReason'] = None

        # set to None if changed_by_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.changed_by_user_id is None and "changed_by_user_id" in self.model_fields_set:
            _dict['changedByUserId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvanceCalculationDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newAdvanceAmountExclVAT": obj.get("newAdvanceAmountExclVAT"),
            "newAdvanceAmountInclVAT": obj.get("newAdvanceAmountInclVAT"),
            "oldAdvanceAmountInclVAT": obj.get("oldAdvanceAmountInclVAT"),
            "nextInvoiceAmountInclVat": obj.get("nextInvoiceAmountInclVat"),
            "nextInvoiceAmountAccuracy": obj.get("nextInvoiceAmountAccuracy"),
            "recalculationType": obj.get("recalculationType"),
            "fallbackReason": obj.get("fallbackReason"),
            "changedByUserId": obj.get("changedByUserId")
        })
        return _obj


