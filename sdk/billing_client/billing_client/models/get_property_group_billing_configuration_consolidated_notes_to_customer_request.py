# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.culture_info import CultureInfo
from typing import Optional, Set
from typing_extensions import Self

class GetPropertyGroupBillingConfigurationConsolidatedNotesToCustomerRequest(BaseModel):
    """
    Represents a request to get consolidated notes to customer for property group billing configurations.  This DTO is used to retrieve combined notes that will be displayed to customers for multiple property groups.
    """ # noqa: E501
    property_group_ids: Optional[List[StrictStr]] = Field(default=None, description="List of property group IDs for which to retrieve consolidated notes.", alias="propertyGroupIds")
    culture: Optional[CultureInfo] = Field(default=None, description="The culture to use for formatting the notes. If null, the system will use the default culture.")
    __properties: ClassVar[List[str]] = ["propertyGroupIds", "culture"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPropertyGroupBillingConfigurationConsolidatedNotesToCustomerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if property_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_ids is None and "property_group_ids" in self.model_fields_set:
            _dict['propertyGroupIds'] = None

        # set to None if culture (nullable) is None
        # and model_fields_set contains the field
        if self.culture is None and "culture" in self.model_fields_set:
            _dict['culture'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPropertyGroupBillingConfigurationConsolidatedNotesToCustomerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyGroupIds": obj.get("propertyGroupIds"),
            "culture": obj.get("culture")
        })
        return _obj


