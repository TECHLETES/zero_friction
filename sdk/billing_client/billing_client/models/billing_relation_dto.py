# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.advance_details_dto import AdvanceDetailsDTO
from billing_client.models.billing_contract_dto import BillingContractDTO
from billing_client.models.block_details_dto import BlockDetailsDTO
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.invoice_details_dto import InvoiceDetailsDTO
from billing_client.models.payment_method import PaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class BillingRelationDTO(BaseModel):
    """
    Represents a billing relation between a customer and their billing configuration.  This DTO contains all the necessary information about how a customer should be billed,  including payment terms, advance details, invoice details, and contract information.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the billing relation.")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor associated with this billing relation.")
    payment_terms_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the payment terms.", alias="paymentTermsId")
    payment_method: Optional[PaymentMethod] = Field(default=None, description="The payment method to be used for this billing relation.", alias="paymentMethod")
    advance_details: Optional[AdvanceDetailsDTO] = Field(default=None, description="Details about advance payments for this billing relation.", alias="advanceDetails")
    invoice_details: Optional[InvoiceDetailsDTO] = Field(default=None, description="Details about invoice generation for this billing relation.", alias="invoiceDetails")
    contract: Optional[BillingContractDTO] = Field(default=None, description="Information about the contract associated with this billing relation.")
    contract_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the contract.", alias="contractStartDateTime")
    contract_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the contract.", alias="contractEndDateTime")
    block_details: Optional[BlockDetailsDTO] = Field(default=None, description="Details about any blocking status for this billing relation.", alias="blockDetails")
    expect_advances_to_be_imported_periodically: Optional[StrictBool] = Field(default=None, description="Indicates whether advances are expected to be imported periodically.", alias="expectAdvancesToBeImportedPeriodically")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone for this billing relation.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["id", "debtor", "paymentTermsId", "paymentMethod", "advanceDetails", "invoiceDetails", "contract", "contractStartDateTime", "contractEndDateTime", "blockDetails", "expectAdvancesToBeImportedPeriodically", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingRelationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advance_details
        if self.advance_details:
            _dict['advanceDetails'] = self.advance_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_details
        if self.invoice_details:
            _dict['invoiceDetails'] = self.invoice_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of block_details
        if self.block_details:
            _dict['blockDetails'] = self.block_details.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['paymentMethod'] = None

        # set to None if advance_details (nullable) is None
        # and model_fields_set contains the field
        if self.advance_details is None and "advance_details" in self.model_fields_set:
            _dict['advanceDetails'] = None

        # set to None if invoice_details (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_details is None and "invoice_details" in self.model_fields_set:
            _dict['invoiceDetails'] = None

        # set to None if contract (nullable) is None
        # and model_fields_set contains the field
        if self.contract is None and "contract" in self.model_fields_set:
            _dict['contract'] = None

        # set to None if block_details (nullable) is None
        # and model_fields_set contains the field
        if self.block_details is None and "block_details" in self.model_fields_set:
            _dict['blockDetails'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingRelationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "paymentTermsId": obj.get("paymentTermsId"),
            "paymentMethod": obj.get("paymentMethod"),
            "advanceDetails": AdvanceDetailsDTO.from_dict(obj["advanceDetails"]) if obj.get("advanceDetails") is not None else None,
            "invoiceDetails": InvoiceDetailsDTO.from_dict(obj["invoiceDetails"]) if obj.get("invoiceDetails") is not None else None,
            "contract": BillingContractDTO.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "contractStartDateTime": obj.get("contractStartDateTime"),
            "contractEndDateTime": obj.get("contractEndDateTime"),
            "blockDetails": BlockDetailsDTO.from_dict(obj["blockDetails"]) if obj.get("blockDetails") is not None else None,
            "expectAdvancesToBeImportedPeriodically": obj.get("expectAdvancesToBeImportedPeriodically"),
            "timeZone": obj.get("timeZone")
        })
        return _obj


