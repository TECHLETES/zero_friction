# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.create_invoice_lines_request import CreateInvoiceLinesRequest
from billing_client.models.invoice_status import InvoiceStatus
from billing_client.models.invoice_type import InvoiceType
from billing_client.models.payment_method import PaymentMethod
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.sent_status import SentStatus
from typing import Optional, Set
from typing_extensions import Self

class CreateInvoiceRequest(BaseModel):
    """
    Represents a request to create a new invoice.  This DTO contains all the necessary information to create a complete invoice including header details and line items.
    """ # noqa: E501
    invoice_num: Optional[StrictStr] = Field(default=None, description="The unique invoice number assigned to this invoice.", alias="invoiceNum")
    status: Optional[InvoiceStatus] = Field(default=None, description="The current status of the invoice.")
    invoice_date: Optional[datetime] = Field(default=None, description="The date when the invoice was created.", alias="invoiceDate")
    invoice_type: Optional[InvoiceType] = Field(default=None, description="The type of invoice (e.g., regular, credit note, etc.).", alias="invoiceType")
    remaining_invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining amount to be paid on this invoice.", alias="remainingInvoiceAmount")
    total_invoice_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total invoice amount excluding VAT.", alias="totalInvoiceAmountExclVAT")
    total_invoice_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total invoice amount including VAT.", alias="totalInvoiceAmountInclVAT")
    contract_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the associated contract.", alias="contractId")
    credited_invoice_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice being credited (if this is a credit note).", alias="creditedInvoiceId")
    contract_number: Optional[StrictStr] = Field(default=None, description="The contract number associated with this invoice.", alias="contractNumber")
    customer_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the customer.", alias="customerId")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the company's bank account for receiving payments.", alias="companyBankAccountId")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this invoice.", alias="propertyGroups")
    payment_method: Optional[PaymentMethod] = Field(default=None, description="The method of payment for this invoice.", alias="paymentMethod")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The payment reference number for tracking payments.", alias="paymentReference")
    external_reference: Optional[StrictStr] = Field(default=None, description="An external reference number for integration with other systems.", alias="externalReference")
    period_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the billing period.", alias="periodStartDateTime")
    period_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the billing period.", alias="periodEndDateTime")
    due_date: Optional[datetime] = Field(default=None, description="The date when the invoice payment is due.", alias="dueDate")
    note_to_customer: Optional[StrictStr] = Field(default=None, description="Additional notes or comments for the customer.", alias="noteToCustomer")
    sent: Optional[SentStatus] = Field(default=None, description="The current sent status of the invoice.")
    lines: Optional[List[CreateInvoiceLinesRequest]] = Field(default=None, description="List of line items in the invoice.")
    __properties: ClassVar[List[str]] = ["invoiceNum", "status", "invoiceDate", "invoiceType", "remainingInvoiceAmount", "totalInvoiceAmountExclVAT", "totalInvoiceAmountInclVAT", "contractId", "creditedInvoiceId", "contractNumber", "customerId", "companyBankAccountId", "propertyGroups", "paymentMethod", "paymentReference", "externalReference", "periodStartDateTime", "periodEndDateTime", "dueDate", "noteToCustomer", "sent", "lines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # set to None if invoice_num (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_num is None and "invoice_num" in self.model_fields_set:
            _dict['invoiceNum'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if invoice_type (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_type is None and "invoice_type" in self.model_fields_set:
            _dict['invoiceType'] = None

        # set to None if remaining_invoice_amount (nullable) is None
        # and model_fields_set contains the field
        if self.remaining_invoice_amount is None and "remaining_invoice_amount" in self.model_fields_set:
            _dict['remainingInvoiceAmount'] = None

        # set to None if total_invoice_amount_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.total_invoice_amount_excl_vat is None and "total_invoice_amount_excl_vat" in self.model_fields_set:
            _dict['totalInvoiceAmountExclVAT'] = None

        # set to None if total_invoice_amount_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.total_invoice_amount_incl_vat is None and "total_invoice_amount_incl_vat" in self.model_fields_set:
            _dict['totalInvoiceAmountInclVAT'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if credited_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.credited_invoice_id is None and "credited_invoice_id" in self.model_fields_set:
            _dict['creditedInvoiceId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['paymentMethod'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_reference is None and "external_reference" in self.model_fields_set:
            _dict['externalReference'] = None

        # set to None if note_to_customer (nullable) is None
        # and model_fields_set contains the field
        if self.note_to_customer is None and "note_to_customer" in self.model_fields_set:
            _dict['noteToCustomer'] = None

        # set to None if sent (nullable) is None
        # and model_fields_set contains the field
        if self.sent is None and "sent" in self.model_fields_set:
            _dict['sent'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['lines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceNum": obj.get("invoiceNum"),
            "status": obj.get("status"),
            "invoiceDate": obj.get("invoiceDate"),
            "invoiceType": obj.get("invoiceType"),
            "remainingInvoiceAmount": obj.get("remainingInvoiceAmount"),
            "totalInvoiceAmountExclVAT": obj.get("totalInvoiceAmountExclVAT"),
            "totalInvoiceAmountInclVAT": obj.get("totalInvoiceAmountInclVAT"),
            "contractId": obj.get("contractId"),
            "creditedInvoiceId": obj.get("creditedInvoiceId"),
            "contractNumber": obj.get("contractNumber"),
            "customerId": obj.get("customerId"),
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "paymentMethod": obj.get("paymentMethod"),
            "paymentReference": obj.get("paymentReference"),
            "externalReference": obj.get("externalReference"),
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "dueDate": obj.get("dueDate"),
            "noteToCustomer": obj.get("noteToCustomer"),
            "sent": obj.get("sent"),
            "lines": [CreateInvoiceLinesRequest.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None
        })
        return _obj


