# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.consumption_calculation_measurement_dto import ConsumptionCalculationMeasurementDTO
from billing_client.models.metering_type import MeteringType
from billing_client.models.unit_of_measure import UnitOfMeasure
from billing_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class ConsumptionCalculationInputDTO(BaseModel):
    """
    Represents input data for consumption calculations
    """ # noqa: E501
    service_location_id: Optional[StrictStr] = Field(default=None, description="Identifier of the service location", alias="serviceLocationId")
    external_channel_identifier: Optional[StrictStr] = Field(default=None, description="External channel identifier", alias="externalChannelIdentifier")
    meter_serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the meter", alias="meterSerialNumber")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone for the measurements", alias="timeZone")
    utility_type: Optional[UtilityType] = Field(default=None, description="Type of utility being measured", alias="utilityType")
    metering_type: Optional[MeteringType] = Field(default=None, description="Type of metering used", alias="meteringType")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, description="Unit of measure for the measurements", alias="unitOfMeasure")
    time_of_use: Optional[StrictStr] = Field(default=None, description="Time of use identifier", alias="timeOfUse")
    first_measurement: Optional[ConsumptionCalculationMeasurementDTO] = Field(default=None, description="First measurement in the period", alias="firstMeasurement")
    second_measurement: Optional[ConsumptionCalculationMeasurementDTO] = Field(default=None, description="Second measurement in the period", alias="secondMeasurement")
    consumption_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Calculated consumption value", alias="consumptionValue")
    start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the calculation period", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the calculation period", alias="endDateTime")
    __properties: ClassVar[List[str]] = ["serviceLocationId", "externalChannelIdentifier", "meterSerialNumber", "timeZone", "utilityType", "meteringType", "unitOfMeasure", "timeOfUse", "firstMeasurement", "secondMeasurement", "consumptionValue", "startDateTime", "endDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsumptionCalculationInputDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_measurement
        if self.first_measurement:
            _dict['firstMeasurement'] = self.first_measurement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_measurement
        if self.second_measurement:
            _dict['secondMeasurement'] = self.second_measurement.to_dict()
        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if external_channel_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_channel_identifier is None and "external_channel_identifier" in self.model_fields_set:
            _dict['externalChannelIdentifier'] = None

        # set to None if meter_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.meter_serial_number is None and "meter_serial_number" in self.model_fields_set:
            _dict['meterSerialNumber'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if metering_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_type is None and "metering_type" in self.model_fields_set:
            _dict['meteringType'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if time_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.time_of_use is None and "time_of_use" in self.model_fields_set:
            _dict['timeOfUse'] = None

        # set to None if first_measurement (nullable) is None
        # and model_fields_set contains the field
        if self.first_measurement is None and "first_measurement" in self.model_fields_set:
            _dict['firstMeasurement'] = None

        # set to None if second_measurement (nullable) is None
        # and model_fields_set contains the field
        if self.second_measurement is None and "second_measurement" in self.model_fields_set:
            _dict['secondMeasurement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsumptionCalculationInputDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceLocationId": obj.get("serviceLocationId"),
            "externalChannelIdentifier": obj.get("externalChannelIdentifier"),
            "meterSerialNumber": obj.get("meterSerialNumber"),
            "timeZone": obj.get("timeZone"),
            "utilityType": obj.get("utilityType"),
            "meteringType": obj.get("meteringType"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "timeOfUse": obj.get("timeOfUse"),
            "firstMeasurement": ConsumptionCalculationMeasurementDTO.from_dict(obj["firstMeasurement"]) if obj.get("firstMeasurement") is not None else None,
            "secondMeasurement": ConsumptionCalculationMeasurementDTO.from_dict(obj["secondMeasurement"]) if obj.get("secondMeasurement") is not None else None,
            "consumptionValue": obj.get("consumptionValue"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime")
        })
        return _obj


