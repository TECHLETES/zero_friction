# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.collection_case_details_dto import CollectionCaseDetailsDTO
from billing_client.models.customer_type import CustomerType
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class CustAgingLineDTO(BaseModel):
    """
    Represents a detailed line item in the customer aging analysis.  This DTO contains information about individual transactions and their aging status.
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the transaction.", alias="transactionId")
    transaction_reference_type: Optional[StrictStr] = Field(default=None, description="The type of reference for this transaction (e.g., invoice, credit note).", alias="transactionReferenceType")
    transaction_reference_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the referenced transaction.", alias="transactionReferenceId")
    reference_number: Optional[StrictStr] = Field(default=None, description="The reference number associated with this transaction.", alias="referenceNumber")
    open_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining open amount for this transaction.", alias="openAmount")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for this transaction.", alias="displayName")
    customer_account_number: Optional[StrictStr] = Field(default=None, description="The account number of the customer associated with this transaction.", alias="customerAccountNumber")
    customer_type: Optional[CustomerType] = Field(default=None, description="The type of customer associated with this transaction.", alias="customerType")
    transaction_type: Optional[TransactionType] = Field(default=None, description="The type of transaction (e.g., debit, credit).", alias="transactionType")
    transaction_date: Optional[datetime] = Field(default=None, description="The date when this transaction was created.", alias="transactionDate")
    transaction_due_date: Optional[datetime] = Field(default=None, description="The date when this transaction is due for payment.", alias="transactionDueDate")
    open_credit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The open credit amount for this transaction.", alias="openCredit")
    total_open_not_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount that is open but not yet overdue.", alias="totalOpenNotOverdue")
    total_overdue30_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount overdue between 0 and 30 days.", alias="totalOverdue30D")
    total_overdue60_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount overdue between 30 and 60 days.", alias="totalOverdue60D")
    total_overdue90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount overdue between 60 and 90 days.", alias="totalOverdue90D")
    total_overdue_over90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount overdue for more than 90 days.", alias="totalOverdueOver90D")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this transaction.", alias="propertyGroups")
    collection_case_details: Optional[CollectionCaseDetailsDTO] = Field(default=None, description="Details about any collection case associated with this transaction.", alias="collectionCaseDetails")
    __properties: ClassVar[List[str]] = ["transactionId", "transactionReferenceType", "transactionReferenceId", "referenceNumber", "openAmount", "displayName", "customerAccountNumber", "customerType", "transactionType", "transactionDate", "transactionDueDate", "openCredit", "totalOpenNotOverdue", "totalOverdue30D", "totalOverdue60D", "totalOverdue90D", "totalOverdueOver90D", "propertyGroups", "collectionCaseDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustAgingLineDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of collection_case_details
        if self.collection_case_details:
            _dict['collectionCaseDetails'] = self.collection_case_details.to_dict()
        # set to None if transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_id is None and "transaction_id" in self.model_fields_set:
            _dict['transactionId'] = None

        # set to None if transaction_reference_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_reference_type is None and "transaction_reference_type" in self.model_fields_set:
            _dict['transactionReferenceType'] = None

        # set to None if transaction_reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_reference_id is None and "transaction_reference_id" in self.model_fields_set:
            _dict['transactionReferenceId'] = None

        # set to None if reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_number is None and "reference_number" in self.model_fields_set:
            _dict['referenceNumber'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if customer_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.customer_account_number is None and "customer_account_number" in self.model_fields_set:
            _dict['customerAccountNumber'] = None

        # set to None if customer_type (nullable) is None
        # and model_fields_set contains the field
        if self.customer_type is None and "customer_type" in self.model_fields_set:
            _dict['customerType'] = None

        # set to None if transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_type is None and "transaction_type" in self.model_fields_set:
            _dict['transactionType'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if collection_case_details (nullable) is None
        # and model_fields_set contains the field
        if self.collection_case_details is None and "collection_case_details" in self.model_fields_set:
            _dict['collectionCaseDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustAgingLineDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionId": obj.get("transactionId"),
            "transactionReferenceType": obj.get("transactionReferenceType"),
            "transactionReferenceId": obj.get("transactionReferenceId"),
            "referenceNumber": obj.get("referenceNumber"),
            "openAmount": obj.get("openAmount"),
            "displayName": obj.get("displayName"),
            "customerAccountNumber": obj.get("customerAccountNumber"),
            "customerType": obj.get("customerType"),
            "transactionType": obj.get("transactionType"),
            "transactionDate": obj.get("transactionDate"),
            "transactionDueDate": obj.get("transactionDueDate"),
            "openCredit": obj.get("openCredit"),
            "totalOpenNotOverdue": obj.get("totalOpenNotOverdue"),
            "totalOverdue30D": obj.get("totalOverdue30D"),
            "totalOverdue60D": obj.get("totalOverdue60D"),
            "totalOverdue90D": obj.get("totalOverdue90D"),
            "totalOverdueOver90D": obj.get("totalOverdueOver90D"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "collectionCaseDetails": CollectionCaseDetailsDTO.from_dict(obj["collectionCaseDetails"]) if obj.get("collectionCaseDetails") is not None else None
        })
        return _obj


