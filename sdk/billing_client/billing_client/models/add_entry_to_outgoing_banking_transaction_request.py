# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AddEntryToOutgoingBankingTransactionRequest(BaseModel):
    """
    Represents a request to add a new entry to an outgoing banking transaction.  This DTO supports two types of entries: invoice-based or manual entries with custom details.
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="The ID of the invoice to be included in the transaction.  This field is required if no manual entry details are provided.", alias="invoiceId")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount for the manual entry.  Required when no invoice ID is provided.")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The payment reference text for the manual entry.  Required when no invoice ID is provided.", alias="paymentReference")
    iban: Optional[StrictStr] = Field(default=None, description="The IBAN (International Bank Account Number) for the manual entry.  Required when no invoice ID is provided.")
    customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer associated with the manual entry.  Required when no invoice ID is provided.", alias="customerId")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the transaction to add the entry to.", alias="transactionId")
    __properties: ClassVar[List[str]] = ["invoiceId", "amount", "paymentReference", "iban", "customerId", "transactionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddEntryToOutgoingBankingTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_id is None and "transaction_id" in self.model_fields_set:
            _dict['transactionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddEntryToOutgoingBankingTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceId": obj.get("invoiceId"),
            "amount": obj.get("amount"),
            "paymentReference": obj.get("paymentReference"),
            "iban": obj.get("iban"),
            "customerId": obj.get("customerId"),
            "transactionId": obj.get("transactionId")
        })
        return _obj


