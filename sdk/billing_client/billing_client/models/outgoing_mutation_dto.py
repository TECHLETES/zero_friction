# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.localised_error_dto import LocalisedErrorDTO
from billing_client.models.outgoing_banking_transaction_type import OutgoingBankingTransactionType
from billing_client.models.outgoing_mutation_customer_bank_account_dto import OutgoingMutationCustomerBankAccountDTO
from billing_client.models.outgoing_mutation_reference_details_dto import OutgoingMutationReferenceDetailsDTO
from billing_client.models.outgoing_mutation_status import OutgoingMutationStatus
from typing import Optional, Set
from typing_extensions import Self

class OutgoingMutationDTO(BaseModel):
    """
    Represents an outgoing mutation in the banking system.  This DTO contains comprehensive information about the mutation, including its status, amount, and related transactions.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    outgoing_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the associated outgoing banking transaction.", alias="outgoingBankingTransactionId")
    type: Optional[OutgoingBankingTransactionType] = Field(default=None, description="The type of outgoing banking transaction.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the mutation.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the mutation.")
    reference_details: Optional[OutgoingMutationReferenceDetailsDTO] = Field(default=None, description="Reference details associated with this mutation.", alias="referenceDetails")
    customer_bank_account: Optional[OutgoingMutationCustomerBankAccountDTO] = Field(default=None, description="Information about the customer's bank account.", alias="customerBankAccount")
    status: Optional[OutgoingMutationStatus] = Field(default=None, description="The current status of the outgoing mutation.")
    errors: Optional[List[LocalisedErrorDTO]] = Field(default=None, description="List of localized errors associated with this mutation.")
    confirming_incoming_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the incoming banking transaction that confirms this mutation.", alias="confirmingIncomingBankingTransactionId")
    confirming_incoming_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="The identification of the incoming banking transaction that confirms this mutation.", alias="confirmingIncomingBankingTransactionIdentification")
    confirming_incoming_mutation_id: Optional[StrictStr] = Field(default=None, description="The ID of the incoming mutation that confirms this mutation.", alias="confirmingIncomingMutationId")
    reverting_incoming_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the incoming banking transaction that reverts this mutation.", alias="revertingIncomingBankingTransactionId")
    reverting_incoming_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="The identification of the incoming banking transaction that reverts this mutation.", alias="revertingIncomingBankingTransactionIdentification")
    reverting_incoming_mutation_id: Optional[StrictStr] = Field(default=None, description="The ID of the incoming mutation that reverts this mutation.", alias="revertingIncomingMutationId")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "outgoingBankingTransactionId", "type", "amount", "description", "referenceDetails", "customerBankAccount", "status", "errors", "confirmingIncomingBankingTransactionId", "confirmingIncomingBankingTransactionIdentification", "confirmingIncomingMutationId", "revertingIncomingBankingTransactionId", "revertingIncomingBankingTransactionIdentification", "revertingIncomingMutationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutgoingMutationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reference_details
        if self.reference_details:
            _dict['referenceDetails'] = self.reference_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_bank_account
        if self.customer_bank_account:
            _dict['customerBankAccount'] = self.customer_bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if outgoing_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_id is None and "outgoing_banking_transaction_id" in self.model_fields_set:
            _dict['outgoingBankingTransactionId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if reference_details (nullable) is None
        # and model_fields_set contains the field
        if self.reference_details is None and "reference_details" in self.model_fields_set:
            _dict['referenceDetails'] = None

        # set to None if customer_bank_account (nullable) is None
        # and model_fields_set contains the field
        if self.customer_bank_account is None and "customer_bank_account" in self.model_fields_set:
            _dict['customerBankAccount'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if confirming_incoming_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.confirming_incoming_banking_transaction_id is None and "confirming_incoming_banking_transaction_id" in self.model_fields_set:
            _dict['confirmingIncomingBankingTransactionId'] = None

        # set to None if confirming_incoming_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.confirming_incoming_banking_transaction_identification is None and "confirming_incoming_banking_transaction_identification" in self.model_fields_set:
            _dict['confirmingIncomingBankingTransactionIdentification'] = None

        # set to None if confirming_incoming_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.confirming_incoming_mutation_id is None and "confirming_incoming_mutation_id" in self.model_fields_set:
            _dict['confirmingIncomingMutationId'] = None

        # set to None if reverting_incoming_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.reverting_incoming_banking_transaction_id is None and "reverting_incoming_banking_transaction_id" in self.model_fields_set:
            _dict['revertingIncomingBankingTransactionId'] = None

        # set to None if reverting_incoming_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.reverting_incoming_banking_transaction_identification is None and "reverting_incoming_banking_transaction_identification" in self.model_fields_set:
            _dict['revertingIncomingBankingTransactionIdentification'] = None

        # set to None if reverting_incoming_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.reverting_incoming_mutation_id is None and "reverting_incoming_mutation_id" in self.model_fields_set:
            _dict['revertingIncomingMutationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutgoingMutationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "outgoingBankingTransactionId": obj.get("outgoingBankingTransactionId"),
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "description": obj.get("description"),
            "referenceDetails": OutgoingMutationReferenceDetailsDTO.from_dict(obj["referenceDetails"]) if obj.get("referenceDetails") is not None else None,
            "customerBankAccount": OutgoingMutationCustomerBankAccountDTO.from_dict(obj["customerBankAccount"]) if obj.get("customerBankAccount") is not None else None,
            "status": obj.get("status"),
            "errors": [LocalisedErrorDTO.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "confirmingIncomingBankingTransactionId": obj.get("confirmingIncomingBankingTransactionId"),
            "confirmingIncomingBankingTransactionIdentification": obj.get("confirmingIncomingBankingTransactionIdentification"),
            "confirmingIncomingMutationId": obj.get("confirmingIncomingMutationId"),
            "revertingIncomingBankingTransactionId": obj.get("revertingIncomingBankingTransactionId"),
            "revertingIncomingBankingTransactionIdentification": obj.get("revertingIncomingBankingTransactionIdentification"),
            "revertingIncomingMutationId": obj.get("revertingIncomingMutationId")
        })
        return _obj


