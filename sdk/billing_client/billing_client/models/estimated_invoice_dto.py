# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.estimated_advance_period_dto import EstimatedAdvancePeriodDTO
from billing_client.models.estimated_invoice_line_dto import EstimatedInvoiceLineDTO
from billing_client.models.level import Level
from billing_client.models.product_reference_dto import ProductReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class EstimatedInvoiceDTO(BaseModel):
    """
    Represents an estimated invoice for a customer.  This DTO contains information about the estimated charges, periods, and accuracy of the estimation.
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the customer.", alias="customerId")
    contract_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the contract.", alias="contractId")
    original_billing_completeness_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the original billing completeness record.", alias="originalBillingCompletenessId")
    product: Optional[ProductReferenceDTO] = Field(default=None, description="Reference to the product associated with this estimated invoice.")
    calculation_date: Optional[datetime] = Field(default=None, description="The date and time when this estimation was calculated.", alias="calculationDate")
    period_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the billing period.", alias="periodEndDateTime")
    period_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the billing period.", alias="periodStartDateTime")
    total_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount including VAT.", alias="totalAmountInclVAT")
    total_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount excluding VAT.", alias="totalAmountExclVAT")
    total_vat_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total VAT amount.", alias="totalVATAmount")
    remaining_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The remaining amount to be billed.", alias="remainingAmount")
    lines: Optional[List[EstimatedInvoiceLineDTO]] = Field(default=None, description="List of line items in the estimated invoice.")
    advances: Optional[List[EstimatedAdvancePeriodDTO]] = Field(default=None, description="List of advance periods associated with this estimated invoice.")
    accuracy: Optional[Level] = Field(default=None, description="The accuracy level of this estimation.")
    __properties: ClassVar[List[str]] = ["customerId", "contractId", "originalBillingCompletenessId", "product", "calculationDate", "periodEndDateTime", "periodStartDateTime", "totalAmountInclVAT", "totalAmountExclVAT", "totalVATAmount", "remainingAmount", "lines", "advances", "accuracy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EstimatedInvoiceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advances (list)
        _items = []
        if self.advances:
            for _item_advances in self.advances:
                if _item_advances:
                    _items.append(_item_advances.to_dict())
            _dict['advances'] = _items
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if original_billing_completeness_id (nullable) is None
        # and model_fields_set contains the field
        if self.original_billing_completeness_id is None and "original_billing_completeness_id" in self.model_fields_set:
            _dict['originalBillingCompletenessId'] = None

        # set to None if product (nullable) is None
        # and model_fields_set contains the field
        if self.product is None and "product" in self.model_fields_set:
            _dict['product'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['lines'] = None

        # set to None if advances (nullable) is None
        # and model_fields_set contains the field
        if self.advances is None and "advances" in self.model_fields_set:
            _dict['advances'] = None

        # set to None if accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.accuracy is None and "accuracy" in self.model_fields_set:
            _dict['accuracy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EstimatedInvoiceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "contractId": obj.get("contractId"),
            "originalBillingCompletenessId": obj.get("originalBillingCompletenessId"),
            "product": ProductReferenceDTO.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "calculationDate": obj.get("calculationDate"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "totalAmountInclVAT": obj.get("totalAmountInclVAT"),
            "totalAmountExclVAT": obj.get("totalAmountExclVAT"),
            "totalVATAmount": obj.get("totalVATAmount"),
            "remainingAmount": obj.get("remainingAmount"),
            "lines": [EstimatedInvoiceLineDTO.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "advances": [EstimatedAdvancePeriodDTO.from_dict(_item) for _item in obj["advances"]] if obj.get("advances") is not None else None,
            "accuracy": obj.get("accuracy")
        })
        return _obj


