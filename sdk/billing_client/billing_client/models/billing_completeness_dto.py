# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.advance_period_dto import AdvancePeriodDTO
from billing_client.models.billing_completeness_status import BillingCompletenessStatus
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.input_missing_details_dto import InputMissingDetailsDTO
from billing_client.models.invoice_type import InvoiceType
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.required_quantity_grouped_dto import RequiredQuantityGroupedDTO
from typing import Optional, Set
from typing_extensions import Self

class BillingCompletenessDTO(BaseModel):
    """
    Represents the completeness status of billing data for a contract
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    contract_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the contract", alias="contractId")
    contract_num: Optional[StrictStr] = Field(default=None, description="Contract number", alias="contractNum")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor")
    billing_relation_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the billing relation", alias="billingRelationId")
    period_start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the billing period", alias="periodStartDateTime")
    period_end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the billing period", alias="periodEndDateTime")
    status: Optional[BillingCompletenessStatus] = Field(default=None, description="Current status of billing completeness")
    input_missing_details: Optional[InputMissingDetailsDTO] = Field(default=None, description="Details about any missing input data", alias="inputMissingDetails")
    has_corrections: Optional[StrictBool] = Field(default=None, description="Indicates if there are any corrections made to the billing data", alias="hasCorrections")
    invoice_type: Optional[InvoiceType] = Field(default=None, description="Type of invoice being generated", alias="invoiceType")
    blocked: Optional[StrictBool] = Field(default=None, description="Indicates if the billing is currently blocked")
    required_quantities_grouped: Optional[RequiredQuantityGroupedDTO] = Field(default=None, description="Grouped required quantities for billing", alias="requiredQuantitiesGrouped")
    advance_periods: Optional[List[AdvancePeriodDTO]] = Field(default=None, description="List of advance payment periods", alias="advancePeriods")
    expect_advances_to_be_imported_periodically: Optional[StrictBool] = Field(default=None, description="Indicates if advances are expected to be imported periodically", alias="expectAdvancesToBeImportedPeriodically")
    cost_allocation_billable: Optional[StrictBool] = Field(default=None, description="Indicates if cost allocation is billable", alias="costAllocationBillable")
    invoicing_upfront: Optional[StrictBool] = Field(default=None, description="Indicates if invoicing is done upfront", alias="invoicingUpfront")
    invoicing_checkpoint_date_time: Optional[datetime] = Field(default=None, description="Date and time of the last invoicing checkpoint", alias="invoicingCheckpointDateTime")
    product_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the product", alias="productId")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this billing", alias="propertyGroups")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "contractId", "contractNum", "debtor", "billingRelationId", "periodStartDateTime", "periodEndDateTime", "status", "inputMissingDetails", "hasCorrections", "invoiceType", "blocked", "requiredQuantitiesGrouped", "advancePeriods", "expectAdvancesToBeImportedPeriodically", "costAllocationBillable", "invoicingUpfront", "invoicingCheckpointDateTime", "productId", "propertyGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingCompletenessDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_missing_details
        if self.input_missing_details:
            _dict['inputMissingDetails'] = self.input_missing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_quantities_grouped
        if self.required_quantities_grouped:
            _dict['requiredQuantitiesGrouped'] = self.required_quantities_grouped.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in advance_periods (list)
        _items = []
        if self.advance_periods:
            for _item_advance_periods in self.advance_periods:
                if _item_advance_periods:
                    _items.append(_item_advance_periods.to_dict())
            _dict['advancePeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if contract_num (nullable) is None
        # and model_fields_set contains the field
        if self.contract_num is None and "contract_num" in self.model_fields_set:
            _dict['contractNum'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if billing_relation_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_relation_id is None and "billing_relation_id" in self.model_fields_set:
            _dict['billingRelationId'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if input_missing_details (nullable) is None
        # and model_fields_set contains the field
        if self.input_missing_details is None and "input_missing_details" in self.model_fields_set:
            _dict['inputMissingDetails'] = None

        # set to None if invoice_type (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_type is None and "invoice_type" in self.model_fields_set:
            _dict['invoiceType'] = None

        # set to None if required_quantities_grouped (nullable) is None
        # and model_fields_set contains the field
        if self.required_quantities_grouped is None and "required_quantities_grouped" in self.model_fields_set:
            _dict['requiredQuantitiesGrouped'] = None

        # set to None if advance_periods (nullable) is None
        # and model_fields_set contains the field
        if self.advance_periods is None and "advance_periods" in self.model_fields_set:
            _dict['advancePeriods'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingCompletenessDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "contractId": obj.get("contractId"),
            "contractNum": obj.get("contractNum"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "billingRelationId": obj.get("billingRelationId"),
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "status": obj.get("status"),
            "inputMissingDetails": InputMissingDetailsDTO.from_dict(obj["inputMissingDetails"]) if obj.get("inputMissingDetails") is not None else None,
            "hasCorrections": obj.get("hasCorrections"),
            "invoiceType": obj.get("invoiceType"),
            "blocked": obj.get("blocked"),
            "requiredQuantitiesGrouped": RequiredQuantityGroupedDTO.from_dict(obj["requiredQuantitiesGrouped"]) if obj.get("requiredQuantitiesGrouped") is not None else None,
            "advancePeriods": [AdvancePeriodDTO.from_dict(_item) for _item in obj["advancePeriods"]] if obj.get("advancePeriods") is not None else None,
            "expectAdvancesToBeImportedPeriodically": obj.get("expectAdvancesToBeImportedPeriodically"),
            "costAllocationBillable": obj.get("costAllocationBillable"),
            "invoicingUpfront": obj.get("invoicingUpfront"),
            "invoicingCheckpointDateTime": obj.get("invoicingCheckpointDateTime"),
            "productId": obj.get("productId"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None
        })
        return _obj


