# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.payment_method import PaymentMethod
from billing_client.models.payment_process_status import PaymentProcessStatus
from billing_client.models.payment_status_history_dto import PaymentStatusHistoryDTO
from typing import Optional, Set
from typing_extensions import Self

class PaymentDetailsDTO(BaseModel):
    """
    Represents payment details for an invoice
    """ # noqa: E501
    paid: Optional[StrictBool] = Field(default=None, description="Indicates if the invoice has been paid")
    current_payment_status: Optional[PaymentProcessStatus] = Field(default=None, description="Current status of the payment process", alias="currentPaymentStatus")
    payment_reference: Optional[StrictStr] = Field(default=None, description="Payment reference number", alias="paymentReference")
    payment_method: Optional[PaymentMethod] = Field(default=None, description="Method of payment", alias="paymentMethod")
    direct_debit_collection_date: Optional[datetime] = Field(default=None, description="Date when direct debit will be collected", alias="directDebitCollectionDate")
    amount_of_times_retried: Optional[StrictInt] = Field(default=None, description="Number of times payment has been retried", alias="amountOfTimesRetried")
    status_history: Optional[List[PaymentStatusHistoryDTO]] = Field(default=None, description="History of payment status changes", alias="statusHistory")
    __properties: ClassVar[List[str]] = ["paid", "currentPaymentStatus", "paymentReference", "paymentMethod", "directDebitCollectionDate", "amountOfTimesRetried", "statusHistory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in status_history (list)
        _items = []
        if self.status_history:
            for _item_status_history in self.status_history:
                if _item_status_history:
                    _items.append(_item_status_history.to_dict())
            _dict['statusHistory'] = _items
        # set to None if current_payment_status (nullable) is None
        # and model_fields_set contains the field
        if self.current_payment_status is None and "current_payment_status" in self.model_fields_set:
            _dict['currentPaymentStatus'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['paymentMethod'] = None

        # set to None if status_history (nullable) is None
        # and model_fields_set contains the field
        if self.status_history is None and "status_history" in self.model_fields_set:
            _dict['statusHistory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paid": obj.get("paid"),
            "currentPaymentStatus": obj.get("currentPaymentStatus"),
            "paymentReference": obj.get("paymentReference"),
            "paymentMethod": obj.get("paymentMethod"),
            "directDebitCollectionDate": obj.get("directDebitCollectionDate"),
            "amountOfTimesRetried": obj.get("amountOfTimesRetried"),
            "statusHistory": [PaymentStatusHistoryDTO.from_dict(_item) for _item in obj["statusHistory"]] if obj.get("statusHistory") is not None else None
        })
        return _obj


