# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.outgoing_banking_transaction_type import OutgoingBankingTransactionType
from typing import Optional, Set
from typing_extensions import Self

class AssignInvoicesToOutgoingBankingTransactionRequest(BaseModel):
    """
    Represents a request to assign invoices to outgoing banking transactions.  This DTO supports both assigning specific invoices or all applicable invoices based on type.
    """ # noqa: E501
    all_applicable: Optional[StrictBool] = Field(default=None, description="Indicates whether all applicable invoices should be assigned.  Must be true if no specific invoice IDs are provided.", alias="allApplicable")
    outgoing_banking_transaction_type: Optional[OutgoingBankingTransactionType] = Field(default=None, description="The type of outgoing banking transaction to assign invoices to.", alias="outgoingBankingTransactionType")
    invoice_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of specific invoice IDs to assign.  Required if AllApplicable is false.", alias="invoiceIds")
    add_to_new_outgoing_banking_transactions: Optional[StrictBool] = Field(default=None, description="Indicates whether invoices should be added to new outgoing banking transactions.", alias="addToNewOutgoingBankingTransactions")
    overridden_collection_date: Optional[datetime] = Field(default=None, description="An optional override for the collection date of the transactions.  Can only be set when AddToNewOutgoingBankingTransactions is true.", alias="overriddenCollectionDate")
    __properties: ClassVar[List[str]] = ["allApplicable", "outgoingBankingTransactionType", "invoiceIds", "addToNewOutgoingBankingTransactions", "overriddenCollectionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignInvoicesToOutgoingBankingTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if outgoing_banking_transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_type is None and "outgoing_banking_transaction_type" in self.model_fields_set:
            _dict['outgoingBankingTransactionType'] = None

        # set to None if invoice_ids (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_ids is None and "invoice_ids" in self.model_fields_set:
            _dict['invoiceIds'] = None

        # set to None if overridden_collection_date (nullable) is None
        # and model_fields_set contains the field
        if self.overridden_collection_date is None and "overridden_collection_date" in self.model_fields_set:
            _dict['overriddenCollectionDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignInvoicesToOutgoingBankingTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allApplicable": obj.get("allApplicable"),
            "outgoingBankingTransactionType": obj.get("outgoingBankingTransactionType"),
            "invoiceIds": obj.get("invoiceIds"),
            "addToNewOutgoingBankingTransactions": obj.get("addToNewOutgoingBankingTransactions"),
            "overriddenCollectionDate": obj.get("overriddenCollectionDate")
        })
        return _obj


