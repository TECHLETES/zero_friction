# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.advance_frequency import AdvanceFrequency
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.incoming_invoice_component_dto import IncomingInvoiceComponentDTO
from billing_client.models.invoice_frequency import InvoiceFrequency
from billing_client.models.localisation_level import LocalisationLevel
from billing_client.models.property_group_calculation_configuration_dto import PropertyGroupCalculationConfigurationDTO
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class PropertyGroupBillingConfigurationDTO(BaseModel):
    """
    Represents a billing configuration for a property group.  This DTO contains comprehensive information about billing settings, including frequencies, components, and localization.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    property_group: Optional[PropertyGroupReferenceDTO] = Field(default=None, description="Reference to the property group associated with this configuration.", alias="propertyGroup")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the company bank account.", alias="companyBankAccountId")
    advance_frequency: Optional[AdvanceFrequency] = Field(default=None, description="The frequency at which advance payments are made.", alias="advanceFrequency")
    invoice_frequency: Optional[InvoiceFrequency] = Field(default=None, description="The frequency at which invoices are generated.", alias="invoiceFrequency")
    invoice_day: Optional[StrictInt] = Field(default=None, description="The day of the month when invoices are generated.", alias="invoiceDay")
    invoice_month: Optional[StrictInt] = Field(default=None, description="The month when invoices are generated (for yearly frequency).", alias="invoiceMonth")
    product_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the product.", alias="productId")
    payment_terms_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the payment terms.", alias="paymentTermsId")
    required_incoming_invoice_components: Optional[List[IncomingInvoiceComponentDTO]] = Field(default=None, description="List of required incoming invoice components.", alias="requiredIncomingInvoiceComponents")
    calculation_configurations: Optional[List[PropertyGroupCalculationConfigurationDTO]] = Field(default=None, description="List of calculation configurations for this property group.", alias="calculationConfigurations")
    cost_allocation_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether cost allocation is enabled for this configuration.", alias="costAllocationEnabled")
    cost_allocation_validated: Optional[StrictBool] = Field(default=None, description="Indicates whether the cost allocation has been validated.", alias="costAllocationValidated")
    note_to_customer: Optional[StrictStr] = Field(default=None, description="A note to be included for the customer.", alias="noteToCustomer")
    localisation_level: Optional[LocalisationLevel] = Field(default=None, description="The level of localization for this configuration.", alias="localisationLevel")
    localised_fields: Optional[List[StrictStr]] = Field(default=None, description="List of fields that have been localized.", alias="localisedFields")
    translated_fields: Optional[Dict[str, Optional[Dict[str, StrictStr]]]] = Field(default=None, description="Dictionary of translated fields by culture.", alias="translatedFields")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "propertyGroup", "companyBankAccountId", "advanceFrequency", "invoiceFrequency", "invoiceDay", "invoiceMonth", "productId", "paymentTermsId", "requiredIncomingInvoiceComponents", "calculationConfigurations", "costAllocationEnabled", "costAllocationValidated", "noteToCustomer", "localisationLevel", "localisedFields", "translatedFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropertyGroupBillingConfigurationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of property_group
        if self.property_group:
            _dict['propertyGroup'] = self.property_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in required_incoming_invoice_components (list)
        _items = []
        if self.required_incoming_invoice_components:
            for _item_required_incoming_invoice_components in self.required_incoming_invoice_components:
                if _item_required_incoming_invoice_components:
                    _items.append(_item_required_incoming_invoice_components.to_dict())
            _dict['requiredIncomingInvoiceComponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calculation_configurations (list)
        _items = []
        if self.calculation_configurations:
            for _item_calculation_configurations in self.calculation_configurations:
                if _item_calculation_configurations:
                    _items.append(_item_calculation_configurations.to_dict())
            _dict['calculationConfigurations'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if property_group (nullable) is None
        # and model_fields_set contains the field
        if self.property_group is None and "property_group" in self.model_fields_set:
            _dict['propertyGroup'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if advance_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.advance_frequency is None and "advance_frequency" in self.model_fields_set:
            _dict['advanceFrequency'] = None

        # set to None if invoice_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_frequency is None and "invoice_frequency" in self.model_fields_set:
            _dict['invoiceFrequency'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if required_incoming_invoice_components (nullable) is None
        # and model_fields_set contains the field
        if self.required_incoming_invoice_components is None and "required_incoming_invoice_components" in self.model_fields_set:
            _dict['requiredIncomingInvoiceComponents'] = None

        # set to None if calculation_configurations (nullable) is None
        # and model_fields_set contains the field
        if self.calculation_configurations is None and "calculation_configurations" in self.model_fields_set:
            _dict['calculationConfigurations'] = None

        # set to None if note_to_customer (nullable) is None
        # and model_fields_set contains the field
        if self.note_to_customer is None and "note_to_customer" in self.model_fields_set:
            _dict['noteToCustomer'] = None

        # set to None if localisation_level (nullable) is None
        # and model_fields_set contains the field
        if self.localisation_level is None and "localisation_level" in self.model_fields_set:
            _dict['localisationLevel'] = None

        # set to None if localised_fields (nullable) is None
        # and model_fields_set contains the field
        if self.localised_fields is None and "localised_fields" in self.model_fields_set:
            _dict['localisedFields'] = None

        # set to None if translated_fields (nullable) is None
        # and model_fields_set contains the field
        if self.translated_fields is None and "translated_fields" in self.model_fields_set:
            _dict['translatedFields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropertyGroupBillingConfigurationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "propertyGroup": PropertyGroupReferenceDTO.from_dict(obj["propertyGroup"]) if obj.get("propertyGroup") is not None else None,
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "advanceFrequency": obj.get("advanceFrequency"),
            "invoiceFrequency": obj.get("invoiceFrequency"),
            "invoiceDay": obj.get("invoiceDay"),
            "invoiceMonth": obj.get("invoiceMonth"),
            "productId": obj.get("productId"),
            "paymentTermsId": obj.get("paymentTermsId"),
            "requiredIncomingInvoiceComponents": [IncomingInvoiceComponentDTO.from_dict(_item) for _item in obj["requiredIncomingInvoiceComponents"]] if obj.get("requiredIncomingInvoiceComponents") is not None else None,
            "calculationConfigurations": [PropertyGroupCalculationConfigurationDTO.from_dict(_item) for _item in obj["calculationConfigurations"]] if obj.get("calculationConfigurations") is not None else None,
            "costAllocationEnabled": obj.get("costAllocationEnabled"),
            "costAllocationValidated": obj.get("costAllocationValidated"),
            "noteToCustomer": obj.get("noteToCustomer"),
            "localisationLevel": obj.get("localisationLevel"),
            "localisedFields": obj.get("localisedFields"),
            "translatedFields": obj.get("translatedFields")
        })
        return _obj


