# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.outgoing_banking_transaction_type import OutgoingBankingTransactionType
from billing_client.models.payment_reversal_reason import PaymentReversalReason
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.settlement_details_dto import SettlementDetailsDTO
from billing_client.models.transaction_reference_details_dto import TransactionReferenceDetailsDTO
from billing_client.models.transaction_sub_type import TransactionSubType
from billing_client.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class TransactionDTO(BaseModel):
    """
    Represents a transaction in the billing system
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    transaction_type: Optional[TransactionType] = Field(default=None, description="Type of the transaction", alias="transactionType")
    transaction_sub_type: Optional[TransactionSubType] = Field(default=None, description="Subtype of the transaction", alias="transactionSubType")
    transaction_date_time: Optional[datetime] = Field(default=None, description="Date and time when the transaction occurred", alias="transactionDateTime")
    transaction_due_date_time: Optional[datetime] = Field(default=None, description="Date and time when the transaction is due", alias="transactionDueDateTime")
    transaction_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of the transaction", alias="transactionAmount")
    transaction_open_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Remaining open amount of the transaction", alias="transactionOpenAmount")
    customer_id: Optional[StrictStr] = Field(default=None, description="Identifier of the customer", alias="customerId")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Debtor information")
    organisation_bank_account_id: Optional[StrictStr] = Field(default=None, description="Identifier of the organization's bank account (obsolete, for backwards compatibility)", alias="organisationBankAccountId")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="Identifier of the company's bank account", alias="companyBankAccountId")
    payment_reference: Optional[StrictStr] = Field(default=None, description="Payment reference number", alias="paymentReference")
    reference_details: Optional[TransactionReferenceDetailsDTO] = Field(default=None, description="Reference details for the transaction", alias="referenceDetails")
    settlement_details: Optional[SettlementDetailsDTO] = Field(default=None, description="Settlement details for the transaction", alias="settlementDetails")
    reversed: Optional[StrictBool] = Field(default=None, description="Indicates if the transaction has been reversed")
    reversal_reason: Optional[PaymentReversalReason] = Field(default=None, description="Reason for payment reversal", alias="reversalReason")
    reversal_additional_information: Optional[StrictStr] = Field(default=None, description="Additional information about the reversal", alias="reversalAdditionalInformation")
    automatically_closed: Optional[StrictBool] = Field(default=None, description="Indicates if the transaction was automatically closed", alias="automaticallyClosed")
    awaiting_bank_confirmation: Optional[StrictBool] = Field(default=None, description="Indicates if the transaction is awaiting bank confirmation", alias="awaitingBankConfirmation")
    awaiting_bank_confirmation_transaction_id: Optional[StrictStr] = Field(default=None, description="Identifier of the transaction awaiting bank confirmation", alias="awaitingBankConfirmationTransactionId")
    awaiting_bank_confirmation_transaction_identification: Optional[StrictStr] = Field(default=None, description="Identification of the transaction awaiting bank confirmation", alias="awaitingBankConfirmationTransactionIdentification")
    awaiting_bank_confirmation_transaction_type: Optional[OutgoingBankingTransactionType] = Field(default=None, description="Type of outgoing banking transaction awaiting confirmation", alias="awaitingBankConfirmationTransactionType")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of associated property groups", alias="propertyGroups")
    incoming_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="Identifier of the incoming banking transaction", alias="incomingBankingTransactionId")
    incoming_mutation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the incoming mutation", alias="incomingMutationId")
    outgoing_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="Identifier of the outgoing banking transaction", alias="outgoingBankingTransactionId")
    outgoing_mutation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the outgoing mutation", alias="outgoingMutationId")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "transactionType", "transactionSubType", "transactionDateTime", "transactionDueDateTime", "transactionAmount", "transactionOpenAmount", "customerId", "debtor", "organisationBankAccountId", "companyBankAccountId", "paymentReference", "referenceDetails", "settlementDetails", "reversed", "reversalReason", "reversalAdditionalInformation", "automaticallyClosed", "awaitingBankConfirmation", "awaitingBankConfirmationTransactionId", "awaitingBankConfirmationTransactionIdentification", "awaitingBankConfirmationTransactionType", "propertyGroups", "incomingBankingTransactionId", "incomingMutationId", "outgoingBankingTransactionId", "outgoingMutationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_details
        if self.reference_details:
            _dict['referenceDetails'] = self.reference_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settlement_details
        if self.settlement_details:
            _dict['settlementDetails'] = self.settlement_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_type is None and "transaction_type" in self.model_fields_set:
            _dict['transactionType'] = None

        # set to None if transaction_sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_sub_type is None and "transaction_sub_type" in self.model_fields_set:
            _dict['transactionSubType'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if organisation_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_bank_account_id is None and "organisation_bank_account_id" in self.model_fields_set:
            _dict['organisationBankAccountId'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if reference_details (nullable) is None
        # and model_fields_set contains the field
        if self.reference_details is None and "reference_details" in self.model_fields_set:
            _dict['referenceDetails'] = None

        # set to None if settlement_details (nullable) is None
        # and model_fields_set contains the field
        if self.settlement_details is None and "settlement_details" in self.model_fields_set:
            _dict['settlementDetails'] = None

        # set to None if reversal_reason (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_reason is None and "reversal_reason" in self.model_fields_set:
            _dict['reversalReason'] = None

        # set to None if reversal_additional_information (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_additional_information is None and "reversal_additional_information" in self.model_fields_set:
            _dict['reversalAdditionalInformation'] = None

        # set to None if awaiting_bank_confirmation_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.awaiting_bank_confirmation_transaction_id is None and "awaiting_bank_confirmation_transaction_id" in self.model_fields_set:
            _dict['awaitingBankConfirmationTransactionId'] = None

        # set to None if awaiting_bank_confirmation_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.awaiting_bank_confirmation_transaction_identification is None and "awaiting_bank_confirmation_transaction_identification" in self.model_fields_set:
            _dict['awaitingBankConfirmationTransactionIdentification'] = None

        # set to None if awaiting_bank_confirmation_transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.awaiting_bank_confirmation_transaction_type is None and "awaiting_bank_confirmation_transaction_type" in self.model_fields_set:
            _dict['awaitingBankConfirmationTransactionType'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if incoming_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_banking_transaction_id is None and "incoming_banking_transaction_id" in self.model_fields_set:
            _dict['incomingBankingTransactionId'] = None

        # set to None if incoming_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_mutation_id is None and "incoming_mutation_id" in self.model_fields_set:
            _dict['incomingMutationId'] = None

        # set to None if outgoing_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_id is None and "outgoing_banking_transaction_id" in self.model_fields_set:
            _dict['outgoingBankingTransactionId'] = None

        # set to None if outgoing_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_id is None and "outgoing_mutation_id" in self.model_fields_set:
            _dict['outgoingMutationId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "transactionType": obj.get("transactionType"),
            "transactionSubType": obj.get("transactionSubType"),
            "transactionDateTime": obj.get("transactionDateTime"),
            "transactionDueDateTime": obj.get("transactionDueDateTime"),
            "transactionAmount": obj.get("transactionAmount"),
            "transactionOpenAmount": obj.get("transactionOpenAmount"),
            "customerId": obj.get("customerId"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "organisationBankAccountId": obj.get("organisationBankAccountId"),
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "paymentReference": obj.get("paymentReference"),
            "referenceDetails": TransactionReferenceDetailsDTO.from_dict(obj["referenceDetails"]) if obj.get("referenceDetails") is not None else None,
            "settlementDetails": SettlementDetailsDTO.from_dict(obj["settlementDetails"]) if obj.get("settlementDetails") is not None else None,
            "reversed": obj.get("reversed"),
            "reversalReason": obj.get("reversalReason"),
            "reversalAdditionalInformation": obj.get("reversalAdditionalInformation"),
            "automaticallyClosed": obj.get("automaticallyClosed"),
            "awaitingBankConfirmation": obj.get("awaitingBankConfirmation"),
            "awaitingBankConfirmationTransactionId": obj.get("awaitingBankConfirmationTransactionId"),
            "awaitingBankConfirmationTransactionIdentification": obj.get("awaitingBankConfirmationTransactionIdentification"),
            "awaitingBankConfirmationTransactionType": obj.get("awaitingBankConfirmationTransactionType"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "incomingBankingTransactionId": obj.get("incomingBankingTransactionId"),
            "incomingMutationId": obj.get("incomingMutationId"),
            "outgoingBankingTransactionId": obj.get("outgoingBankingTransactionId"),
            "outgoingMutationId": obj.get("outgoingMutationId")
        })
        return _obj


