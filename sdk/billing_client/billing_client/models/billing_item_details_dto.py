# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.calculated_tariff_dto import CalculatedTariffDTO
from billing_client.models.formula_function_exception_dto import FormulaFunctionExceptionDTO
from typing import Optional, Set
from typing_extensions import Self

class BillingItemDetailsDTO(BaseModel):
    """
    Represents detailed information about a billing item.  Contains information about deviating tariffs and any execution errors.
    """ # noqa: E501
    billing_item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the billing item.", alias="billingItemId")
    deviating_tariffs: Optional[List[CalculatedTariffDTO]] = Field(default=None, description="List of tariffs that deviate from the standard calculation.", alias="deviatingTariffs")
    tariff_execution_errors: Optional[List[FormulaFunctionExceptionDTO]] = Field(default=None, description="List of errors that occurred during tariff calculation execution.", alias="tariffExecutionErrors")
    __properties: ClassVar[List[str]] = ["billingItemId", "deviatingTariffs", "tariffExecutionErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingItemDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deviating_tariffs (list)
        _items = []
        if self.deviating_tariffs:
            for _item_deviating_tariffs in self.deviating_tariffs:
                if _item_deviating_tariffs:
                    _items.append(_item_deviating_tariffs.to_dict())
            _dict['deviatingTariffs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tariff_execution_errors (list)
        _items = []
        if self.tariff_execution_errors:
            for _item_tariff_execution_errors in self.tariff_execution_errors:
                if _item_tariff_execution_errors:
                    _items.append(_item_tariff_execution_errors.to_dict())
            _dict['tariffExecutionErrors'] = _items
        # set to None if billing_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_id is None and "billing_item_id" in self.model_fields_set:
            _dict['billingItemId'] = None

        # set to None if deviating_tariffs (nullable) is None
        # and model_fields_set contains the field
        if self.deviating_tariffs is None and "deviating_tariffs" in self.model_fields_set:
            _dict['deviatingTariffs'] = None

        # set to None if tariff_execution_errors (nullable) is None
        # and model_fields_set contains the field
        if self.tariff_execution_errors is None and "tariff_execution_errors" in self.model_fields_set:
            _dict['tariffExecutionErrors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingItemDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingItemId": obj.get("billingItemId"),
            "deviatingTariffs": [CalculatedTariffDTO.from_dict(_item) for _item in obj["deviatingTariffs"]] if obj.get("deviatingTariffs") is not None else None,
            "tariffExecutionErrors": [FormulaFunctionExceptionDTO.from_dict(_item) for _item in obj["tariffExecutionErrors"]] if obj.get("tariffExecutionErrors") is not None else None
        })
        return _obj


