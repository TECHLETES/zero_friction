# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.invoice_type import InvoiceType
from billing_client.models.outgoing_banking_transaction_status import OutgoingBankingTransactionStatus
from billing_client.models.outgoing_banking_transaction_type import OutgoingBankingTransactionType
from billing_client.models.outgoing_mutation_status import OutgoingMutationStatus
from billing_client.models.outgoing_mutation_type import OutgoingMutationType
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class OutgoingBankingTransactionsExportDTO(BaseModel):
    """
    Represents an outgoing banking transaction for export purposes.  This DTO contains comprehensive information about the transaction, including company, customer, and invoice details.
    """ # noqa: E501
    transaction_identification: Optional[StrictStr] = Field(default=None, description="The unique identification of the outgoing banking transaction.", alias="transactionIdentification")
    transaction_type: Optional[OutgoingBankingTransactionType] = Field(default=None, description="The type of outgoing banking transaction.", alias="transactionType")
    transaction_status: Optional[OutgoingBankingTransactionStatus] = Field(default=None, description="The current status of the outgoing banking transaction.", alias="transactionStatus")
    transaction_collection_date: Optional[datetime] = Field(default=None, description="The date when the transaction collection is scheduled.", alias="transactionCollectionDate")
    transaction_total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the transaction.", alias="transactionTotalAmount")
    company_bank_account_holder: Optional[StrictStr] = Field(default=None, description="The name of the company bank account holder.", alias="companyBankAccountHolder")
    company_bank_account_iban: Optional[StrictStr] = Field(default=None, description="The IBAN of the company bank account.", alias="companyBankAccountIban")
    outgoing_mutation_type: Optional[OutgoingMutationType] = Field(default=None, description="The type of outgoing mutation.", alias="outgoingMutationType")
    outgoing_mutation_status: Optional[OutgoingMutationStatus] = Field(default=None, description="The current status of the outgoing mutation.", alias="outgoingMutationStatus")
    outgoing_mutation_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the outgoing mutation.", alias="outgoingMutationAmount")
    outgoing_mutation_decription: Optional[StrictStr] = Field(default=None, description="The description of the outgoing mutation.", alias="outgoingMutationDecription")
    customer_account_number: Optional[StrictStr] = Field(default=None, description="The account number of the customer.", alias="customerAccountNumber")
    customer_name: Optional[StrictStr] = Field(default=None, description="The name of the customer.", alias="customerName")
    customer_bank_account_iban: Optional[StrictStr] = Field(default=None, description="The IBAN of the customer's bank account.", alias="customerBankAccountIban")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this transaction.", alias="propertyGroups")
    invoice_number: Optional[StrictStr] = Field(default=None, description="The number of the associated invoice.", alias="invoiceNumber")
    invoice_date: Optional[datetime] = Field(default=None, description="The date when the invoice was issued.", alias="invoiceDate")
    invoice_due_date: Optional[datetime] = Field(default=None, description="The due date of the invoice.", alias="invoiceDueDate")
    invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the invoice.", alias="invoiceAmount")
    invoice_type: Optional[InvoiceType] = Field(default=None, description="The type of the invoice.", alias="invoiceType")
    invoice_period_start_date_time: Optional[datetime] = Field(default=None, description="The start date of the invoice period.", alias="invoicePeriodStartDateTime")
    invoice_period_end_date_time: Optional[datetime] = Field(default=None, description="The end date of the invoice period.", alias="invoicePeriodEndDateTime")
    __properties: ClassVar[List[str]] = ["transactionIdentification", "transactionType", "transactionStatus", "transactionCollectionDate", "transactionTotalAmount", "companyBankAccountHolder", "companyBankAccountIban", "outgoingMutationType", "outgoingMutationStatus", "outgoingMutationAmount", "outgoingMutationDecription", "customerAccountNumber", "customerName", "customerBankAccountIban", "propertyGroups", "invoiceNumber", "invoiceDate", "invoiceDueDate", "invoiceAmount", "invoiceType", "invoicePeriodStartDateTime", "invoicePeriodEndDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutgoingBankingTransactionsExportDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_identification is None and "transaction_identification" in self.model_fields_set:
            _dict['transactionIdentification'] = None

        # set to None if transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_type is None and "transaction_type" in self.model_fields_set:
            _dict['transactionType'] = None

        # set to None if transaction_status (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_status is None and "transaction_status" in self.model_fields_set:
            _dict['transactionStatus'] = None

        # set to None if company_bank_account_holder (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_holder is None and "company_bank_account_holder" in self.model_fields_set:
            _dict['companyBankAccountHolder'] = None

        # set to None if company_bank_account_iban (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_iban is None and "company_bank_account_iban" in self.model_fields_set:
            _dict['companyBankAccountIban'] = None

        # set to None if outgoing_mutation_type (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_type is None and "outgoing_mutation_type" in self.model_fields_set:
            _dict['outgoingMutationType'] = None

        # set to None if outgoing_mutation_status (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_status is None and "outgoing_mutation_status" in self.model_fields_set:
            _dict['outgoingMutationStatus'] = None

        # set to None if outgoing_mutation_decription (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_decription is None and "outgoing_mutation_decription" in self.model_fields_set:
            _dict['outgoingMutationDecription'] = None

        # set to None if customer_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.customer_account_number is None and "customer_account_number" in self.model_fields_set:
            _dict['customerAccountNumber'] = None

        # set to None if customer_name (nullable) is None
        # and model_fields_set contains the field
        if self.customer_name is None and "customer_name" in self.model_fields_set:
            _dict['customerName'] = None

        # set to None if customer_bank_account_iban (nullable) is None
        # and model_fields_set contains the field
        if self.customer_bank_account_iban is None and "customer_bank_account_iban" in self.model_fields_set:
            _dict['customerBankAccountIban'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_number is None and "invoice_number" in self.model_fields_set:
            _dict['invoiceNumber'] = None

        # set to None if invoice_date (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_date is None and "invoice_date" in self.model_fields_set:
            _dict['invoiceDate'] = None

        # set to None if invoice_due_date (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_due_date is None and "invoice_due_date" in self.model_fields_set:
            _dict['invoiceDueDate'] = None

        # set to None if invoice_amount (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_amount is None and "invoice_amount" in self.model_fields_set:
            _dict['invoiceAmount'] = None

        # set to None if invoice_type (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_type is None and "invoice_type" in self.model_fields_set:
            _dict['invoiceType'] = None

        # set to None if invoice_period_start_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_period_start_date_time is None and "invoice_period_start_date_time" in self.model_fields_set:
            _dict['invoicePeriodStartDateTime'] = None

        # set to None if invoice_period_end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_period_end_date_time is None and "invoice_period_end_date_time" in self.model_fields_set:
            _dict['invoicePeriodEndDateTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutgoingBankingTransactionsExportDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionIdentification": obj.get("transactionIdentification"),
            "transactionType": obj.get("transactionType"),
            "transactionStatus": obj.get("transactionStatus"),
            "transactionCollectionDate": obj.get("transactionCollectionDate"),
            "transactionTotalAmount": obj.get("transactionTotalAmount"),
            "companyBankAccountHolder": obj.get("companyBankAccountHolder"),
            "companyBankAccountIban": obj.get("companyBankAccountIban"),
            "outgoingMutationType": obj.get("outgoingMutationType"),
            "outgoingMutationStatus": obj.get("outgoingMutationStatus"),
            "outgoingMutationAmount": obj.get("outgoingMutationAmount"),
            "outgoingMutationDecription": obj.get("outgoingMutationDecription"),
            "customerAccountNumber": obj.get("customerAccountNumber"),
            "customerName": obj.get("customerName"),
            "customerBankAccountIban": obj.get("customerBankAccountIban"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "invoiceNumber": obj.get("invoiceNumber"),
            "invoiceDate": obj.get("invoiceDate"),
            "invoiceDueDate": obj.get("invoiceDueDate"),
            "invoiceAmount": obj.get("invoiceAmount"),
            "invoiceType": obj.get("invoiceType"),
            "invoicePeriodStartDateTime": obj.get("invoicePeriodStartDateTime"),
            "invoicePeriodEndDateTime": obj.get("invoicePeriodEndDateTime")
        })
        return _obj


