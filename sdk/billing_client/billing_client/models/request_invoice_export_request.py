# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.get_invoices_query_params import GetInvoicesQueryParams
from typing import Optional, Set
from typing_extensions import Self

class RequestInvoiceExportRequest(BaseModel):
    """
    Represents a request to export invoices.  This DTO is used to initiate the export of invoices based on specified criteria and configuration.
    """ # noqa: E501
    var_query_params: Optional[GetInvoicesQueryParams] = Field(default=None, description="Query parameters to filter the invoices to be exported.", alias="queryParams")
    quick_filter: Optional[StrictStr] = Field(default=None, description="Quick filter string to filter invoices without using complex query parameters.", alias="quickFilter")
    configured_plugin_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the configured export plugin to use for the export.", alias="configuredPluginId")
    mark_as_exported: Optional[StrictBool] = Field(default=None, description="Indicates whether the exported invoices should be marked as exported in the system.", alias="markAsExported")
    __properties: ClassVar[List[str]] = ["queryParams", "quickFilter", "configuredPluginId", "markAsExported"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestInvoiceExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_query_params
        if self.var_query_params:
            _dict['queryParams'] = self.var_query_params.to_dict()
        # set to None if var_query_params (nullable) is None
        # and model_fields_set contains the field
        if self.var_query_params is None and "var_query_params" in self.model_fields_set:
            _dict['queryParams'] = None

        # set to None if quick_filter (nullable) is None
        # and model_fields_set contains the field
        if self.quick_filter is None and "quick_filter" in self.model_fields_set:
            _dict['quickFilter'] = None

        # set to None if configured_plugin_id (nullable) is None
        # and model_fields_set contains the field
        if self.configured_plugin_id is None and "configured_plugin_id" in self.model_fields_set:
            _dict['configuredPluginId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestInvoiceExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queryParams": GetInvoicesQueryParams.from_dict(obj["queryParams"]) if obj.get("queryParams") is not None else None,
            "quickFilter": obj.get("quickFilter"),
            "configuredPluginId": obj.get("configuredPluginId"),
            "markAsExported": obj.get("markAsExported")
        })
        return _obj


