# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.sent_status import SentStatus
from typing import Optional, Set
from typing_extensions import Self

class AdvancePeriodDTO(BaseModel):
    """
    Represents an advance payment period
    """ # noqa: E501
    start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the advance period", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the advance period", alias="endDateTime")
    advance_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of the advance payment excluding VAT", alias="advanceAmountExclVAT")
    invoice_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the invoice", alias="invoiceId")
    invoice_num: Optional[StrictStr] = Field(default=None, description="Invoice number", alias="invoiceNum")
    invoice_date: Optional[datetime] = Field(default=None, description="Date of the invoice", alias="invoiceDate")
    sent_status: Optional[SentStatus] = Field(default=None, description="Current status of the invoice sending", alias="sentStatus")
    paid: Optional[StrictBool] = Field(default=None, description="Indicates if the advance has been paid")
    automatically_deleted: Optional[StrictBool] = Field(default=None, description="Indicates if the advance was automatically deleted", alias="automaticallyDeleted")
    manually_deleted: Optional[StrictBool] = Field(default=None, description="Indicates if the advance was manually deleted", alias="manuallyDeleted")
    __properties: ClassVar[List[str]] = ["startDateTime", "endDateTime", "advanceAmountExclVAT", "invoiceId", "invoiceNum", "invoiceDate", "sentStatus", "paid", "automaticallyDeleted", "manuallyDeleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancePeriodDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        # set to None if invoice_num (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_num is None and "invoice_num" in self.model_fields_set:
            _dict['invoiceNum'] = None

        # set to None if sent_status (nullable) is None
        # and model_fields_set contains the field
        if self.sent_status is None and "sent_status" in self.model_fields_set:
            _dict['sentStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancePeriodDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "advanceAmountExclVAT": obj.get("advanceAmountExclVAT"),
            "invoiceId": obj.get("invoiceId"),
            "invoiceNum": obj.get("invoiceNum"),
            "invoiceDate": obj.get("invoiceDate"),
            "sentStatus": obj.get("sentStatus"),
            "paid": obj.get("paid"),
            "automaticallyDeleted": obj.get("automaticallyDeleted"),
            "manuallyDeleted": obj.get("manuallyDeleted")
        })
        return _obj


