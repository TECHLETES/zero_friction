# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateIncomingInvoiceRequest(BaseModel):
    """
    Represents a request to create a new incoming invoice.  This DTO is used to register invoices received from suppliers or service providers.
    """ # noqa: E501
    property_group_id: Optional[StrictStr] = Field(default=None, description="The ID of the property group associated with this invoice.", alias="propertyGroupId")
    invoice_number: Optional[StrictStr] = Field(default=None, description="The unique invoice number assigned by the supplier.", alias="invoiceNumber")
    invoice_date: Optional[datetime] = Field(default=None, description="The date when the invoice was issued.", alias="invoiceDate")
    description: Optional[StrictStr] = Field(default=None, description="A description of the goods or services covered by the invoice.")
    start_date: Optional[datetime] = Field(default=None, description="The start date of the period covered by the invoice.", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="The end date of the period covered by the invoice.", alias="endDate")
    total_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount excluding VAT.", alias="totalAmountExclVat")
    total_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount including VAT.", alias="totalAmountInclVat")
    __properties: ClassVar[List[str]] = ["propertyGroupId", "invoiceNumber", "invoiceDate", "description", "startDate", "endDate", "totalAmountExclVat", "totalAmountInclVat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateIncomingInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if property_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_id is None and "property_group_id" in self.model_fields_set:
            _dict['propertyGroupId'] = None

        # set to None if invoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_number is None and "invoice_number" in self.model_fields_set:
            _dict['invoiceNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateIncomingInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyGroupId": obj.get("propertyGroupId"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "invoiceDate": obj.get("invoiceDate"),
            "description": obj.get("description"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "totalAmountExclVat": obj.get("totalAmountExclVat"),
            "totalAmountInclVat": obj.get("totalAmountInclVat")
        })
        return _obj


