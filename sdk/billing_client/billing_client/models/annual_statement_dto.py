# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.annual_statement_status import AnnualStatementStatus
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.localised_error_dto import LocalisedErrorDTO
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.sent_status import SentStatus
from typing import Optional, Set
from typing_extensions import Self

class AnnualStatementDTO(BaseModel):
    """
    Represents an annual statement document that provides a yearly summary of billing information.  This DTO contains all the necessary information about the annual statement, including its status,  generation details, and associated entities.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    annual_statement_number: Optional[StrictStr] = Field(default=None, description="The unique identifier number of the annual statement.", alias="annualStatementNumber")
    year: Optional[StrictInt] = Field(default=None, description="The year for which the annual statement is generated.")
    version: Optional[StrictInt] = Field(default=None, description="The version number of the annual statement.")
    start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the period covered by the annual statement.", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the period covered by the annual statement.", alias="endDateTime")
    status: Optional[AnnualStatementStatus] = Field(default=None, description="The current status of the annual statement.")
    generation_date: Optional[datetime] = Field(default=None, description="The date and time when the annual statement was generated.", alias="generationDate")
    sent: Optional[SentStatus] = Field(default=None, description="The status indicating whether the annual statement has been sent.")
    failure_reason_code: Optional[LocalisedErrorDTO] = Field(default=None, description="The localized error code if the annual statement generation failed.", alias="failureReasonCode")
    failure_details: Optional[StrictStr] = Field(default=None, description="Detailed information about any failure that occurred during generation.", alias="failureDetails")
    supports_external_printing: Optional[StrictBool] = Field(default=None, description="Indicates whether the annual statement can be printed externally.", alias="supportsExternalPrinting")
    attachment_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the attached document.", alias="attachmentId")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor associated with the annual statement.")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this annual statement.", alias="propertyGroups")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "annualStatementNumber", "year", "version", "startDateTime", "endDateTime", "status", "generationDate", "sent", "failureReasonCode", "failureDetails", "supportsExternalPrinting", "attachmentId", "debtor", "propertyGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnualStatementDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure_reason_code
        if self.failure_reason_code:
            _dict['failureReasonCode'] = self.failure_reason_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if annual_statement_number (nullable) is None
        # and model_fields_set contains the field
        if self.annual_statement_number is None and "annual_statement_number" in self.model_fields_set:
            _dict['annualStatementNumber'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if sent (nullable) is None
        # and model_fields_set contains the field
        if self.sent is None and "sent" in self.model_fields_set:
            _dict['sent'] = None

        # set to None if failure_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.failure_reason_code is None and "failure_reason_code" in self.model_fields_set:
            _dict['failureReasonCode'] = None

        # set to None if failure_details (nullable) is None
        # and model_fields_set contains the field
        if self.failure_details is None and "failure_details" in self.model_fields_set:
            _dict['failureDetails'] = None

        # set to None if attachment_id (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_id is None and "attachment_id" in self.model_fields_set:
            _dict['attachmentId'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnualStatementDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "annualStatementNumber": obj.get("annualStatementNumber"),
            "year": obj.get("year"),
            "version": obj.get("version"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "status": obj.get("status"),
            "generationDate": obj.get("generationDate"),
            "sent": obj.get("sent"),
            "failureReasonCode": LocalisedErrorDTO.from_dict(obj["failureReasonCode"]) if obj.get("failureReasonCode") is not None else None,
            "failureDetails": obj.get("failureDetails"),
            "supportsExternalPrinting": obj.get("supportsExternalPrinting"),
            "attachmentId": obj.get("attachmentId"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None
        })
        return _obj


