# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.billed_service_dto import BilledServiceDTO
from billing_client.models.contract_billing_method import ContractBillingMethod
from billing_client.models.product_period_reference_dto import ProductPeriodReferenceDTO
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class BillingContractDTO(BaseModel):
    """
    Represents a billing contract with its associated products and services.  This DTO contains information about the contract, its products, and billing method.
    """ # noqa: E501
    contract_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the contract.", alias="contractId")
    contract_number: Optional[StrictStr] = Field(default=None, description="The contract number.", alias="contractNumber")
    products: Optional[List[ProductPeriodReferenceDTO]] = Field(default=None, description="List of products associated with this contract.")
    services: Optional[List[BilledServiceDTO]] = Field(default=None, description="List of services being billed under this contract.")
    use_property_group_product: Optional[StrictBool] = Field(default=None, description="Indicates whether to use the property group product.", alias="usePropertyGroupProduct")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this contract.", alias="propertyGroups")
    billing_method: Optional[ContractBillingMethod] = Field(default=None, description="The billing method used for this contract.", alias="billingMethod")
    __properties: ClassVar[List[str]] = ["contractId", "contractNumber", "products", "services", "usePropertyGroupProduct", "propertyGroups", "billingMethod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingContractDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if products (nullable) is None
        # and model_fields_set contains the field
        if self.products is None and "products" in self.model_fields_set:
            _dict['products'] = None

        # set to None if services (nullable) is None
        # and model_fields_set contains the field
        if self.services is None and "services" in self.model_fields_set:
            _dict['services'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if billing_method (nullable) is None
        # and model_fields_set contains the field
        if self.billing_method is None and "billing_method" in self.model_fields_set:
            _dict['billingMethod'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingContractDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractId": obj.get("contractId"),
            "contractNumber": obj.get("contractNumber"),
            "products": [ProductPeriodReferenceDTO.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "services": [BilledServiceDTO.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "usePropertyGroupProduct": obj.get("usePropertyGroupProduct"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "billingMethod": obj.get("billingMethod")
        })
        return _obj


