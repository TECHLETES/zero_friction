# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.collection_case_step_dto import CollectionCaseStepDTO
from billing_client.models.collection_flow_status import CollectionFlowStatus
from billing_client.models.custom_entity_property_dto import CustomEntityPropertyDTO
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class CollectionCaseDTO(BaseModel):
    """
    Represents a collection case for managing debt collection processes.  This DTO contains information about the collection workflow, steps, and associated entities.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    collection_num: Optional[StrictStr] = Field(default=None, description="The unique collection case number.", alias="collectionNum")
    sequence_num: Optional[StrictInt] = Field(default=None, description="The sequence number of the collection case.", alias="sequenceNum")
    workflow_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the workflow.", alias="workflowId")
    workflow_name: Optional[StrictStr] = Field(default=None, description="The name of the workflow.", alias="workflowName")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor associated with this collection case.")
    manual_intervention_required: Optional[StrictBool] = Field(default=None, description="Indicates whether manual intervention is required for this case.", alias="manualInterventionRequired")
    status: Optional[CollectionFlowStatus] = Field(default=None, description="The current status of the collection flow.")
    steps: Optional[List[CollectionCaseStepDTO]] = Field(default=None, description="List of steps in the collection case workflow.")
    last_step: Optional[CollectionCaseStepDTO] = Field(default=None, description="Gets the most recently executed step in the collection case.", alias="lastStep")
    next_step: Optional[CollectionCaseStepDTO] = Field(default=None, description="Gets the next pending step to be executed in the collection case.", alias="nextStep")
    next_action_due: Optional[datetime] = Field(default=None, description="Gets the date and time when the next action is due.", alias="nextActionDue")
    referenced_transactions: Optional[List[StrictStr]] = Field(default=None, description="List of transaction IDs referenced in this collection case.", alias="referencedTransactions")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The payment reference number for this collection case.", alias="paymentReference")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this collection case.", alias="propertyGroups")
    total_open_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total open amount including VAT for this collection case.", alias="totalOpenAmountInclVAT")
    custom_properties: Optional[List[CustomEntityPropertyDTO]] = Field(default=None, description="List of custom properties associated with this collection case.", alias="customProperties")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "collectionNum", "sequenceNum", "workflowId", "workflowName", "debtor", "manualInterventionRequired", "status", "steps", "lastStep", "nextStep", "nextActionDue", "referencedTransactions", "paymentReference", "propertyGroups", "totalOpenAmountInclVAT", "customProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionCaseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
            "last_step",
            "next_step",
            "next_action_due",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_step
        if self.last_step:
            _dict['lastStep'] = self.last_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_step
        if self.next_step:
            _dict['nextStep'] = self.next_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if collection_num (nullable) is None
        # and model_fields_set contains the field
        if self.collection_num is None and "collection_num" in self.model_fields_set:
            _dict['collectionNum'] = None

        # set to None if workflow_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_id is None and "workflow_id" in self.model_fields_set:
            _dict['workflowId'] = None

        # set to None if workflow_name (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_name is None and "workflow_name" in self.model_fields_set:
            _dict['workflowName'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if steps (nullable) is None
        # and model_fields_set contains the field
        if self.steps is None and "steps" in self.model_fields_set:
            _dict['steps'] = None

        # set to None if last_step (nullable) is None
        # and model_fields_set contains the field
        if self.last_step is None and "last_step" in self.model_fields_set:
            _dict['lastStep'] = None

        # set to None if next_step (nullable) is None
        # and model_fields_set contains the field
        if self.next_step is None and "next_step" in self.model_fields_set:
            _dict['nextStep'] = None

        # set to None if referenced_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.referenced_transactions is None and "referenced_transactions" in self.model_fields_set:
            _dict['referencedTransactions'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if custom_properties (nullable) is None
        # and model_fields_set contains the field
        if self.custom_properties is None and "custom_properties" in self.model_fields_set:
            _dict['customProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionCaseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "collectionNum": obj.get("collectionNum"),
            "sequenceNum": obj.get("sequenceNum"),
            "workflowId": obj.get("workflowId"),
            "workflowName": obj.get("workflowName"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "manualInterventionRequired": obj.get("manualInterventionRequired"),
            "status": obj.get("status"),
            "steps": [CollectionCaseStepDTO.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "lastStep": CollectionCaseStepDTO.from_dict(obj["lastStep"]) if obj.get("lastStep") is not None else None,
            "nextStep": CollectionCaseStepDTO.from_dict(obj["nextStep"]) if obj.get("nextStep") is not None else None,
            "nextActionDue": obj.get("nextActionDue"),
            "referencedTransactions": obj.get("referencedTransactions"),
            "paymentReference": obj.get("paymentReference"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "totalOpenAmountInclVAT": obj.get("totalOpenAmountInclVAT"),
            "customProperties": [CustomEntityPropertyDTO.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None
        })
        return _obj


