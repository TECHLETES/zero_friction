# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EstimatedAdvancePeriodDTO(BaseModel):
    """
    Represents an advance period in an estimated invoice.  This DTO contains information about advance payments, including amounts, periods, and payment status.
    """ # noqa: E501
    period_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the advance period.", alias="periodStartDateTime")
    period_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the advance period.", alias="periodEndDateTime")
    amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The advance amount excluding VAT.", alias="amountExclVAT")
    vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The VAT amount for this advance.")
    amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The advance amount including VAT.", alias="amountInclVAT")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity associated with this advance.")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unit price for this advance.", alias="unitPrice")
    vat_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The VAT rate applied to this advance.", alias="vatRate")
    paid: Optional[StrictBool] = Field(default=None, description="Indicates whether this advance has been paid.")
    invoice_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the invoice associated with this advance.", alias="invoiceId")
    __properties: ClassVar[List[str]] = ["periodStartDateTime", "periodEndDateTime", "amountExclVAT", "vat", "amountInclVAT", "quantity", "unitPrice", "vatRate", "paid", "invoiceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EstimatedAdvancePeriodDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EstimatedAdvancePeriodDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "amountExclVAT": obj.get("amountExclVAT"),
            "vat": obj.get("vat"),
            "amountInclVAT": obj.get("amountInclVAT"),
            "quantity": obj.get("quantity"),
            "unitPrice": obj.get("unitPrice"),
            "vatRate": obj.get("vatRate"),
            "paid": obj.get("paid"),
            "invoiceId": obj.get("invoiceId")
        })
        return _obj


