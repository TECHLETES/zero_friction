# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.transaction_dto import TransactionDTO
from typing import Optional, Set
from typing_extensions import Self

class LatestCustomerTransactionsResponseDTO(BaseModel):
    """
    Represents a response containing the latest transactions for a customer
    """ # noqa: E501
    latest_open_transactions: Optional[List[TransactionDTO]] = Field(default=None, description="List of the most recent open transactions for the customer", alias="latestOpenTransactions")
    latest_closed_transactions: Optional[List[TransactionDTO]] = Field(default=None, description="List of the most recent closed transactions for the customer", alias="latestClosedTransactions")
    has_more_open_transactions: Optional[StrictBool] = Field(default=None, description="Indicates if there are more open transactions beyond the ones returned", alias="hasMoreOpenTransactions")
    has_more_closed_transactions: Optional[StrictBool] = Field(default=None, description="Indicates if there are more closed transactions beyond the ones returned", alias="hasMoreClosedTransactions")
    cash_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current cash position of the customer (net amount)", alias="cashPosition")
    cash_position_debit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current debit cash position of the customer (amount owed)", alias="cashPositionDebit")
    cash_position_credit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current credit cash position of the customer (amount available)", alias="cashPositionCredit")
    __properties: ClassVar[List[str]] = ["latestOpenTransactions", "latestClosedTransactions", "hasMoreOpenTransactions", "hasMoreClosedTransactions", "cashPosition", "cashPositionDebit", "cashPositionCredit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LatestCustomerTransactionsResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in latest_open_transactions (list)
        _items = []
        if self.latest_open_transactions:
            for _item_latest_open_transactions in self.latest_open_transactions:
                if _item_latest_open_transactions:
                    _items.append(_item_latest_open_transactions.to_dict())
            _dict['latestOpenTransactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in latest_closed_transactions (list)
        _items = []
        if self.latest_closed_transactions:
            for _item_latest_closed_transactions in self.latest_closed_transactions:
                if _item_latest_closed_transactions:
                    _items.append(_item_latest_closed_transactions.to_dict())
            _dict['latestClosedTransactions'] = _items
        # set to None if latest_open_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.latest_open_transactions is None and "latest_open_transactions" in self.model_fields_set:
            _dict['latestOpenTransactions'] = None

        # set to None if latest_closed_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.latest_closed_transactions is None and "latest_closed_transactions" in self.model_fields_set:
            _dict['latestClosedTransactions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LatestCustomerTransactionsResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "latestOpenTransactions": [TransactionDTO.from_dict(_item) for _item in obj["latestOpenTransactions"]] if obj.get("latestOpenTransactions") is not None else None,
            "latestClosedTransactions": [TransactionDTO.from_dict(_item) for _item in obj["latestClosedTransactions"]] if obj.get("latestClosedTransactions") is not None else None,
            "hasMoreOpenTransactions": obj.get("hasMoreOpenTransactions"),
            "hasMoreClosedTransactions": obj.get("hasMoreClosedTransactions"),
            "cashPosition": obj.get("cashPosition"),
            "cashPositionDebit": obj.get("cashPositionDebit"),
            "cashPositionCredit": obj.get("cashPositionCredit")
        })
        return _obj


