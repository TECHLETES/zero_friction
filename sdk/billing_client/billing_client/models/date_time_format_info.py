# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.calendar import Calendar
from billing_client.models.calendar_week_rule import CalendarWeekRule
from billing_client.models.day_of_week import DayOfWeek
from typing import Optional, Set
from typing_extensions import Self

class DateTimeFormatInfo(BaseModel):
    """
    DateTimeFormatInfo
    """ # noqa: E501
    am_designator: Optional[StrictStr] = Field(default=None, alias="amDesignator")
    calendar: Optional[Calendar] = None
    date_separator: Optional[StrictStr] = Field(default=None, alias="dateSeparator")
    first_day_of_week: Optional[DayOfWeek] = Field(default=None, alias="firstDayOfWeek")
    calendar_week_rule: Optional[CalendarWeekRule] = Field(default=None, alias="calendarWeekRule")
    full_date_time_pattern: Optional[StrictStr] = Field(default=None, alias="fullDateTimePattern")
    long_date_pattern: Optional[StrictStr] = Field(default=None, alias="longDatePattern")
    long_time_pattern: Optional[StrictStr] = Field(default=None, alias="longTimePattern")
    month_day_pattern: Optional[StrictStr] = Field(default=None, alias="monthDayPattern")
    pm_designator: Optional[StrictStr] = Field(default=None, alias="pmDesignator")
    rf_c1123_pattern: Optional[StrictStr] = Field(default=None, alias="rfC1123Pattern")
    short_date_pattern: Optional[StrictStr] = Field(default=None, alias="shortDatePattern")
    short_time_pattern: Optional[StrictStr] = Field(default=None, alias="shortTimePattern")
    sortable_date_time_pattern: Optional[StrictStr] = Field(default=None, alias="sortableDateTimePattern")
    time_separator: Optional[StrictStr] = Field(default=None, alias="timeSeparator")
    universal_sortable_date_time_pattern: Optional[StrictStr] = Field(default=None, alias="universalSortableDateTimePattern")
    year_month_pattern: Optional[StrictStr] = Field(default=None, alias="yearMonthPattern")
    abbreviated_day_names: Optional[List[StrictStr]] = Field(default=None, alias="abbreviatedDayNames")
    shortest_day_names: Optional[List[StrictStr]] = Field(default=None, alias="shortestDayNames")
    day_names: Optional[List[StrictStr]] = Field(default=None, alias="dayNames")
    abbreviated_month_names: Optional[List[StrictStr]] = Field(default=None, alias="abbreviatedMonthNames")
    month_names: Optional[List[StrictStr]] = Field(default=None, alias="monthNames")
    is_read_only: Optional[StrictBool] = Field(default=None, alias="isReadOnly")
    native_calendar_name: Optional[StrictStr] = Field(default=None, alias="nativeCalendarName")
    abbreviated_month_genitive_names: Optional[List[StrictStr]] = Field(default=None, alias="abbreviatedMonthGenitiveNames")
    month_genitive_names: Optional[List[StrictStr]] = Field(default=None, alias="monthGenitiveNames")
    __properties: ClassVar[List[str]] = ["amDesignator", "calendar", "dateSeparator", "firstDayOfWeek", "calendarWeekRule", "fullDateTimePattern", "longDatePattern", "longTimePattern", "monthDayPattern", "pmDesignator", "rfC1123Pattern", "shortDatePattern", "shortTimePattern", "sortableDateTimePattern", "timeSeparator", "universalSortableDateTimePattern", "yearMonthPattern", "abbreviatedDayNames", "shortestDayNames", "dayNames", "abbreviatedMonthNames", "monthNames", "isReadOnly", "nativeCalendarName", "abbreviatedMonthGenitiveNames", "monthGenitiveNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateTimeFormatInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "rf_c1123_pattern",
            "sortable_date_time_pattern",
            "universal_sortable_date_time_pattern",
            "is_read_only",
            "native_calendar_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar
        if self.calendar:
            _dict['calendar'] = self.calendar.to_dict()
        # set to None if am_designator (nullable) is None
        # and model_fields_set contains the field
        if self.am_designator is None and "am_designator" in self.model_fields_set:
            _dict['amDesignator'] = None

        # set to None if calendar (nullable) is None
        # and model_fields_set contains the field
        if self.calendar is None and "calendar" in self.model_fields_set:
            _dict['calendar'] = None

        # set to None if date_separator (nullable) is None
        # and model_fields_set contains the field
        if self.date_separator is None and "date_separator" in self.model_fields_set:
            _dict['dateSeparator'] = None

        # set to None if full_date_time_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.full_date_time_pattern is None and "full_date_time_pattern" in self.model_fields_set:
            _dict['fullDateTimePattern'] = None

        # set to None if long_date_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.long_date_pattern is None and "long_date_pattern" in self.model_fields_set:
            _dict['longDatePattern'] = None

        # set to None if long_time_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.long_time_pattern is None and "long_time_pattern" in self.model_fields_set:
            _dict['longTimePattern'] = None

        # set to None if month_day_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.month_day_pattern is None and "month_day_pattern" in self.model_fields_set:
            _dict['monthDayPattern'] = None

        # set to None if pm_designator (nullable) is None
        # and model_fields_set contains the field
        if self.pm_designator is None and "pm_designator" in self.model_fields_set:
            _dict['pmDesignator'] = None

        # set to None if rf_c1123_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.rf_c1123_pattern is None and "rf_c1123_pattern" in self.model_fields_set:
            _dict['rfC1123Pattern'] = None

        # set to None if short_date_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.short_date_pattern is None and "short_date_pattern" in self.model_fields_set:
            _dict['shortDatePattern'] = None

        # set to None if short_time_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.short_time_pattern is None and "short_time_pattern" in self.model_fields_set:
            _dict['shortTimePattern'] = None

        # set to None if sortable_date_time_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.sortable_date_time_pattern is None and "sortable_date_time_pattern" in self.model_fields_set:
            _dict['sortableDateTimePattern'] = None

        # set to None if time_separator (nullable) is None
        # and model_fields_set contains the field
        if self.time_separator is None and "time_separator" in self.model_fields_set:
            _dict['timeSeparator'] = None

        # set to None if universal_sortable_date_time_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.universal_sortable_date_time_pattern is None and "universal_sortable_date_time_pattern" in self.model_fields_set:
            _dict['universalSortableDateTimePattern'] = None

        # set to None if year_month_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.year_month_pattern is None and "year_month_pattern" in self.model_fields_set:
            _dict['yearMonthPattern'] = None

        # set to None if abbreviated_day_names (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviated_day_names is None and "abbreviated_day_names" in self.model_fields_set:
            _dict['abbreviatedDayNames'] = None

        # set to None if shortest_day_names (nullable) is None
        # and model_fields_set contains the field
        if self.shortest_day_names is None and "shortest_day_names" in self.model_fields_set:
            _dict['shortestDayNames'] = None

        # set to None if day_names (nullable) is None
        # and model_fields_set contains the field
        if self.day_names is None and "day_names" in self.model_fields_set:
            _dict['dayNames'] = None

        # set to None if abbreviated_month_names (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviated_month_names is None and "abbreviated_month_names" in self.model_fields_set:
            _dict['abbreviatedMonthNames'] = None

        # set to None if month_names (nullable) is None
        # and model_fields_set contains the field
        if self.month_names is None and "month_names" in self.model_fields_set:
            _dict['monthNames'] = None

        # set to None if native_calendar_name (nullable) is None
        # and model_fields_set contains the field
        if self.native_calendar_name is None and "native_calendar_name" in self.model_fields_set:
            _dict['nativeCalendarName'] = None

        # set to None if abbreviated_month_genitive_names (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviated_month_genitive_names is None and "abbreviated_month_genitive_names" in self.model_fields_set:
            _dict['abbreviatedMonthGenitiveNames'] = None

        # set to None if month_genitive_names (nullable) is None
        # and model_fields_set contains the field
        if self.month_genitive_names is None and "month_genitive_names" in self.model_fields_set:
            _dict['monthGenitiveNames'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateTimeFormatInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amDesignator": obj.get("amDesignator"),
            "calendar": Calendar.from_dict(obj["calendar"]) if obj.get("calendar") is not None else None,
            "dateSeparator": obj.get("dateSeparator"),
            "firstDayOfWeek": obj.get("firstDayOfWeek"),
            "calendarWeekRule": obj.get("calendarWeekRule"),
            "fullDateTimePattern": obj.get("fullDateTimePattern"),
            "longDatePattern": obj.get("longDatePattern"),
            "longTimePattern": obj.get("longTimePattern"),
            "monthDayPattern": obj.get("monthDayPattern"),
            "pmDesignator": obj.get("pmDesignator"),
            "rfC1123Pattern": obj.get("rfC1123Pattern"),
            "shortDatePattern": obj.get("shortDatePattern"),
            "shortTimePattern": obj.get("shortTimePattern"),
            "sortableDateTimePattern": obj.get("sortableDateTimePattern"),
            "timeSeparator": obj.get("timeSeparator"),
            "universalSortableDateTimePattern": obj.get("universalSortableDateTimePattern"),
            "yearMonthPattern": obj.get("yearMonthPattern"),
            "abbreviatedDayNames": obj.get("abbreviatedDayNames"),
            "shortestDayNames": obj.get("shortestDayNames"),
            "dayNames": obj.get("dayNames"),
            "abbreviatedMonthNames": obj.get("abbreviatedMonthNames"),
            "monthNames": obj.get("monthNames"),
            "isReadOnly": obj.get("isReadOnly"),
            "nativeCalendarName": obj.get("nativeCalendarName"),
            "abbreviatedMonthGenitiveNames": obj.get("abbreviatedMonthGenitiveNames"),
            "monthGenitiveNames": obj.get("monthGenitiveNames")
        })
        return _obj


