# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class CustAgingHeaderDTO(BaseModel):
    """
    Represents the header information for customer aging analysis.  This DTO contains aggregated financial information about a customer's outstanding transactions and aging buckets.
    """ # noqa: E501
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor associated with this aging analysis.")
    last_payment_date: Optional[datetime] = Field(default=None, description="The date of the most recent payment received from the customer.", alias="lastPaymentDate")
    oldest_open_debit_transaction_reference: Optional[StrictStr] = Field(default=None, description="Reference to the oldest open debit transaction (e.g., invoice number).", alias="oldestOpenDebitTransactionReference")
    open_credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all open transactions in favor of the customer (credits).", alias="openCredits")
    total_credit_tx_open: Optional[StrictInt] = Field(default=None, description="Total number of open credit transactions.", alias="totalCreditTxOpen")
    open_debits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all open transactions to be paid by the customer (debits).", alias="openDebits")
    total_debit_tx_open: Optional[StrictInt] = Field(default=None, description="Total number of open debit transactions.", alias="totalDebitTxOpen")
    total_open_not_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of open transactions that are not yet overdue.", alias="totalOpenNotOverdue")
    total_open_not_overdue_tx: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of open transactions that are not yet overdue.", alias="totalOpenNotOverdueTx")
    total_overdue30_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 0 and 30 days (excluding end date).", alias="totalOverdue30D")
    total_overdue30_dtx: Optional[StrictInt] = Field(default=None, description="Total number of transactions overdue between 0 and 30 days.", alias="totalOverdue30DTx")
    total_overdue60_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 30 and 60 days (excluding end date).", alias="totalOverdue60D")
    total_overdue60_dtx: Optional[StrictInt] = Field(default=None, description="Total number of transactions overdue between 30 and 60 days.", alias="totalOverdue60DTx")
    total_overdue90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 60 and 90 days (excluding end date).", alias="totalOverdue90D")
    total_overdue90_dtx: Optional[StrictInt] = Field(default=None, description="Total number of transactions overdue between 60 and 90 days.", alias="totalOverdue90DTx")
    total_overdue_over90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue for more than 90 days.", alias="totalOverdueOver90D")
    total_overdue_over90_dtx: Optional[StrictInt] = Field(default=None, description="Total number of transactions overdue for more than 90 days.", alias="totalOverdueOver90DTx")
    total_collection_costs_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of open collection costs, including both open and potentially overdue costs.", alias="totalCollectionCostsOpen")
    total_collection_cost_tx: Optional[StrictInt] = Field(default=None, description="Total number of collection cost transactions.", alias="totalCollectionCostTx")
    total_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of all open transactions.", alias="totalOpen")
    total_open_tx: Optional[StrictInt] = Field(default=None, description="Total number of all open transactions.", alias="totalOpenTx")
    flow_active: Optional[StrictBool] = Field(default=None, description="Indicates whether there is any active collection flow on any of the underlying transactions.", alias="flowActive")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this aging analysis.", alias="propertyGroups")
    __properties: ClassVar[List[str]] = ["debtor", "lastPaymentDate", "oldestOpenDebitTransactionReference", "openCredits", "totalCreditTxOpen", "openDebits", "totalDebitTxOpen", "totalOpenNotOverdue", "totalOpenNotOverdueTx", "totalOverdue30D", "totalOverdue30DTx", "totalOverdue60D", "totalOverdue60DTx", "totalOverdue90D", "totalOverdue90DTx", "totalOverdueOver90D", "totalOverdueOver90DTx", "totalCollectionCostsOpen", "totalCollectionCostTx", "totalOpen", "totalOpenTx", "flowActive", "propertyGroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustAgingHeaderDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if oldest_open_debit_transaction_reference (nullable) is None
        # and model_fields_set contains the field
        if self.oldest_open_debit_transaction_reference is None and "oldest_open_debit_transaction_reference" in self.model_fields_set:
            _dict['oldestOpenDebitTransactionReference'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustAgingHeaderDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "lastPaymentDate": obj.get("lastPaymentDate"),
            "oldestOpenDebitTransactionReference": obj.get("oldestOpenDebitTransactionReference"),
            "openCredits": obj.get("openCredits"),
            "totalCreditTxOpen": obj.get("totalCreditTxOpen"),
            "openDebits": obj.get("openDebits"),
            "totalDebitTxOpen": obj.get("totalDebitTxOpen"),
            "totalOpenNotOverdue": obj.get("totalOpenNotOverdue"),
            "totalOpenNotOverdueTx": obj.get("totalOpenNotOverdueTx"),
            "totalOverdue30D": obj.get("totalOverdue30D"),
            "totalOverdue30DTx": obj.get("totalOverdue30DTx"),
            "totalOverdue60D": obj.get("totalOverdue60D"),
            "totalOverdue60DTx": obj.get("totalOverdue60DTx"),
            "totalOverdue90D": obj.get("totalOverdue90D"),
            "totalOverdue90DTx": obj.get("totalOverdue90DTx"),
            "totalOverdueOver90D": obj.get("totalOverdueOver90D"),
            "totalOverdueOver90DTx": obj.get("totalOverdueOver90DTx"),
            "totalCollectionCostsOpen": obj.get("totalCollectionCostsOpen"),
            "totalCollectionCostTx": obj.get("totalCollectionCostTx"),
            "totalOpen": obj.get("totalOpen"),
            "totalOpenTx": obj.get("totalOpenTx"),
            "flowActive": obj.get("flowActive"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None
        })
        return _obj


