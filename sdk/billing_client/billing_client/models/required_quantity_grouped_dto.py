# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.required_quantity_contract_grouped_dto import RequiredQuantityContractGroupedDTO
from billing_client.models.required_quantity_location_grouped_dto import RequiredQuantityLocationGroupedDTO
from typing import Optional, Set
from typing_extensions import Self

class RequiredQuantityGroupedDTO(BaseModel):
    """
    Represents grouped required quantities for billing
    """ # noqa: E501
    contract_required_quantities: Optional[List[RequiredQuantityContractGroupedDTO]] = Field(default=None, description="Required quantities grouped by contract", alias="contractRequiredQuantities")
    location_required_quantities: Optional[List[RequiredQuantityLocationGroupedDTO]] = Field(default=None, description="Required quantities grouped by location", alias="locationRequiredQuantities")
    __properties: ClassVar[List[str]] = ["contractRequiredQuantities", "locationRequiredQuantities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequiredQuantityGroupedDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contract_required_quantities (list)
        _items = []
        if self.contract_required_quantities:
            for _item_contract_required_quantities in self.contract_required_quantities:
                if _item_contract_required_quantities:
                    _items.append(_item_contract_required_quantities.to_dict())
            _dict['contractRequiredQuantities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in location_required_quantities (list)
        _items = []
        if self.location_required_quantities:
            for _item_location_required_quantities in self.location_required_quantities:
                if _item_location_required_quantities:
                    _items.append(_item_location_required_quantities.to_dict())
            _dict['locationRequiredQuantities'] = _items
        # set to None if contract_required_quantities (nullable) is None
        # and model_fields_set contains the field
        if self.contract_required_quantities is None and "contract_required_quantities" in self.model_fields_set:
            _dict['contractRequiredQuantities'] = None

        # set to None if location_required_quantities (nullable) is None
        # and model_fields_set contains the field
        if self.location_required_quantities is None and "location_required_quantities" in self.model_fields_set:
            _dict['locationRequiredQuantities'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequiredQuantityGroupedDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractRequiredQuantities": [RequiredQuantityContractGroupedDTO.from_dict(_item) for _item in obj["contractRequiredQuantities"]] if obj.get("contractRequiredQuantities") is not None else None,
            "locationRequiredQuantities": [RequiredQuantityLocationGroupedDTO.from_dict(_item) for _item in obj["locationRequiredQuantities"]] if obj.get("locationRequiredQuantities") is not None else None
        })
        return _obj


