# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.collection_step_status import CollectionStepStatus
from typing import Optional, Set
from typing_extensions import Self

class CollectionCaseDetailsDTO(BaseModel):
    """
    Represents detailed information about a collection case.  Contains information about the case's workflow, current status, and step progression.
    """ # noqa: E501
    collection_case_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the collection case.", alias="collectionCaseId")
    closed: Optional[StrictBool] = Field(default=None, description="Indicates whether the collection case is closed.")
    workflow_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the workflow associated with this collection case.", alias="workflowId")
    workflow_name: Optional[StrictStr] = Field(default=None, description="The name of the workflow associated with this collection case.", alias="workflowName")
    previous_step_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the previous step in the collection workflow.", alias="previousStepId")
    previous_step_name: Optional[StrictStr] = Field(default=None, description="The name of the previous step in the collection workflow.", alias="previousStepName")
    previous_step_executed_at: Optional[datetime] = Field(default=None, description="The date and time when the previous step was executed.", alias="previousStepExecutedAt")
    previous_step_status: Optional[CollectionStepStatus] = Field(default=None, description="The status of the previous step in the collection workflow.", alias="previousStepStatus")
    next_step_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the next step in the collection workflow.", alias="nextStepId")
    next_step_name: Optional[StrictStr] = Field(default=None, description="The name of the next step in the collection workflow.", alias="nextStepName")
    next_step_execution_date: Optional[datetime] = Field(default=None, description="The scheduled date and time for executing the next step.", alias="nextStepExecutionDate")
    __properties: ClassVar[List[str]] = ["collectionCaseId", "closed", "workflowId", "workflowName", "previousStepId", "previousStepName", "previousStepExecutedAt", "previousStepStatus", "nextStepId", "nextStepName", "nextStepExecutionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionCaseDetailsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if collection_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.collection_case_id is None and "collection_case_id" in self.model_fields_set:
            _dict['collectionCaseId'] = None

        # set to None if workflow_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_id is None and "workflow_id" in self.model_fields_set:
            _dict['workflowId'] = None

        # set to None if workflow_name (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_name is None and "workflow_name" in self.model_fields_set:
            _dict['workflowName'] = None

        # set to None if previous_step_id (nullable) is None
        # and model_fields_set contains the field
        if self.previous_step_id is None and "previous_step_id" in self.model_fields_set:
            _dict['previousStepId'] = None

        # set to None if previous_step_name (nullable) is None
        # and model_fields_set contains the field
        if self.previous_step_name is None and "previous_step_name" in self.model_fields_set:
            _dict['previousStepName'] = None

        # set to None if previous_step_status (nullable) is None
        # and model_fields_set contains the field
        if self.previous_step_status is None and "previous_step_status" in self.model_fields_set:
            _dict['previousStepStatus'] = None

        # set to None if next_step_id (nullable) is None
        # and model_fields_set contains the field
        if self.next_step_id is None and "next_step_id" in self.model_fields_set:
            _dict['nextStepId'] = None

        # set to None if next_step_name (nullable) is None
        # and model_fields_set contains the field
        if self.next_step_name is None and "next_step_name" in self.model_fields_set:
            _dict['nextStepName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionCaseDetailsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collectionCaseId": obj.get("collectionCaseId"),
            "closed": obj.get("closed"),
            "workflowId": obj.get("workflowId"),
            "workflowName": obj.get("workflowName"),
            "previousStepId": obj.get("previousStepId"),
            "previousStepName": obj.get("previousStepName"),
            "previousStepExecutedAt": obj.get("previousStepExecutedAt"),
            "previousStepStatus": obj.get("previousStepStatus"),
            "nextStepId": obj.get("nextStepId"),
            "nextStepName": obj.get("nextStepName"),
            "nextStepExecutionDate": obj.get("nextStepExecutionDate")
        })
        return _obj


