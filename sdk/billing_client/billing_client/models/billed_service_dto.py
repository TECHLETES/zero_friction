# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class BilledServiceDTO(BaseModel):
    """
    Represents a service being billed under a contract.  This DTO contains information about the service, its location, and supply period.
    """ # noqa: E501
    utility_type: Optional[UtilityType] = Field(default=None, description="The type of utility being provided.", alias="utilityType")
    service_location_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the service location.", alias="serviceLocationId")
    supply_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the service supply period.", alias="supplyStartDateTime")
    supply_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the service supply period.", alias="supplyEndDateTime")
    external_identifier: Optional[StrictStr] = Field(default=None, description="An external identifier for the service.", alias="externalIdentifier")
    __properties: ClassVar[List[str]] = ["utilityType", "serviceLocationId", "supplyStartDateTime", "supplyEndDateTime", "externalIdentifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BilledServiceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if external_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.external_identifier is None and "external_identifier" in self.model_fields_set:
            _dict['externalIdentifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BilledServiceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "utilityType": obj.get("utilityType"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "supplyStartDateTime": obj.get("supplyStartDateTime"),
            "supplyEndDateTime": obj.get("supplyEndDateTime"),
            "externalIdentifier": obj.get("externalIdentifier")
        })
        return _obj


