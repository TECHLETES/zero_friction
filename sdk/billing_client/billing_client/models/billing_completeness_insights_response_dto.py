# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.advance_frequency import AdvanceFrequency
from billing_client.models.billing_completeness_status import BillingCompletenessStatus
from billing_client.models.invoice_frequency import InvoiceFrequency
from billing_client.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class BillingCompletenessInsightsResponseDTO(BaseModel):
    """
    Represents insights and status information about billing completeness.  This DTO provides detailed information about advance payments, invoice periods, and billing status.
    """ # noqa: E501
    next_advance_start_date_time: Optional[datetime] = Field(default=None, description="The date and time when the next advance payment period will start.", alias="nextAdvanceStartDateTime")
    advance_frequency: Optional[AdvanceFrequency] = Field(default=None, description="The frequency at which advance payments are collected.", alias="advanceFrequency")
    advance_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of each advance payment.", alias="advanceAmount")
    advances_created: Optional[StrictInt] = Field(default=None, description="The number of advance payments that have been created.", alias="advancesCreated")
    advances_needed: Optional[StrictInt] = Field(default=None, description="The number of advance payments that are still needed.", alias="advancesNeeded")
    invoice_frequency: Optional[InvoiceFrequency] = Field(default=None, description="The frequency at which invoices are generated.", alias="invoiceFrequency")
    active_invoice_start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the currently active invoice period.", alias="activeInvoiceStartDateTime")
    active_invoice_end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the currently active invoice period.", alias="activeInvoiceEndDateTime")
    active_status: Optional[BillingCompletenessStatus] = Field(default=None, description="The current status of the active billing completeness.", alias="activeStatus")
    active_billing_completeness_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the active billing completeness entry.", alias="activeBillingCompletenessId")
    estimated_invoice_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the estimated invoice.", alias="estimatedInvoiceId")
    estimated_invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated amount of the invoice.", alias="estimatedInvoiceAmount")
    has_open_advance_periods_with_different_tax_rate: Optional[StrictBool] = Field(default=None, description="Indicates whether there are open advance periods with different tax rates.", alias="hasOpenAdvancePeriodsWithDifferentTaxRate")
    accuracy_state: Optional[Level] = Field(default=None, description="The current level of accuracy of the billing data.", alias="accuracyState")
    draft_invoice_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the draft invoice.", alias="draftInvoiceId")
    draft_invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the draft invoice.", alias="draftInvoiceAmount")
    __properties: ClassVar[List[str]] = ["nextAdvanceStartDateTime", "advanceFrequency", "advanceAmount", "advancesCreated", "advancesNeeded", "invoiceFrequency", "activeInvoiceStartDateTime", "activeInvoiceEndDateTime", "activeStatus", "activeBillingCompletenessId", "estimatedInvoiceId", "estimatedInvoiceAmount", "hasOpenAdvancePeriodsWithDifferentTaxRate", "accuracyState", "draftInvoiceId", "draftInvoiceAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingCompletenessInsightsResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if advance_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.advance_frequency is None and "advance_frequency" in self.model_fields_set:
            _dict['advanceFrequency'] = None

        # set to None if invoice_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_frequency is None and "invoice_frequency" in self.model_fields_set:
            _dict['invoiceFrequency'] = None

        # set to None if active_status (nullable) is None
        # and model_fields_set contains the field
        if self.active_status is None and "active_status" in self.model_fields_set:
            _dict['activeStatus'] = None

        # set to None if active_billing_completeness_id (nullable) is None
        # and model_fields_set contains the field
        if self.active_billing_completeness_id is None and "active_billing_completeness_id" in self.model_fields_set:
            _dict['activeBillingCompletenessId'] = None

        # set to None if estimated_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_invoice_id is None and "estimated_invoice_id" in self.model_fields_set:
            _dict['estimatedInvoiceId'] = None

        # set to None if estimated_invoice_amount (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_invoice_amount is None and "estimated_invoice_amount" in self.model_fields_set:
            _dict['estimatedInvoiceAmount'] = None

        # set to None if accuracy_state (nullable) is None
        # and model_fields_set contains the field
        if self.accuracy_state is None and "accuracy_state" in self.model_fields_set:
            _dict['accuracyState'] = None

        # set to None if draft_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.draft_invoice_id is None and "draft_invoice_id" in self.model_fields_set:
            _dict['draftInvoiceId'] = None

        # set to None if draft_invoice_amount (nullable) is None
        # and model_fields_set contains the field
        if self.draft_invoice_amount is None and "draft_invoice_amount" in self.model_fields_set:
            _dict['draftInvoiceAmount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingCompletenessInsightsResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextAdvanceStartDateTime": obj.get("nextAdvanceStartDateTime"),
            "advanceFrequency": obj.get("advanceFrequency"),
            "advanceAmount": obj.get("advanceAmount"),
            "advancesCreated": obj.get("advancesCreated"),
            "advancesNeeded": obj.get("advancesNeeded"),
            "invoiceFrequency": obj.get("invoiceFrequency"),
            "activeInvoiceStartDateTime": obj.get("activeInvoiceStartDateTime"),
            "activeInvoiceEndDateTime": obj.get("activeInvoiceEndDateTime"),
            "activeStatus": obj.get("activeStatus"),
            "activeBillingCompletenessId": obj.get("activeBillingCompletenessId"),
            "estimatedInvoiceId": obj.get("estimatedInvoiceId"),
            "estimatedInvoiceAmount": obj.get("estimatedInvoiceAmount"),
            "hasOpenAdvancePeriodsWithDifferentTaxRate": obj.get("hasOpenAdvancePeriodsWithDifferentTaxRate"),
            "accuracyState": obj.get("accuracyState"),
            "draftInvoiceId": obj.get("draftInvoiceId"),
            "draftInvoiceAmount": obj.get("draftInvoiceAmount")
        })
        return _obj


