# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetOutgoingBankingTransactionsQueryParams(BaseModel):
    """
    GetOutgoingBankingTransactionsQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, alias="companyBankAccountId")
    outgoing_banking_transaction_type: Optional[StrictStr] = Field(default=None, alias="outgoingBankingTransactionType")
    mutation_date_time_start: Optional[datetime] = Field(default=None, alias="mutationDateTimeStart")
    mutation_date_time_end: Optional[datetime] = Field(default=None, alias="mutationDateTimeEnd")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "companyBankAccountId", "outgoingBankingTransactionType", "mutationDateTimeStart", "mutationDateTimeEnd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOutgoingBankingTransactionsQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if outgoing_banking_transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_type is None and "outgoing_banking_transaction_type" in self.model_fields_set:
            _dict['outgoingBankingTransactionType'] = None

        # set to None if mutation_date_time_start (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_date_time_start is None and "mutation_date_time_start" in self.model_fields_set:
            _dict['mutationDateTimeStart'] = None

        # set to None if mutation_date_time_end (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_date_time_end is None and "mutation_date_time_end" in self.model_fields_set:
            _dict['mutationDateTimeEnd'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOutgoingBankingTransactionsQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "outgoingBankingTransactionType": obj.get("outgoingBankingTransactionType"),
            "mutationDateTimeStart": obj.get("mutationDateTimeStart"),
            "mutationDateTimeEnd": obj.get("mutationDateTimeEnd")
        })
        return _obj


