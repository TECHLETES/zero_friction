# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.payment_entity_reference_dto import PaymentEntityReferenceDTO
from billing_client.models.payment_reversal_details_dto import PaymentReversalDetailsDTO
from billing_client.models.payment_type import PaymentType
from typing import Optional, Set
from typing_extensions import Self

class PaymentDTO(BaseModel):
    """
    Represents a payment in the billing system.  This DTO contains comprehensive information about the payment, including its status, amounts, and related transactions.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    type: Optional[PaymentType] = Field(default=None, description="The type of payment.")
    payment_date_time: Optional[datetime] = Field(default=None, description="The date and time when the payment was made.", alias="paymentDateTime")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The unique reference number for the payment.", alias="paymentReference")
    remittance_information: Optional[StrictStr] = Field(default=None, description="Additional remittance information associated with the payment.", alias="remittanceInformation")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the payment.")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the company bank account.", alias="companyBankAccountId")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Information about the debtor associated with this payment.")
    customer_bank_account_iban: Optional[StrictStr] = Field(default=None, description="The IBAN of the customer's bank account.", alias="customerBankAccountIBAN")
    is_manual: Optional[StrictBool] = Field(default=None, description="Indicates whether this payment was manually entered.", alias="isManual")
    payment_entity_references: Optional[List[PaymentEntityReferenceDTO]] = Field(default=None, description="List of entity references associated with this payment.", alias="paymentEntityReferences")
    is_reversed: Optional[StrictBool] = Field(default=None, description="Indicates whether this payment has been reversed.", alias="isReversed")
    reversal_details: Optional[PaymentReversalDetailsDTO] = Field(default=None, description="Details about the payment reversal, if applicable.", alias="reversalDetails")
    outgoing_mutation_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated outgoing mutation.", alias="outgoingMutationId")
    outgoing_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated outgoing banking transaction.", alias="outgoingBankingTransactionId")
    outgoing_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="The identification of the associated outgoing banking transaction.", alias="outgoingBankingTransactionIdentification")
    is_confirmed_by_bank: Optional[StrictBool] = Field(default=None, description="Indicates whether this payment has been confirmed by the bank.", alias="isConfirmedByBank")
    incoming_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated incoming banking transaction.", alias="incomingBankingTransactionId")
    incoming_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="The identification of the associated incoming banking transaction.", alias="incomingBankingTransactionIdentification")
    incoming_mutation_id: Optional[StrictStr] = Field(default=None, description="The ID of the associated incoming mutation.", alias="incomingMutationId")
    canonical_search: Optional[StrictStr] = Field(default=None, description="A canonical search string for this payment.", alias="canonicalSearch")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "type", "paymentDateTime", "paymentReference", "remittanceInformation", "amount", "companyBankAccountId", "debtor", "customerBankAccountIBAN", "isManual", "paymentEntityReferences", "isReversed", "reversalDetails", "outgoingMutationId", "outgoingBankingTransactionId", "outgoingBankingTransactionIdentification", "isConfirmedByBank", "incomingBankingTransactionId", "incomingBankingTransactionIdentification", "incomingMutationId", "canonicalSearch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_entity_references (list)
        _items = []
        if self.payment_entity_references:
            for _item_payment_entity_references in self.payment_entity_references:
                if _item_payment_entity_references:
                    _items.append(_item_payment_entity_references.to_dict())
            _dict['paymentEntityReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of reversal_details
        if self.reversal_details:
            _dict['reversalDetails'] = self.reversal_details.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if remittance_information (nullable) is None
        # and model_fields_set contains the field
        if self.remittance_information is None and "remittance_information" in self.model_fields_set:
            _dict['remittanceInformation'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if customer_bank_account_iban (nullable) is None
        # and model_fields_set contains the field
        if self.customer_bank_account_iban is None and "customer_bank_account_iban" in self.model_fields_set:
            _dict['customerBankAccountIBAN'] = None

        # set to None if payment_entity_references (nullable) is None
        # and model_fields_set contains the field
        if self.payment_entity_references is None and "payment_entity_references" in self.model_fields_set:
            _dict['paymentEntityReferences'] = None

        # set to None if reversal_details (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_details is None and "reversal_details" in self.model_fields_set:
            _dict['reversalDetails'] = None

        # set to None if outgoing_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_id is None and "outgoing_mutation_id" in self.model_fields_set:
            _dict['outgoingMutationId'] = None

        # set to None if outgoing_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_id is None and "outgoing_banking_transaction_id" in self.model_fields_set:
            _dict['outgoingBankingTransactionId'] = None

        # set to None if outgoing_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_identification is None and "outgoing_banking_transaction_identification" in self.model_fields_set:
            _dict['outgoingBankingTransactionIdentification'] = None

        # set to None if incoming_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_banking_transaction_id is None and "incoming_banking_transaction_id" in self.model_fields_set:
            _dict['incomingBankingTransactionId'] = None

        # set to None if incoming_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_banking_transaction_identification is None and "incoming_banking_transaction_identification" in self.model_fields_set:
            _dict['incomingBankingTransactionIdentification'] = None

        # set to None if incoming_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_mutation_id is None and "incoming_mutation_id" in self.model_fields_set:
            _dict['incomingMutationId'] = None

        # set to None if canonical_search (nullable) is None
        # and model_fields_set contains the field
        if self.canonical_search is None and "canonical_search" in self.model_fields_set:
            _dict['canonicalSearch'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "type": obj.get("type"),
            "paymentDateTime": obj.get("paymentDateTime"),
            "paymentReference": obj.get("paymentReference"),
            "remittanceInformation": obj.get("remittanceInformation"),
            "amount": obj.get("amount"),
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "customerBankAccountIBAN": obj.get("customerBankAccountIBAN"),
            "isManual": obj.get("isManual"),
            "paymentEntityReferences": [PaymentEntityReferenceDTO.from_dict(_item) for _item in obj["paymentEntityReferences"]] if obj.get("paymentEntityReferences") is not None else None,
            "isReversed": obj.get("isReversed"),
            "reversalDetails": PaymentReversalDetailsDTO.from_dict(obj["reversalDetails"]) if obj.get("reversalDetails") is not None else None,
            "outgoingMutationId": obj.get("outgoingMutationId"),
            "outgoingBankingTransactionId": obj.get("outgoingBankingTransactionId"),
            "outgoingBankingTransactionIdentification": obj.get("outgoingBankingTransactionIdentification"),
            "isConfirmedByBank": obj.get("isConfirmedByBank"),
            "incomingBankingTransactionId": obj.get("incomingBankingTransactionId"),
            "incomingBankingTransactionIdentification": obj.get("incomingBankingTransactionIdentification"),
            "incomingMutationId": obj.get("incomingMutationId"),
            "canonicalSearch": obj.get("canonicalSearch")
        })
        return _obj


