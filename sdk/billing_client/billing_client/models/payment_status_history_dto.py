# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.payment_process_status import PaymentProcessStatus
from billing_client.models.payment_reversal_reason import PaymentReversalReason
from typing import Optional, Set
from typing_extensions import Self

class PaymentStatusHistoryDTO(BaseModel):
    """
    Represents a history entry for payment status changes
    """ # noqa: E501
    payment_status: Optional[PaymentProcessStatus] = Field(default=None, description="Status of the payment process", alias="paymentStatus")
    outgoing_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="Identifier of the outgoing banking transaction", alias="outgoingBankingTransactionId")
    outgoing_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="Identification of the outgoing banking transaction", alias="outgoingBankingTransactionIdentification")
    outgoing_mutation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the outgoing mutation", alias="outgoingMutationId")
    outgoing_mutation_description: Optional[StrictStr] = Field(default=None, description="Description of the outgoing mutation", alias="outgoingMutationDescription")
    incoming_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="Identifier of the incoming banking transaction", alias="incomingBankingTransactionId")
    incoming_banking_transaction_identification: Optional[StrictStr] = Field(default=None, description="Identification of the incoming banking transaction", alias="incomingBankingTransactionIdentification")
    incoming_mutation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the incoming mutation", alias="incomingMutationId")
    incoming_mutation_description: Optional[StrictStr] = Field(default=None, description="Description of the incoming mutation", alias="incomingMutationDescription")
    reversal_reason: Optional[PaymentReversalReason] = Field(default=None, description="Reason for payment reversal", alias="reversalReason")
    reversal_additional_information: Optional[StrictStr] = Field(default=None, description="Additional information about the reversal", alias="reversalAdditionalInformation")
    mutation_date_time: Optional[datetime] = Field(default=None, description="Date and time of the mutation", alias="mutationDateTime")
    __properties: ClassVar[List[str]] = ["paymentStatus", "outgoingBankingTransactionId", "outgoingBankingTransactionIdentification", "outgoingMutationId", "outgoingMutationDescription", "incomingBankingTransactionId", "incomingBankingTransactionIdentification", "incomingMutationId", "incomingMutationDescription", "reversalReason", "reversalAdditionalInformation", "mutationDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentStatusHistoryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if payment_status (nullable) is None
        # and model_fields_set contains the field
        if self.payment_status is None and "payment_status" in self.model_fields_set:
            _dict['paymentStatus'] = None

        # set to None if outgoing_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_id is None and "outgoing_banking_transaction_id" in self.model_fields_set:
            _dict['outgoingBankingTransactionId'] = None

        # set to None if outgoing_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_identification is None and "outgoing_banking_transaction_identification" in self.model_fields_set:
            _dict['outgoingBankingTransactionIdentification'] = None

        # set to None if outgoing_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_id is None and "outgoing_mutation_id" in self.model_fields_set:
            _dict['outgoingMutationId'] = None

        # set to None if outgoing_mutation_description (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_description is None and "outgoing_mutation_description" in self.model_fields_set:
            _dict['outgoingMutationDescription'] = None

        # set to None if incoming_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_banking_transaction_id is None and "incoming_banking_transaction_id" in self.model_fields_set:
            _dict['incomingBankingTransactionId'] = None

        # set to None if incoming_banking_transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_banking_transaction_identification is None and "incoming_banking_transaction_identification" in self.model_fields_set:
            _dict['incomingBankingTransactionIdentification'] = None

        # set to None if incoming_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_mutation_id is None and "incoming_mutation_id" in self.model_fields_set:
            _dict['incomingMutationId'] = None

        # set to None if incoming_mutation_description (nullable) is None
        # and model_fields_set contains the field
        if self.incoming_mutation_description is None and "incoming_mutation_description" in self.model_fields_set:
            _dict['incomingMutationDescription'] = None

        # set to None if reversal_reason (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_reason is None and "reversal_reason" in self.model_fields_set:
            _dict['reversalReason'] = None

        # set to None if reversal_additional_information (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_additional_information is None and "reversal_additional_information" in self.model_fields_set:
            _dict['reversalAdditionalInformation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentStatusHistoryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentStatus": obj.get("paymentStatus"),
            "outgoingBankingTransactionId": obj.get("outgoingBankingTransactionId"),
            "outgoingBankingTransactionIdentification": obj.get("outgoingBankingTransactionIdentification"),
            "outgoingMutationId": obj.get("outgoingMutationId"),
            "outgoingMutationDescription": obj.get("outgoingMutationDescription"),
            "incomingBankingTransactionId": obj.get("incomingBankingTransactionId"),
            "incomingBankingTransactionIdentification": obj.get("incomingBankingTransactionIdentification"),
            "incomingMutationId": obj.get("incomingMutationId"),
            "incomingMutationDescription": obj.get("incomingMutationDescription"),
            "reversalReason": obj.get("reversalReason"),
            "reversalAdditionalInformation": obj.get("reversalAdditionalInformation"),
            "mutationDateTime": obj.get("mutationDateTime")
        })
        return _obj


