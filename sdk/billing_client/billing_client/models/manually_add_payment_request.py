# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.country_code import CountryCode
from billing_client.models.payment_entity_reference_request import PaymentEntityReferenceRequest
from typing import Optional, Set
from typing_extensions import Self

class ManuallyAddPaymentRequest(BaseModel):
    """
    Represents a request to manually add a payment to the system.  This DTO is used to record payments that are not automatically processed through the banking system.
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer who made the payment.", alias="customerId")
    iban: Optional[StrictStr] = Field(default=None, description="The International Bank Account Number (IBAN) from which the payment was made.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the payment.")
    payment_date_time: Optional[datetime] = Field(default=None, description="The date and time when the payment was made.", alias="paymentDateTime")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the company bank account that received the payment.", alias="companyBankAccountId")
    payment_reference: Optional[StrictStr] = Field(default=None, description="The payment reference text associated with the payment.", alias="paymentReference")
    references: Optional[List[PaymentEntityReferenceRequest]] = Field(default=None, description="A list of references linking this payment to other entities in the system.")
    is_payment_reference_structured: Optional[StrictBool] = Field(default=None, description="Indicates whether the payment reference follows a structured format.", alias="isPaymentReferenceStructured")
    organization_country: Optional[CountryCode] = Field(default=None, description="The country code of the organization processing the payment.  Used for validating structured payment references.", alias="organizationCountry")
    __properties: ClassVar[List[str]] = ["customerId", "iban", "amount", "paymentDateTime", "companyBankAccountId", "paymentReference", "references", "isPaymentReferenceStructured", "organizationCountry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManuallyAddPaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if payment_reference (nullable) is None
        # and model_fields_set contains the field
        if self.payment_reference is None and "payment_reference" in self.model_fields_set:
            _dict['paymentReference'] = None

        # set to None if references (nullable) is None
        # and model_fields_set contains the field
        if self.references is None and "references" in self.model_fields_set:
            _dict['references'] = None

        # set to None if organization_country (nullable) is None
        # and model_fields_set contains the field
        if self.organization_country is None and "organization_country" in self.model_fields_set:
            _dict['organizationCountry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManuallyAddPaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "iban": obj.get("iban"),
            "amount": obj.get("amount"),
            "paymentDateTime": obj.get("paymentDateTime"),
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "paymentReference": obj.get("paymentReference"),
            "references": [PaymentEntityReferenceRequest.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "isPaymentReferenceStructured": obj.get("isPaymentReferenceStructured"),
            "organizationCountry": obj.get("organizationCountry")
        })
        return _obj


