# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.formula_validation_result_dto import FormulaValidationResultDTO
from billing_client.models.tariff_formula_dto import TariffFormulaDTO
from typing import Optional, Set
from typing_extensions import Self

class CalculationConfigurationBillingItemDTO(BaseModel):
    """
    Represents a billing item within a calculation configuration.  This DTO contains information about how a specific billing item should be calculated,  including its tariff formula and validation results.
    """ # noqa: E501
    billing_item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the billing item.", alias="billingItemId")
    deviating_tariff_calculation: Optional[StrictBool] = Field(default=None, description="Indicates whether this billing item uses a deviating tariff calculation method  that differs from the standard calculation.", alias="deviatingTariffCalculation")
    tariff_formula: Optional[TariffFormulaDTO] = Field(default=None, description="The tariff formula used to calculate the billing item's cost.", alias="tariffFormula")
    tariff_validation_result: Optional[FormulaValidationResultDTO] = Field(default=None, description="The validation results for the tariff formula, indicating whether the formula  is valid and any validation errors that may exist.", alias="tariffValidationResult")
    __properties: ClassVar[List[str]] = ["billingItemId", "deviatingTariffCalculation", "tariffFormula", "tariffValidationResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculationConfigurationBillingItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tariff_formula
        if self.tariff_formula:
            _dict['tariffFormula'] = self.tariff_formula.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tariff_validation_result
        if self.tariff_validation_result:
            _dict['tariffValidationResult'] = self.tariff_validation_result.to_dict()
        # set to None if billing_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_id is None and "billing_item_id" in self.model_fields_set:
            _dict['billingItemId'] = None

        # set to None if tariff_formula (nullable) is None
        # and model_fields_set contains the field
        if self.tariff_formula is None and "tariff_formula" in self.model_fields_set:
            _dict['tariffFormula'] = None

        # set to None if tariff_validation_result (nullable) is None
        # and model_fields_set contains the field
        if self.tariff_validation_result is None and "tariff_validation_result" in self.model_fields_set:
            _dict['tariffValidationResult'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculationConfigurationBillingItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingItemId": obj.get("billingItemId"),
            "deviatingTariffCalculation": obj.get("deviatingTariffCalculation"),
            "tariffFormula": TariffFormulaDTO.from_dict(obj["tariffFormula"]) if obj.get("tariffFormula") is not None else None,
            "tariffValidationResult": FormulaValidationResultDTO.from_dict(obj["tariffValidationResult"]) if obj.get("tariffValidationResult") is not None else None
        })
        return _obj


