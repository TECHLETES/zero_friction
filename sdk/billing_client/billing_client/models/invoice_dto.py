# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.advance_calculation_details_dto import AdvanceCalculationDetailsDTO
from billing_client.models.collection_case_details_dto import CollectionCaseDetailsDTO
from billing_client.models.consumption_calculation_input_dto import ConsumptionCalculationInputDTO
from billing_client.models.debtor_dto import DebtorDTO
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.export_status import ExportStatus
from billing_client.models.invoice_line_dto import InvoiceLineDTO
from billing_client.models.invoice_status import InvoiceStatus
from billing_client.models.invoice_type import InvoiceType
from billing_client.models.invoice_ubl_attachment_details_dto import InvoiceUBLAttachmentDetailsDTO
from billing_client.models.localised_error_dto import LocalisedErrorDTO
from billing_client.models.payment_details_dto import PaymentDetailsDTO
from billing_client.models.product_reference_dto import ProductReferenceDTO
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from billing_client.models.sent_status import SentStatus
from typing import Optional, Set
from typing_extensions import Self

class InvoiceDTO(BaseModel):
    """
    Represents an invoice in the billing system
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    invoice_num: Optional[StrictStr] = Field(default=None, description="Invoice number", alias="invoiceNum")
    sequence_number: Optional[StrictInt] = Field(default=None, description="Sequential number of the invoice", alias="sequenceNumber")
    invoice_date: Optional[datetime] = Field(default=None, description="Date when the invoice was created", alias="invoiceDate")
    type: Optional[InvoiceType] = Field(default=None, description="Type of the invoice")
    status: Optional[InvoiceStatus] = Field(default=None, description="Current status of the invoice")
    debtor: Optional[DebtorDTO] = Field(default=None, description="Debtor information for the invoice")
    contract_id: Optional[StrictStr] = Field(default=None, description="Identifier of the associated contract", alias="contractId")
    contract_number: Optional[StrictStr] = Field(default=None, description="Contract number", alias="contractNumber")
    note_to_customer: Optional[StrictStr] = Field(default=None, description="Note to be displayed to the customer", alias="noteToCustomer")
    external_reference: Optional[StrictStr] = Field(default=None, description="External reference for the invoice", alias="externalReference")
    due_date: Optional[datetime] = Field(default=None, description="Date when the invoice is due for payment", alias="dueDate")
    period_start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the billing period", alias="periodStartDateTime")
    period_end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the billing period", alias="periodEndDateTime")
    lines: Optional[List[InvoiceLineDTO]] = Field(default=None, description="List of invoice lines")
    remaining_invoice_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Remaining amount to be paid on the invoice", alias="remainingInvoiceAmount")
    total_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total invoice amount including VAT", alias="totalAmountInclVAT")
    total_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total invoice amount excluding VAT", alias="totalAmountExclVAT")
    payment_details: Optional[PaymentDetailsDTO] = Field(default=None, description="Payment details for the invoice", alias="paymentDetails")
    attachment_id: Optional[StrictStr] = Field(default=None, description="Identifier of the associated attachment", alias="attachmentId")
    credited_by_invoice_id: Optional[StrictStr] = Field(default=None, description="Identifier of the invoice that credited this invoice", alias="creditedByInvoiceId")
    credited_invoice_id: Optional[StrictStr] = Field(default=None, description="Identifier of the invoice that was credited by this invoice", alias="creditedInvoiceId")
    billing_completeness_id: Optional[StrictStr] = Field(default=None, description="Identifier of the associated billing completeness record", alias="billingCompletenessId")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of associated property groups", alias="propertyGroups")
    product: Optional[ProductReferenceDTO] = Field(default=None, description="Associated product reference")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, description="Identifier of the company's bank account", alias="companyBankAccountId")
    consumption_calculation_inputs: Optional[List[ConsumptionCalculationInputDTO]] = Field(default=None, description="List of consumption calculation inputs", alias="consumptionCalculationInputs")
    collection_details: Optional[CollectionCaseDetailsDTO] = Field(default=None, description="Collection case details", alias="collectionDetails")
    sent: Optional[SentStatus] = Field(default=None, description="Status of invoice sending")
    failure_reason_code: Optional[LocalisedErrorDTO] = Field(default=None, description="Localized error code for any failure", alias="failureReasonCode")
    failure_details: Optional[StrictStr] = Field(default=None, description="Detailed failure information", alias="failureDetails")
    supports_external_printing: Optional[StrictBool] = Field(default=None, description="Indicates if the document can be printed externally", alias="supportsExternalPrinting")
    export_status: Optional[ExportStatus] = Field(default=None, description="Status of invoice export", alias="exportStatus")
    new_advance_amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="New advance amount excluding VAT (obsolete, use AdvanceCalculationDetails)", alias="newAdvanceAmountExclVAT")
    new_advance_amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="New advance amount including VAT (obsolete, use AdvanceCalculationDetails)", alias="newAdvanceAmountInclVAT")
    advance_calculation_details: Optional[AdvanceCalculationDetailsDTO] = Field(default=None, description="Details of advance payment calculations", alias="advanceCalculationDetails")
    ubl_attachment_details: Optional[InvoiceUBLAttachmentDetailsDTO] = Field(default=None, description="Details of UBL attachment", alias="ublAttachmentDetails")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "invoiceNum", "sequenceNumber", "invoiceDate", "type", "status", "debtor", "contractId", "contractNumber", "noteToCustomer", "externalReference", "dueDate", "periodStartDateTime", "periodEndDateTime", "lines", "remainingInvoiceAmount", "totalAmountInclVAT", "totalAmountExclVAT", "paymentDetails", "attachmentId", "creditedByInvoiceId", "creditedInvoiceId", "billingCompletenessId", "propertyGroups", "product", "companyBankAccountId", "consumptionCalculationInputs", "collectionDetails", "sent", "failureReasonCode", "failureDetails", "supportsExternalPrinting", "exportStatus", "newAdvanceAmountExclVAT", "newAdvanceAmountInclVAT", "advanceCalculationDetails", "ublAttachmentDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
            "new_advance_amount_excl_vat",
            "new_advance_amount_incl_vat",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_details
        if self.payment_details:
            _dict['paymentDetails'] = self.payment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in consumption_calculation_inputs (list)
        _items = []
        if self.consumption_calculation_inputs:
            for _item_consumption_calculation_inputs in self.consumption_calculation_inputs:
                if _item_consumption_calculation_inputs:
                    _items.append(_item_consumption_calculation_inputs.to_dict())
            _dict['consumptionCalculationInputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of collection_details
        if self.collection_details:
            _dict['collectionDetails'] = self.collection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_reason_code
        if self.failure_reason_code:
            _dict['failureReasonCode'] = self.failure_reason_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advance_calculation_details
        if self.advance_calculation_details:
            _dict['advanceCalculationDetails'] = self.advance_calculation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ubl_attachment_details
        if self.ubl_attachment_details:
            _dict['ublAttachmentDetails'] = self.ubl_attachment_details.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if invoice_num (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_num is None and "invoice_num" in self.model_fields_set:
            _dict['invoiceNum'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if debtor (nullable) is None
        # and model_fields_set contains the field
        if self.debtor is None and "debtor" in self.model_fields_set:
            _dict['debtor'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict['contractNumber'] = None

        # set to None if note_to_customer (nullable) is None
        # and model_fields_set contains the field
        if self.note_to_customer is None and "note_to_customer" in self.model_fields_set:
            _dict['noteToCustomer'] = None

        # set to None if external_reference (nullable) is None
        # and model_fields_set contains the field
        if self.external_reference is None and "external_reference" in self.model_fields_set:
            _dict['externalReference'] = None

        # set to None if lines (nullable) is None
        # and model_fields_set contains the field
        if self.lines is None and "lines" in self.model_fields_set:
            _dict['lines'] = None

        # set to None if payment_details (nullable) is None
        # and model_fields_set contains the field
        if self.payment_details is None and "payment_details" in self.model_fields_set:
            _dict['paymentDetails'] = None

        # set to None if attachment_id (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_id is None and "attachment_id" in self.model_fields_set:
            _dict['attachmentId'] = None

        # set to None if credited_by_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.credited_by_invoice_id is None and "credited_by_invoice_id" in self.model_fields_set:
            _dict['creditedByInvoiceId'] = None

        # set to None if credited_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.credited_invoice_id is None and "credited_invoice_id" in self.model_fields_set:
            _dict['creditedInvoiceId'] = None

        # set to None if billing_completeness_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_completeness_id is None and "billing_completeness_id" in self.model_fields_set:
            _dict['billingCompletenessId'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if product (nullable) is None
        # and model_fields_set contains the field
        if self.product is None and "product" in self.model_fields_set:
            _dict['product'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        # set to None if consumption_calculation_inputs (nullable) is None
        # and model_fields_set contains the field
        if self.consumption_calculation_inputs is None and "consumption_calculation_inputs" in self.model_fields_set:
            _dict['consumptionCalculationInputs'] = None

        # set to None if collection_details (nullable) is None
        # and model_fields_set contains the field
        if self.collection_details is None and "collection_details" in self.model_fields_set:
            _dict['collectionDetails'] = None

        # set to None if sent (nullable) is None
        # and model_fields_set contains the field
        if self.sent is None and "sent" in self.model_fields_set:
            _dict['sent'] = None

        # set to None if failure_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.failure_reason_code is None and "failure_reason_code" in self.model_fields_set:
            _dict['failureReasonCode'] = None

        # set to None if failure_details (nullable) is None
        # and model_fields_set contains the field
        if self.failure_details is None and "failure_details" in self.model_fields_set:
            _dict['failureDetails'] = None

        # set to None if export_status (nullable) is None
        # and model_fields_set contains the field
        if self.export_status is None and "export_status" in self.model_fields_set:
            _dict['exportStatus'] = None

        # set to None if new_advance_amount_excl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.new_advance_amount_excl_vat is None and "new_advance_amount_excl_vat" in self.model_fields_set:
            _dict['newAdvanceAmountExclVAT'] = None

        # set to None if new_advance_amount_incl_vat (nullable) is None
        # and model_fields_set contains the field
        if self.new_advance_amount_incl_vat is None and "new_advance_amount_incl_vat" in self.model_fields_set:
            _dict['newAdvanceAmountInclVAT'] = None

        # set to None if advance_calculation_details (nullable) is None
        # and model_fields_set contains the field
        if self.advance_calculation_details is None and "advance_calculation_details" in self.model_fields_set:
            _dict['advanceCalculationDetails'] = None

        # set to None if ubl_attachment_details (nullable) is None
        # and model_fields_set contains the field
        if self.ubl_attachment_details is None and "ubl_attachment_details" in self.model_fields_set:
            _dict['ublAttachmentDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "invoiceNum": obj.get("invoiceNum"),
            "sequenceNumber": obj.get("sequenceNumber"),
            "invoiceDate": obj.get("invoiceDate"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "debtor": DebtorDTO.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "contractId": obj.get("contractId"),
            "contractNumber": obj.get("contractNumber"),
            "noteToCustomer": obj.get("noteToCustomer"),
            "externalReference": obj.get("externalReference"),
            "dueDate": obj.get("dueDate"),
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "lines": [InvoiceLineDTO.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "remainingInvoiceAmount": obj.get("remainingInvoiceAmount"),
            "totalAmountInclVAT": obj.get("totalAmountInclVAT"),
            "totalAmountExclVAT": obj.get("totalAmountExclVAT"),
            "paymentDetails": PaymentDetailsDTO.from_dict(obj["paymentDetails"]) if obj.get("paymentDetails") is not None else None,
            "attachmentId": obj.get("attachmentId"),
            "creditedByInvoiceId": obj.get("creditedByInvoiceId"),
            "creditedInvoiceId": obj.get("creditedInvoiceId"),
            "billingCompletenessId": obj.get("billingCompletenessId"),
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "product": ProductReferenceDTO.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "companyBankAccountId": obj.get("companyBankAccountId"),
            "consumptionCalculationInputs": [ConsumptionCalculationInputDTO.from_dict(_item) for _item in obj["consumptionCalculationInputs"]] if obj.get("consumptionCalculationInputs") is not None else None,
            "collectionDetails": CollectionCaseDetailsDTO.from_dict(obj["collectionDetails"]) if obj.get("collectionDetails") is not None else None,
            "sent": obj.get("sent"),
            "failureReasonCode": LocalisedErrorDTO.from_dict(obj["failureReasonCode"]) if obj.get("failureReasonCode") is not None else None,
            "failureDetails": obj.get("failureDetails"),
            "supportsExternalPrinting": obj.get("supportsExternalPrinting"),
            "exportStatus": obj.get("exportStatus"),
            "newAdvanceAmountExclVAT": obj.get("newAdvanceAmountExclVAT"),
            "newAdvanceAmountInclVAT": obj.get("newAdvanceAmountInclVAT"),
            "advanceCalculationDetails": AdvanceCalculationDetailsDTO.from_dict(obj["advanceCalculationDetails"]) if obj.get("advanceCalculationDetails") is not None else None,
            "ublAttachmentDetails": InvoiceUBLAttachmentDetailsDTO.from_dict(obj["ublAttachmentDetails"]) if obj.get("ublAttachmentDetails") is not None else None
        })
        return _obj


