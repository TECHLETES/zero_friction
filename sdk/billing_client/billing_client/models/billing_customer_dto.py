# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.culture_info import CultureInfo
from billing_client.models.customer_billing_settings_dto import CustomerBillingSettingsDTO
from billing_client.models.customer_group_reference_dto import CustomerGroupReferenceDTO
from billing_client.models.customer_type import CustomerType
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.payment_method import PaymentMethod
from billing_client.models.property_group_reference_dto import PropertyGroupReferenceDTO
from typing import Optional, Set
from typing_extensions import Self

class BillingCustomerDTO(BaseModel):
    """
    Represents a billing customer with their associated settings and information.  This DTO contains all the necessary information about a customer's billing configuration,  including payment terms, property groups, and billing settings.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    account_number: Optional[StrictStr] = Field(default=None, description="The unique account number assigned to the customer.", alias="accountNumber")
    short_display_name: Optional[StrictStr] = Field(default=None, description="A shortened display name for the customer.", alias="shortDisplayName")
    payment_terms_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the payment terms associated with the customer.", alias="paymentTermsId")
    default_payment_method: Optional[PaymentMethod] = Field(default=None, description="The default payment method for the customer.", alias="defaultPaymentMethod")
    customer_type: Optional[CustomerType] = Field(default=None, description="The type of customer.", alias="customerType")
    customer_group: Optional[CustomerGroupReferenceDTO] = Field(default=None, description="Reference to the customer group this customer belongs to.", alias="customerGroup")
    property_groups: Optional[List[PropertyGroupReferenceDTO]] = Field(default=None, description="List of property groups associated with this customer.", alias="propertyGroups")
    culture: Optional[CultureInfo] = Field(default=None, description="The culture settings for the customer.")
    collection_flow_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the collection flow associated with the customer.", alias="collectionFlowId")
    billing_settings: Optional[CustomerBillingSettingsDTO] = Field(default=None, description="The billing settings specific to this customer.", alias="billingSettings")
    organization_number: Optional[StrictStr] = Field(default=None, description="The organization number of the customer.", alias="organizationNumber")
    vat_number: Optional[StrictStr] = Field(default=None, description="The VAT number of the customer.", alias="vatNumber")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "accountNumber", "shortDisplayName", "paymentTermsId", "defaultPaymentMethod", "customerType", "customerGroup", "propertyGroups", "culture", "collectionFlowId", "billingSettings", "organizationNumber", "vatNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingCustomerDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_group
        if self.customer_group:
            _dict['customerGroup'] = self.customer_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_groups (list)
        _items = []
        if self.property_groups:
            for _item_property_groups in self.property_groups:
                if _item_property_groups:
                    _items.append(_item_property_groups.to_dict())
            _dict['propertyGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_settings
        if self.billing_settings:
            _dict['billingSettings'] = self.billing_settings.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if short_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_display_name is None and "short_display_name" in self.model_fields_set:
            _dict['shortDisplayName'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if default_payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.default_payment_method is None and "default_payment_method" in self.model_fields_set:
            _dict['defaultPaymentMethod'] = None

        # set to None if customer_type (nullable) is None
        # and model_fields_set contains the field
        if self.customer_type is None and "customer_type" in self.model_fields_set:
            _dict['customerType'] = None

        # set to None if customer_group (nullable) is None
        # and model_fields_set contains the field
        if self.customer_group is None and "customer_group" in self.model_fields_set:
            _dict['customerGroup'] = None

        # set to None if property_groups (nullable) is None
        # and model_fields_set contains the field
        if self.property_groups is None and "property_groups" in self.model_fields_set:
            _dict['propertyGroups'] = None

        # set to None if culture (nullable) is None
        # and model_fields_set contains the field
        if self.culture is None and "culture" in self.model_fields_set:
            _dict['culture'] = None

        # set to None if collection_flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.collection_flow_id is None and "collection_flow_id" in self.model_fields_set:
            _dict['collectionFlowId'] = None

        # set to None if billing_settings (nullable) is None
        # and model_fields_set contains the field
        if self.billing_settings is None and "billing_settings" in self.model_fields_set:
            _dict['billingSettings'] = None

        # set to None if organization_number (nullable) is None
        # and model_fields_set contains the field
        if self.organization_number is None and "organization_number" in self.model_fields_set:
            _dict['organizationNumber'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingCustomerDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "accountNumber": obj.get("accountNumber"),
            "shortDisplayName": obj.get("shortDisplayName"),
            "paymentTermsId": obj.get("paymentTermsId"),
            "defaultPaymentMethod": obj.get("defaultPaymentMethod"),
            "customerType": obj.get("customerType"),
            "customerGroup": CustomerGroupReferenceDTO.from_dict(obj["customerGroup"]) if obj.get("customerGroup") is not None else None,
            "propertyGroups": [PropertyGroupReferenceDTO.from_dict(_item) for _item in obj["propertyGroups"]] if obj.get("propertyGroups") is not None else None,
            "culture": obj.get("culture"),
            "collectionFlowId": obj.get("collectionFlowId"),
            "billingSettings": CustomerBillingSettingsDTO.from_dict(obj["billingSettings"]) if obj.get("billingSettings") is not None else None,
            "organizationNumber": obj.get("organizationNumber"),
            "vatNumber": obj.get("vatNumber")
        })
        return _obj


