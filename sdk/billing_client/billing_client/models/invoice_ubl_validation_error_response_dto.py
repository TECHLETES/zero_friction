# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.invoice_ubl_validation_general_error_dto import InvoiceUBLValidationGeneralErrorDTO
from billing_client.models.invoice_ubl_validation_specific_error_dto import InvoiceUBLValidationSpecificErrorDTO
from typing import Optional, Set
from typing_extensions import Self

class InvoiceUBLValidationErrorResponseDTO(BaseModel):
    """
    Represents UBL validation errors for invoices
    """ # noqa: E501
    general_errors: Optional[List[InvoiceUBLValidationGeneralErrorDTO]] = Field(default=None, description="List of general validation errors that apply to multiple invoices", alias="generalErrors")
    specific_errors: Optional[List[InvoiceUBLValidationSpecificErrorDTO]] = Field(default=None, description="List of specific validation errors for individual invoices", alias="specificErrors")
    unique_invoices_with_errors: Optional[StrictInt] = Field(default=None, description="Number of unique invoices that have validation errors", alias="uniqueInvoicesWithErrors")
    __properties: ClassVar[List[str]] = ["generalErrors", "specificErrors", "uniqueInvoicesWithErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceUBLValidationErrorResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "unique_invoices_with_errors",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in general_errors (list)
        _items = []
        if self.general_errors:
            for _item_general_errors in self.general_errors:
                if _item_general_errors:
                    _items.append(_item_general_errors.to_dict())
            _dict['generalErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in specific_errors (list)
        _items = []
        if self.specific_errors:
            for _item_specific_errors in self.specific_errors:
                if _item_specific_errors:
                    _items.append(_item_specific_errors.to_dict())
            _dict['specificErrors'] = _items
        # set to None if general_errors (nullable) is None
        # and model_fields_set contains the field
        if self.general_errors is None and "general_errors" in self.model_fields_set:
            _dict['generalErrors'] = None

        # set to None if specific_errors (nullable) is None
        # and model_fields_set contains the field
        if self.specific_errors is None and "specific_errors" in self.model_fields_set:
            _dict['specificErrors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceUBLValidationErrorResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "generalErrors": [InvoiceUBLValidationGeneralErrorDTO.from_dict(_item) for _item in obj["generalErrors"]] if obj.get("generalErrors") is not None else None,
            "specificErrors": [InvoiceUBLValidationSpecificErrorDTO.from_dict(_item) for _item in obj["specificErrors"]] if obj.get("specificErrors") is not None else None,
            "uniqueInvoicesWithErrors": obj.get("uniqueInvoicesWithErrors")
        })
        return _obj


