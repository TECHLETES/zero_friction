# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.collection_charge_type import CollectionChargeType
from billing_client.models.collection_step_level import CollectionStepLevel
from billing_client.models.collection_step_status import CollectionStepStatus
from billing_client.models.collection_step_type import CollectionStepType
from billing_client.models.communication_type import CommunicationType
from billing_client.models.localised_error_dto import LocalisedErrorDTO
from billing_client.models.step_charge_dto import StepChargeDTO
from typing import Optional, Set
from typing_extensions import Self

class CollectionCaseStepDTO(BaseModel):
    """
    Represents a step in the collection case workflow.  This DTO contains information about the step's execution, communication details, and status.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the collection case step.")
    step_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the step definition.", alias="stepId")
    order: Optional[StrictInt] = Field(default=None, description="The order in which this step should be executed.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the step.")
    trigger_days: Optional[StrictInt] = Field(default=None, description="The number of days after which this step should be triggered.", alias="triggerDays")
    execute_at: Optional[datetime] = Field(default=None, description="The date and time when this step should be executed.", alias="executeAt")
    step_type: Optional[CollectionStepType] = Field(default=None, description="The type of collection step.", alias="stepType")
    communication_type: Optional[CommunicationType] = Field(default=None, description="The type of communication to be used for this step.", alias="communicationType")
    communication_level: Optional[CollectionStepLevel] = Field(default=None, description="The level of communication for this step.", alias="communicationLevel")
    charge_type: Optional[CollectionChargeType] = Field(default=None, description="The type of charge associated with this step.", alias="chargeType")
    charges: Optional[StepChargeDTO] = Field(default=None, description="The charges associated with this step.")
    executed_at: Optional[datetime] = Field(default=None, description="The date and time when this step was executed.", alias="executedAt")
    documents_sent_at: Optional[datetime] = Field(default=None, description="The date and time when documents were sent for this step.", alias="documentsSentAt")
    document_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the document associated with this step.", alias="documentId")
    email_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the email associated with this step.", alias="emailId")
    status: Optional[CollectionStepStatus] = Field(default=None, description="The current status of this collection step.")
    failure_reason_code: Optional[LocalisedErrorDTO] = Field(default=None, description="The localized error code if the step execution failed.", alias="failureReasonCode")
    failure_details: Optional[StrictStr] = Field(default=None, description="Detailed information about any failure that occurred during step execution.", alias="failureDetails")
    supports_external_printing: Optional[StrictBool] = Field(default=None, description="Indicates whether the document can be printed externally.", alias="supportsExternalPrinting")
    retry_count: Optional[StrictInt] = Field(default=None, description="The number of times this step has been retried.", alias="retryCount")
    __properties: ClassVar[List[str]] = ["id", "stepId", "order", "name", "triggerDays", "executeAt", "stepType", "communicationType", "communicationLevel", "chargeType", "charges", "executedAt", "documentsSentAt", "documentId", "emailId", "status", "failureReasonCode", "failureDetails", "supportsExternalPrinting", "retryCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionCaseStepDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charges
        if self.charges:
            _dict['charges'] = self.charges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_reason_code
        if self.failure_reason_code:
            _dict['failureReasonCode'] = self.failure_reason_code.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if step_id (nullable) is None
        # and model_fields_set contains the field
        if self.step_id is None and "step_id" in self.model_fields_set:
            _dict['stepId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if step_type (nullable) is None
        # and model_fields_set contains the field
        if self.step_type is None and "step_type" in self.model_fields_set:
            _dict['stepType'] = None

        # set to None if communication_type (nullable) is None
        # and model_fields_set contains the field
        if self.communication_type is None and "communication_type" in self.model_fields_set:
            _dict['communicationType'] = None

        # set to None if communication_level (nullable) is None
        # and model_fields_set contains the field
        if self.communication_level is None and "communication_level" in self.model_fields_set:
            _dict['communicationLevel'] = None

        # set to None if charge_type (nullable) is None
        # and model_fields_set contains the field
        if self.charge_type is None and "charge_type" in self.model_fields_set:
            _dict['chargeType'] = None

        # set to None if charges (nullable) is None
        # and model_fields_set contains the field
        if self.charges is None and "charges" in self.model_fields_set:
            _dict['charges'] = None

        # set to None if document_id (nullable) is None
        # and model_fields_set contains the field
        if self.document_id is None and "document_id" in self.model_fields_set:
            _dict['documentId'] = None

        # set to None if email_id (nullable) is None
        # and model_fields_set contains the field
        if self.email_id is None and "email_id" in self.model_fields_set:
            _dict['emailId'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if failure_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.failure_reason_code is None and "failure_reason_code" in self.model_fields_set:
            _dict['failureReasonCode'] = None

        # set to None if failure_details (nullable) is None
        # and model_fields_set contains the field
        if self.failure_details is None and "failure_details" in self.model_fields_set:
            _dict['failureDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionCaseStepDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "stepId": obj.get("stepId"),
            "order": obj.get("order"),
            "name": obj.get("name"),
            "triggerDays": obj.get("triggerDays"),
            "executeAt": obj.get("executeAt"),
            "stepType": obj.get("stepType"),
            "communicationType": obj.get("communicationType"),
            "communicationLevel": obj.get("communicationLevel"),
            "chargeType": obj.get("chargeType"),
            "charges": StepChargeDTO.from_dict(obj["charges"]) if obj.get("charges") is not None else None,
            "executedAt": obj.get("executedAt"),
            "documentsSentAt": obj.get("documentsSentAt"),
            "documentId": obj.get("documentId"),
            "emailId": obj.get("emailId"),
            "status": obj.get("status"),
            "failureReasonCode": LocalisedErrorDTO.from_dict(obj["failureReasonCode"]) if obj.get("failureReasonCode") is not None else None,
            "failureDetails": obj.get("failureDetails"),
            "supportsExternalPrinting": obj.get("supportsExternalPrinting"),
            "retryCount": obj.get("retryCount")
        })
        return _obj


