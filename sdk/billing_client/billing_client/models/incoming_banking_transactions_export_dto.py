# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.incoming_banking_transaction_status import IncomingBankingTransactionStatus
from billing_client.models.incoming_mutation_status import IncomingMutationStatus
from billing_client.models.incoming_mutation_type import IncomingMutationType
from typing import Optional, Set
from typing_extensions import Self

class IncomingBankingTransactionsExportDTO(BaseModel):
    """
    Represents an incoming banking transaction for export purposes.  This DTO contains comprehensive information about the transaction, including company, customer, and matching details.
    """ # noqa: E501
    transaction_identification: Optional[StrictStr] = Field(default=None, description="The unique identification of the transaction.", alias="transactionIdentification")
    opening_balance_date: Optional[datetime] = Field(default=None, description="The date and time of the opening balance.", alias="openingBalanceDate")
    closing_balance_date: Optional[datetime] = Field(default=None, description="The date and time of the closing balance.", alias="closingBalanceDate")
    transaction_status: Optional[IncomingBankingTransactionStatus] = Field(default=None, description="The current status of the transaction.", alias="transactionStatus")
    company_bank_account_holder: Optional[StrictStr] = Field(default=None, description="The name of the company bank account holder.", alias="companyBankAccountHolder")
    company_bank_account_iban: Optional[StrictStr] = Field(default=None, description="The IBAN of the company bank account.", alias="companyBankAccountIban")
    mutation_type: Optional[IncomingMutationType] = Field(default=None, description="The type of mutation.", alias="mutationType")
    mutation_date: Optional[datetime] = Field(default=None, description="The date and time when the mutation occurred.", alias="mutationDate")
    mutation_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the mutation.", alias="mutationAmount")
    mutation_status: Optional[IncomingMutationStatus] = Field(default=None, description="The current status of the mutation.", alias="mutationStatus")
    mutation_reference: Optional[StrictStr] = Field(default=None, description="The reference number or description of the mutation.", alias="mutationReference")
    account_holder: Optional[StrictStr] = Field(default=None, description="The name of the account holder.", alias="accountHolder")
    account_iban: Optional[StrictStr] = Field(default=None, description="The IBAN of the account.", alias="accountIban")
    customer_account_number: Optional[StrictStr] = Field(default=None, description="The account number of the customer.", alias="customerAccountNumber")
    customer_name: Optional[StrictStr] = Field(default=None, description="The name of the customer.", alias="customerName")
    outgoing_banking_identification: Optional[StrictStr] = Field(default=None, description="The identification of the matching outgoing banking transaction.", alias="outgoingBankingIdentification")
    matching_outgoing_banking_mutation_identification: Optional[StrictStr] = Field(default=None, description="The identification of the matching outgoing banking mutation.", alias="matchingOutgoingBankingMutationIdentification")
    matching_outgoing_mutation_description: Optional[StrictStr] = Field(default=None, description="The description of the matching outgoing mutation.", alias="matchingOutgoingMutationDescription")
    is_manual_match: Optional[StrictBool] = Field(default=None, description="Indicates whether this mutation was manually matched.", alias="isManualMatch")
    __properties: ClassVar[List[str]] = ["transactionIdentification", "openingBalanceDate", "closingBalanceDate", "transactionStatus", "companyBankAccountHolder", "companyBankAccountIban", "mutationType", "mutationDate", "mutationAmount", "mutationStatus", "mutationReference", "accountHolder", "accountIban", "customerAccountNumber", "customerName", "outgoingBankingIdentification", "matchingOutgoingBankingMutationIdentification", "matchingOutgoingMutationDescription", "isManualMatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionsExportDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if transaction_identification (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_identification is None and "transaction_identification" in self.model_fields_set:
            _dict['transactionIdentification'] = None

        # set to None if transaction_status (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_status is None and "transaction_status" in self.model_fields_set:
            _dict['transactionStatus'] = None

        # set to None if company_bank_account_holder (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_holder is None and "company_bank_account_holder" in self.model_fields_set:
            _dict['companyBankAccountHolder'] = None

        # set to None if company_bank_account_iban (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_iban is None and "company_bank_account_iban" in self.model_fields_set:
            _dict['companyBankAccountIban'] = None

        # set to None if mutation_type (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_type is None and "mutation_type" in self.model_fields_set:
            _dict['mutationType'] = None

        # set to None if mutation_status (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_status is None and "mutation_status" in self.model_fields_set:
            _dict['mutationStatus'] = None

        # set to None if mutation_reference (nullable) is None
        # and model_fields_set contains the field
        if self.mutation_reference is None and "mutation_reference" in self.model_fields_set:
            _dict['mutationReference'] = None

        # set to None if account_holder (nullable) is None
        # and model_fields_set contains the field
        if self.account_holder is None and "account_holder" in self.model_fields_set:
            _dict['accountHolder'] = None

        # set to None if account_iban (nullable) is None
        # and model_fields_set contains the field
        if self.account_iban is None and "account_iban" in self.model_fields_set:
            _dict['accountIban'] = None

        # set to None if customer_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.customer_account_number is None and "customer_account_number" in self.model_fields_set:
            _dict['customerAccountNumber'] = None

        # set to None if customer_name (nullable) is None
        # and model_fields_set contains the field
        if self.customer_name is None and "customer_name" in self.model_fields_set:
            _dict['customerName'] = None

        # set to None if outgoing_banking_identification (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_identification is None and "outgoing_banking_identification" in self.model_fields_set:
            _dict['outgoingBankingIdentification'] = None

        # set to None if matching_outgoing_banking_mutation_identification (nullable) is None
        # and model_fields_set contains the field
        if self.matching_outgoing_banking_mutation_identification is None and "matching_outgoing_banking_mutation_identification" in self.model_fields_set:
            _dict['matchingOutgoingBankingMutationIdentification'] = None

        # set to None if matching_outgoing_mutation_description (nullable) is None
        # and model_fields_set contains the field
        if self.matching_outgoing_mutation_description is None and "matching_outgoing_mutation_description" in self.model_fields_set:
            _dict['matchingOutgoingMutationDescription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionsExportDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionIdentification": obj.get("transactionIdentification"),
            "openingBalanceDate": obj.get("openingBalanceDate"),
            "closingBalanceDate": obj.get("closingBalanceDate"),
            "transactionStatus": obj.get("transactionStatus"),
            "companyBankAccountHolder": obj.get("companyBankAccountHolder"),
            "companyBankAccountIban": obj.get("companyBankAccountIban"),
            "mutationType": obj.get("mutationType"),
            "mutationDate": obj.get("mutationDate"),
            "mutationAmount": obj.get("mutationAmount"),
            "mutationStatus": obj.get("mutationStatus"),
            "mutationReference": obj.get("mutationReference"),
            "accountHolder": obj.get("accountHolder"),
            "accountIban": obj.get("accountIban"),
            "customerAccountNumber": obj.get("customerAccountNumber"),
            "customerName": obj.get("customerName"),
            "outgoingBankingIdentification": obj.get("outgoingBankingIdentification"),
            "matchingOutgoingBankingMutationIdentification": obj.get("matchingOutgoingBankingMutationIdentification"),
            "matchingOutgoingMutationDescription": obj.get("matchingOutgoingMutationDescription"),
            "isManualMatch": obj.get("isManualMatch")
        })
        return _obj


