# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetInvoicesQueryParams(BaseModel):
    """
    GetInvoicesQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    invoice_type: Optional[List[StrictStr]] = Field(default=None, alias="invoiceType")
    property_group_ids: Optional[List[StrictStr]] = Field(default=None, alias="propertyGroupIds")
    product_id: Optional[StrictStr] = Field(default=None, description="Filter invoices by product.", alias="productId")
    customer_id: Optional[StrictStr] = Field(default=None, alias="customerId")
    contract_id: Optional[StrictStr] = Field(default=None, alias="contractId")
    invoice_status: Optional[List[StrictStr]] = Field(default=None, alias="invoiceStatus")
    payment_process_status: Optional[List[StrictStr]] = Field(default=None, alias="paymentProcessStatus")
    billing_completeness_id: Optional[StrictStr] = Field(default=None, alias="billingCompletenessId")
    payment_method: Optional[StrictStr] = Field(default=None, alias="paymentMethod")
    start_date_time: Optional[datetime] = Field(default=None, alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, alias="endDateTime")
    period_start_date_time: Optional[datetime] = Field(default=None, alias="periodStartDateTime")
    period_end_date_time: Optional[datetime] = Field(default=None, alias="periodEndDateTime")
    period_start_date_time_begin: Optional[datetime] = Field(default=None, alias="periodStartDateTimeBegin")
    period_start_date_time_end: Optional[datetime] = Field(default=None, alias="periodStartDateTimeEnd")
    period_end_date_time_begin: Optional[datetime] = Field(default=None, alias="periodEndDateTimeBegin")
    period_end_date_time_end: Optional[datetime] = Field(default=None, alias="periodEndDateTimeEnd")
    paid_date_time_begin: Optional[datetime] = Field(default=None, alias="paidDateTimeBegin")
    export_status: Optional[StrictStr] = Field(default=None, alias="exportStatus")
    collection_case_id: Optional[StrictStr] = Field(default=None, alias="collectionCaseId")
    customer_group_id: Optional[StrictStr] = Field(default=None, alias="customerGroupId")
    company_bank_account_id: Optional[StrictStr] = Field(default=None, alias="companyBankAccountId")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "invoiceType", "propertyGroupIds", "productId", "customerId", "contractId", "invoiceStatus", "paymentProcessStatus", "billingCompletenessId", "paymentMethod", "startDateTime", "endDateTime", "periodStartDateTime", "periodEndDateTime", "periodStartDateTimeBegin", "periodStartDateTimeEnd", "periodEndDateTimeBegin", "periodEndDateTimeEnd", "paidDateTimeBegin", "exportStatus", "collectionCaseId", "customerGroupId", "companyBankAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInvoicesQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if invoice_type (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_type is None and "invoice_type" in self.model_fields_set:
            _dict['invoiceType'] = None

        # set to None if property_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.property_group_ids is None and "property_group_ids" in self.model_fields_set:
            _dict['propertyGroupIds'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['productId'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contractId'] = None

        # set to None if invoice_status (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_status is None and "invoice_status" in self.model_fields_set:
            _dict['invoiceStatus'] = None

        # set to None if payment_process_status (nullable) is None
        # and model_fields_set contains the field
        if self.payment_process_status is None and "payment_process_status" in self.model_fields_set:
            _dict['paymentProcessStatus'] = None

        # set to None if billing_completeness_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_completeness_id is None and "billing_completeness_id" in self.model_fields_set:
            _dict['billingCompletenessId'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['paymentMethod'] = None

        # set to None if start_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_date_time is None and "start_date_time" in self.model_fields_set:
            _dict['startDateTime'] = None

        # set to None if end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_date_time is None and "end_date_time" in self.model_fields_set:
            _dict['endDateTime'] = None

        # set to None if period_start_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.period_start_date_time is None and "period_start_date_time" in self.model_fields_set:
            _dict['periodStartDateTime'] = None

        # set to None if period_end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.period_end_date_time is None and "period_end_date_time" in self.model_fields_set:
            _dict['periodEndDateTime'] = None

        # set to None if period_start_date_time_begin (nullable) is None
        # and model_fields_set contains the field
        if self.period_start_date_time_begin is None and "period_start_date_time_begin" in self.model_fields_set:
            _dict['periodStartDateTimeBegin'] = None

        # set to None if period_start_date_time_end (nullable) is None
        # and model_fields_set contains the field
        if self.period_start_date_time_end is None and "period_start_date_time_end" in self.model_fields_set:
            _dict['periodStartDateTimeEnd'] = None

        # set to None if period_end_date_time_begin (nullable) is None
        # and model_fields_set contains the field
        if self.period_end_date_time_begin is None and "period_end_date_time_begin" in self.model_fields_set:
            _dict['periodEndDateTimeBegin'] = None

        # set to None if period_end_date_time_end (nullable) is None
        # and model_fields_set contains the field
        if self.period_end_date_time_end is None and "period_end_date_time_end" in self.model_fields_set:
            _dict['periodEndDateTimeEnd'] = None

        # set to None if paid_date_time_begin (nullable) is None
        # and model_fields_set contains the field
        if self.paid_date_time_begin is None and "paid_date_time_begin" in self.model_fields_set:
            _dict['paidDateTimeBegin'] = None

        # set to None if export_status (nullable) is None
        # and model_fields_set contains the field
        if self.export_status is None and "export_status" in self.model_fields_set:
            _dict['exportStatus'] = None

        # set to None if collection_case_id (nullable) is None
        # and model_fields_set contains the field
        if self.collection_case_id is None and "collection_case_id" in self.model_fields_set:
            _dict['collectionCaseId'] = None

        # set to None if customer_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_group_id is None and "customer_group_id" in self.model_fields_set:
            _dict['customerGroupId'] = None

        # set to None if company_bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account_id is None and "company_bank_account_id" in self.model_fields_set:
            _dict['companyBankAccountId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInvoicesQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "invoiceType": obj.get("invoiceType"),
            "propertyGroupIds": obj.get("propertyGroupIds"),
            "productId": obj.get("productId"),
            "customerId": obj.get("customerId"),
            "contractId": obj.get("contractId"),
            "invoiceStatus": obj.get("invoiceStatus"),
            "paymentProcessStatus": obj.get("paymentProcessStatus"),
            "billingCompletenessId": obj.get("billingCompletenessId"),
            "paymentMethod": obj.get("paymentMethod"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "periodStartDateTime": obj.get("periodStartDateTime"),
            "periodEndDateTime": obj.get("periodEndDateTime"),
            "periodStartDateTimeBegin": obj.get("periodStartDateTimeBegin"),
            "periodStartDateTimeEnd": obj.get("periodStartDateTimeEnd"),
            "periodEndDateTimeBegin": obj.get("periodEndDateTimeBegin"),
            "periodEndDateTimeEnd": obj.get("periodEndDateTimeEnd"),
            "paidDateTimeBegin": obj.get("paidDateTimeBegin"),
            "exportStatus": obj.get("exportStatus"),
            "collectionCaseId": obj.get("collectionCaseId"),
            "customerGroupId": obj.get("customerGroupId"),
            "companyBankAccountId": obj.get("companyBankAccountId")
        })
        return _obj


