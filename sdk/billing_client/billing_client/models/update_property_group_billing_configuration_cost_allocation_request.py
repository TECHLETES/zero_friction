# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.property_group_calculation_configuration_request import PropertyGroupCalculationConfigurationRequest
from billing_client.models.required_incoming_invoice_component_request_details import RequiredIncomingInvoiceComponentRequestDetails
from typing import Optional, Set
from typing_extensions import Self

class UpdatePropertyGroupBillingConfigurationCostAllocationRequest(BaseModel):
    """
    Represents a request to update cost allocation settings for a property group billing configuration.  This DTO is used to configure how costs are allocated across different components and calculation configurations.
    """ # noqa: E501
    required_incoming_invoice_components: Optional[List[RequiredIncomingInvoiceComponentRequestDetails]] = Field(default=None, description="List of required incoming invoice components with their details.", alias="requiredIncomingInvoiceComponents")
    calculation_configurations: Optional[List[PropertyGroupCalculationConfigurationRequest]] = Field(default=None, description="List of calculation configurations for the property group.", alias="calculationConfigurations")
    __properties: ClassVar[List[str]] = ["requiredIncomingInvoiceComponents", "calculationConfigurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePropertyGroupBillingConfigurationCostAllocationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in required_incoming_invoice_components (list)
        _items = []
        if self.required_incoming_invoice_components:
            for _item_required_incoming_invoice_components in self.required_incoming_invoice_components:
                if _item_required_incoming_invoice_components:
                    _items.append(_item_required_incoming_invoice_components.to_dict())
            _dict['requiredIncomingInvoiceComponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calculation_configurations (list)
        _items = []
        if self.calculation_configurations:
            for _item_calculation_configurations in self.calculation_configurations:
                if _item_calculation_configurations:
                    _items.append(_item_calculation_configurations.to_dict())
            _dict['calculationConfigurations'] = _items
        # set to None if required_incoming_invoice_components (nullable) is None
        # and model_fields_set contains the field
        if self.required_incoming_invoice_components is None and "required_incoming_invoice_components" in self.model_fields_set:
            _dict['requiredIncomingInvoiceComponents'] = None

        # set to None if calculation_configurations (nullable) is None
        # and model_fields_set contains the field
        if self.calculation_configurations is None and "calculation_configurations" in self.model_fields_set:
            _dict['calculationConfigurations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePropertyGroupBillingConfigurationCostAllocationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requiredIncomingInvoiceComponents": [RequiredIncomingInvoiceComponentRequestDetails.from_dict(_item) for _item in obj["requiredIncomingInvoiceComponents"]] if obj.get("requiredIncomingInvoiceComponents") is not None else None,
            "calculationConfigurations": [PropertyGroupCalculationConfigurationRequest.from_dict(_item) for _item in obj["calculationConfigurations"]] if obj.get("calculationConfigurations") is not None else None
        })
        return _obj


