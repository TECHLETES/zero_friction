# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.invoice_line_type import InvoiceLineType
from billing_client.models.unit_of_measure import UnitOfMeasure
from typing import Optional, Set
from typing_extensions import Self

class CreateInvoiceLinesRequest(BaseModel):
    """
    Represents a line item in an invoice.  This DTO contains the details of individual items or services being billed.
    """ # noqa: E501
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of the item or service.")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, description="The unit of measure for the quantity (e.g., pieces, hours, etc.).", alias="unitOfMeasure")
    billing_item_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the billing item.", alias="billingItemId")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price per unit of the item or service.", alias="unitPrice")
    amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount including VAT for this line item.", alias="amountInclVAT")
    amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount excluding VAT for this line item.", alias="amountExclVAT")
    line_type: Optional[InvoiceLineType] = Field(default=None, description="The type of line item (e.g., product, service, etc.).", alias="lineType")
    service_location_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the service location.", alias="serviceLocationId")
    start_date_time: Optional[datetime] = Field(default=None, description="The start date and time of the service period.", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="The end date and time of the service period.", alias="endDateTime")
    tax_code_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the tax code applied to this line item.", alias="taxCodeId")
    description: Optional[StrictStr] = Field(default=None, description="A description of the line item.")
    __properties: ClassVar[List[str]] = ["quantity", "unitOfMeasure", "billingItemId", "unitPrice", "amountInclVAT", "amountExclVAT", "lineType", "serviceLocationId", "startDateTime", "endDateTime", "taxCodeId", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvoiceLinesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if billing_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_id is None and "billing_item_id" in self.model_fields_set:
            _dict['billingItemId'] = None

        # set to None if line_type (nullable) is None
        # and model_fields_set contains the field
        if self.line_type is None and "line_type" in self.model_fields_set:
            _dict['lineType'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if tax_code_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_code_id is None and "tax_code_id" in self.model_fields_set:
            _dict['taxCodeId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvoiceLinesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quantity": obj.get("quantity"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "billingItemId": obj.get("billingItemId"),
            "unitPrice": obj.get("unitPrice"),
            "amountInclVAT": obj.get("amountInclVAT"),
            "amountExclVAT": obj.get("amountExclVAT"),
            "lineType": obj.get("lineType"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "taxCodeId": obj.get("taxCodeId"),
            "description": obj.get("description")
        })
        return _obj


