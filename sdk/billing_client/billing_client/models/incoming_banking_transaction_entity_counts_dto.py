# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IncomingBankingTransactionEntityCountsDTO(BaseModel):
    """
    Contains statistics about the entities processed in an incoming banking transaction file.
    """ # noqa: E501
    number_of_bank_transfers: Optional[StrictInt] = Field(default=None, description="Total number of bank transfers in the file.", alias="numberOfBankTransfers")
    number_of_reversals: Optional[StrictInt] = Field(default=None, description="Total number of reversals in the file.", alias="numberOfReversals")
    number_of_confirmations: Optional[StrictInt] = Field(default=None, description="Total number of confirmations in the file.", alias="numberOfConfirmations")
    processed_bank_transfers: Optional[StrictInt] = Field(default=None, description="Number of successfully processed bank transfers.", alias="processedBankTransfers")
    processed_reversals: Optional[StrictInt] = Field(default=None, description="Number of successfully processed reversals.", alias="processedReversals")
    processed_confirmations: Optional[StrictInt] = Field(default=None, description="Number of successfully processed confirmations.", alias="processedConfirmations")
    failed_bank_transfers: Optional[StrictInt] = Field(default=None, description="Number of failed bank transfers.", alias="failedBankTransfers")
    failed_reversals: Optional[StrictInt] = Field(default=None, description="Number of failed reversals.", alias="failedReversals")
    failed_confirmations: Optional[StrictInt] = Field(default=None, description="Number of failed confirmations.", alias="failedConfirmations")
    __properties: ClassVar[List[str]] = ["numberOfBankTransfers", "numberOfReversals", "numberOfConfirmations", "processedBankTransfers", "processedReversals", "processedConfirmations", "failedBankTransfers", "failedReversals", "failedConfirmations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionEntityCountsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IncomingBankingTransactionEntityCountsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numberOfBankTransfers": obj.get("numberOfBankTransfers"),
            "numberOfReversals": obj.get("numberOfReversals"),
            "numberOfConfirmations": obj.get("numberOfConfirmations"),
            "processedBankTransfers": obj.get("processedBankTransfers"),
            "processedReversals": obj.get("processedReversals"),
            "processedConfirmations": obj.get("processedConfirmations"),
            "failedBankTransfers": obj.get("failedBankTransfers"),
            "failedReversals": obj.get("failedReversals"),
            "failedConfirmations": obj.get("failedConfirmations")
        })
        return _obj


