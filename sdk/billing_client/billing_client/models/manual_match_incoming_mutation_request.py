# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from billing_client.models.matching_transaction_request import MatchingTransactionRequest
from typing import Optional, Set
from typing_extensions import Self

class ManualMatchIncomingMutationRequest(BaseModel):
    """
    Represents a request to manually match an incoming banking transaction with outgoing transactions or a customer.  This DTO allows for flexible matching scenarios including direct transaction matching, customer-based matching,  or matching with specific outgoing transactions.
    """ # noqa: E501
    outgoing_banking_transaction_id: Optional[StrictStr] = Field(default=None, description="The ID of the outgoing banking transaction to match with.  This field must be empty if other matching criteria are provided.", alias="outgoingBankingTransactionId")
    outgoing_mutation_id: Optional[StrictStr] = Field(default=None, description="The ID of the outgoing mutation to match with.  This field must be empty if other matching criteria are provided.", alias="outgoingMutationId")
    customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer to match with.  This field must be empty if other matching criteria are provided.", alias="customerId")
    matching_transactions: Optional[List[MatchingTransactionRequest]] = Field(default=None, description="A list of transactions to match with their respective settlement amounts.  This field must be empty if other matching criteria are provided.", alias="matchingTransactions")
    __properties: ClassVar[List[str]] = ["outgoingBankingTransactionId", "outgoingMutationId", "customerId", "matchingTransactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManualMatchIncomingMutationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matching_transactions (list)
        _items = []
        if self.matching_transactions:
            for _item_matching_transactions in self.matching_transactions:
                if _item_matching_transactions:
                    _items.append(_item_matching_transactions.to_dict())
            _dict['matchingTransactions'] = _items
        # set to None if outgoing_banking_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_banking_transaction_id is None and "outgoing_banking_transaction_id" in self.model_fields_set:
            _dict['outgoingBankingTransactionId'] = None

        # set to None if outgoing_mutation_id (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_mutation_id is None and "outgoing_mutation_id" in self.model_fields_set:
            _dict['outgoingMutationId'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if matching_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.matching_transactions is None and "matching_transactions" in self.model_fields_set:
            _dict['matchingTransactions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManualMatchIncomingMutationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outgoingBankingTransactionId": obj.get("outgoingBankingTransactionId"),
            "outgoingMutationId": obj.get("outgoingMutationId"),
            "customerId": obj.get("customerId"),
            "matchingTransactions": [MatchingTransactionRequest.from_dict(_item) for _item in obj["matchingTransactions"]] if obj.get("matchingTransactions") is not None else None
        })
        return _obj


