# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CustAgingOverviewCountResponseDTO(BaseModel):
    """
    Represents an overview of customer aging counts and amounts.  This DTO provides aggregated financial information about outstanding transactions across different aging buckets.
    """ # noqa: E501
    open_credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of open credit transactions.", alias="openCredits")
    open_debits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of all open transactions to be paid by the customer", alias="openDebits")
    total_open_not_overdue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Open amount and not yet overdue", alias="totalOpenNotOverdue")
    total_overdue30_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 0 and 30 days (excluding end date).", alias="totalOverdue30D")
    total_overdue60_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 30 and 60 days (excluding end date).", alias="totalOverdue60D")
    total_overdue90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue between 60 and 90 days (excluding end date).", alias="totalOverdue90D")
    total_overdue_over90_d: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of transactions overdue for more than 90 days.", alias="totalOverdueOver90D")
    total_collection_costs_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of open collection costs, including both open and potentially overdue costs.", alias="totalCollectionCostsOpen")
    total_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of all open transactions.", alias="totalOpen")
    __properties: ClassVar[List[str]] = ["openCredits", "openDebits", "totalOpenNotOverdue", "totalOverdue30D", "totalOverdue60D", "totalOverdue90D", "totalOverdueOver90D", "totalCollectionCostsOpen", "totalOpen"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustAgingOverviewCountResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustAgingOverviewCountResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "openCredits": obj.get("openCredits"),
            "openDebits": obj.get("openDebits"),
            "totalOpenNotOverdue": obj.get("totalOpenNotOverdue"),
            "totalOverdue30D": obj.get("totalOverdue30D"),
            "totalOverdue60D": obj.get("totalOverdue60D"),
            "totalOverdue90D": obj.get("totalOverdue90D"),
            "totalOverdueOver90D": obj.get("totalOverdueOver90D"),
            "totalCollectionCostsOpen": obj.get("totalCollectionCostsOpen"),
            "totalOpen": obj.get("totalOpen")
        })
        return _obj


