# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.invoice_line_type import InvoiceLineType
from billing_client.models.unit_of_measure import UnitOfMeasure
from billing_client.models.utility_type import UtilityType
from typing import Optional, Set
from typing_extensions import Self

class InvoiceLineDTO(BaseModel):
    """
    Represents a line item on an invoice
    """ # noqa: E501
    billing_item_id: Optional[StrictStr] = Field(default=None, description="Identifier of the billing item", alias="billingItemId")
    billing_tariff_id: Optional[StrictStr] = Field(default=None, description="Identifier of the billing tariff", alias="billingTariffId")
    description: Optional[StrictStr] = Field(default=None, description="Description of the line item")
    amount_excl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount excluding VAT", alias="amountExclVAT")
    amount_incl_vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount including VAT", alias="amountInclVAT")
    vat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="VAT amount")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity of items")
    raw_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Raw quantity before any adjustments", alias="rawQuantity")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price per unit", alias="unitPrice")
    start_date_time: Optional[datetime] = Field(default=None, description="Start date and time of the line item", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="End date and time of the line item", alias="endDateTime")
    tax_code_id: Optional[StrictStr] = Field(default=None, description="Identifier of the tax code", alias="taxCodeId")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tax rate applied", alias="taxRate")
    unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, description="Unit of measure for the quantity", alias="unitOfMeasure")
    utility_type: Optional[UtilityType] = Field(default=None, description="Type of utility being billed", alias="utilityType")
    line_type: Optional[InvoiceLineType] = Field(default=None, description="Type of the line item", alias="lineType")
    consumption_based: Optional[StrictBool] = Field(default=None, description="Indicates if the line item is based on consumption", alias="consumptionBased")
    service_location_id: Optional[StrictStr] = Field(default=None, description="Identifier of the service location", alias="serviceLocationId")
    original_invoice_id: Optional[StrictStr] = Field(default=None, description="Identifier of the original invoice", alias="originalInvoiceId")
    sort_order: Optional[StrictInt] = Field(default=None, description="Sort order of the line item", alias="sortOrder")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the line item")
    __properties: ClassVar[List[str]] = ["billingItemId", "billingTariffId", "description", "amountExclVAT", "amountInclVAT", "vat", "quantity", "rawQuantity", "unitPrice", "startDateTime", "endDateTime", "taxCodeId", "taxRate", "unitOfMeasure", "utilityType", "lineType", "consumptionBased", "serviceLocationId", "originalInvoiceId", "sortOrder", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceLineDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if billing_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_id is None and "billing_item_id" in self.model_fields_set:
            _dict['billingItemId'] = None

        # set to None if billing_tariff_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_tariff_id is None and "billing_tariff_id" in self.model_fields_set:
            _dict['billingTariffId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if raw_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.raw_quantity is None and "raw_quantity" in self.model_fields_set:
            _dict['rawQuantity'] = None

        # set to None if tax_code_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_code_id is None and "tax_code_id" in self.model_fields_set:
            _dict['taxCodeId'] = None

        # set to None if unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.unit_of_measure is None and "unit_of_measure" in self.model_fields_set:
            _dict['unitOfMeasure'] = None

        # set to None if utility_type (nullable) is None
        # and model_fields_set contains the field
        if self.utility_type is None and "utility_type" in self.model_fields_set:
            _dict['utilityType'] = None

        # set to None if line_type (nullable) is None
        # and model_fields_set contains the field
        if self.line_type is None and "line_type" in self.model_fields_set:
            _dict['lineType'] = None

        # set to None if service_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_location_id is None and "service_location_id" in self.model_fields_set:
            _dict['serviceLocationId'] = None

        # set to None if original_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.original_invoice_id is None and "original_invoice_id" in self.model_fields_set:
            _dict['originalInvoiceId'] = None

        # set to None if sort_order (nullable) is None
        # and model_fields_set contains the field
        if self.sort_order is None and "sort_order" in self.model_fields_set:
            _dict['sortOrder'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceLineDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingItemId": obj.get("billingItemId"),
            "billingTariffId": obj.get("billingTariffId"),
            "description": obj.get("description"),
            "amountExclVAT": obj.get("amountExclVAT"),
            "amountInclVAT": obj.get("amountInclVAT"),
            "vat": obj.get("vat"),
            "quantity": obj.get("quantity"),
            "rawQuantity": obj.get("rawQuantity"),
            "unitPrice": obj.get("unitPrice"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "taxCodeId": obj.get("taxCodeId"),
            "taxRate": obj.get("taxRate"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "utilityType": obj.get("utilityType"),
            "lineType": obj.get("lineType"),
            "consumptionBased": obj.get("consumptionBased"),
            "serviceLocationId": obj.get("serviceLocationId"),
            "originalInvoiceId": obj.get("originalInvoiceId"),
            "sortOrder": obj.get("sortOrder"),
            "id": obj.get("id")
        })
        return _obj


