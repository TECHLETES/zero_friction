# coding: utf-8

"""
    Billing

    Billing API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from billing_client.models.entity_subject_type import EntitySubjectType
from billing_client.models.outgoing_banking_transaction_company_bank_account_dto import OutgoingBankingTransactionCompanyBankAccountDTO
from billing_client.models.outgoing_banking_transaction_entity_counts_dto import OutgoingBankingTransactionEntityCountsDTO
from billing_client.models.outgoing_banking_transaction_status import OutgoingBankingTransactionStatus
from billing_client.models.outgoing_banking_transaction_type import OutgoingBankingTransactionType
from typing import Optional, Set
from typing_extensions import Self

class OutgoingBankingTransactionDTO(BaseModel):
    """
    Represents an outgoing banking transaction in the system.  This DTO contains comprehensive information about the transaction, including its status, amounts, and related entities.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    identification: Optional[StrictStr] = Field(default=None, description="The unique identification of the outgoing banking transaction.")
    sequence_num: Optional[StrictInt] = Field(default=None, description="The sequence number of the transaction.", alias="sequenceNum")
    type: Optional[OutgoingBankingTransactionType] = Field(default=None, description="The type of outgoing banking transaction.")
    status: Optional[OutgoingBankingTransactionStatus] = Field(default=None, description="The current status of the outgoing banking transaction.")
    mutation_date_time: Optional[datetime] = Field(default=None, description="The date and time when the mutation occurred.", alias="mutationDateTime")
    company_bank_account: Optional[OutgoingBankingTransactionCompanyBankAccountDTO] = Field(default=None, description="Information about the company bank account associated with this transaction.", alias="companyBankAccount")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the file containing the transaction details.", alias="fileName")
    internal_file_path: Optional[StrictStr] = Field(default=None, description="The internal file path where the transaction file is stored.", alias="internalFilePath")
    total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount of the transaction.", alias="totalAmount")
    entity_counts: Optional[OutgoingBankingTransactionEntityCountsDTO] = Field(default=None, description="Counts of various entities associated with this transaction.", alias="entityCounts")
    migrated: Optional[StrictBool] = Field(default=None, description="Indicates whether this transaction has been migrated from an older system.")
    locked: Optional[StrictBool] = Field(default=None, description="Indicates whether this transaction is locked for modifications.")
    confirming_incoming_banking_transactions: Optional[Dict[str, Optional[StrictStr]]] = Field(default=None, description="Dictionary mapping incoming banking transaction IDs to their confirmations.", alias="confirmingIncomingBankingTransactions")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "identification", "sequenceNum", "type", "status", "mutationDateTime", "companyBankAccount", "fileName", "internalFilePath", "totalAmount", "entityCounts", "migrated", "locked", "confirmingIncomingBankingTransactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutgoingBankingTransactionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_bank_account
        if self.company_bank_account:
            _dict['companyBankAccount'] = self.company_bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_counts
        if self.entity_counts:
            _dict['entityCounts'] = self.entity_counts.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if identification (nullable) is None
        # and model_fields_set contains the field
        if self.identification is None and "identification" in self.model_fields_set:
            _dict['identification'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if company_bank_account (nullable) is None
        # and model_fields_set contains the field
        if self.company_bank_account is None and "company_bank_account" in self.model_fields_set:
            _dict['companyBankAccount'] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['fileName'] = None

        # set to None if internal_file_path (nullable) is None
        # and model_fields_set contains the field
        if self.internal_file_path is None and "internal_file_path" in self.model_fields_set:
            _dict['internalFilePath'] = None

        # set to None if entity_counts (nullable) is None
        # and model_fields_set contains the field
        if self.entity_counts is None and "entity_counts" in self.model_fields_set:
            _dict['entityCounts'] = None

        # set to None if confirming_incoming_banking_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.confirming_incoming_banking_transactions is None and "confirming_incoming_banking_transactions" in self.model_fields_set:
            _dict['confirmingIncomingBankingTransactions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutgoingBankingTransactionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "identification": obj.get("identification"),
            "sequenceNum": obj.get("sequenceNum"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "mutationDateTime": obj.get("mutationDateTime"),
            "companyBankAccount": OutgoingBankingTransactionCompanyBankAccountDTO.from_dict(obj["companyBankAccount"]) if obj.get("companyBankAccount") is not None else None,
            "fileName": obj.get("fileName"),
            "internalFilePath": obj.get("internalFilePath"),
            "totalAmount": obj.get("totalAmount"),
            "entityCounts": OutgoingBankingTransactionEntityCountsDTO.from_dict(obj["entityCounts"]) if obj.get("entityCounts") is not None else None,
            "migrated": obj.get("migrated"),
            "locked": obj.get("locked"),
            "confirmingIncomingBankingTransactions": obj.get("confirmingIncomingBankingTransactions")
        })
        return _obj


