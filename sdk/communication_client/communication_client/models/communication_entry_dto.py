# coding: utf-8

"""
    Communication

    Communication API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from communication_client.models.communication_entry_status import CommunicationEntryStatus
from communication_client.models.communication_target_dto import CommunicationTargetDTO
from communication_client.models.communication_type import CommunicationType
from communication_client.models.entity_subject_type import EntitySubjectType
from communication_client.models.localised_error_dto import LocalisedErrorDTO
from typing import Optional, Set
from typing_extensions import Self

class CommunicationEntryDTO(BaseModel):
    """
    CommunicationEntryDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    subject_type: Optional[EntitySubjectType] = Field(default=None, alias="subjectType")
    subject_subtype: Optional[StrictStr] = Field(default=None, alias="subjectSubtype")
    subject_id: Optional[StrictStr] = Field(default=None, alias="subjectId")
    reference: Optional[StrictStr] = None
    communication_type: Optional[CommunicationType] = Field(default=None, alias="communicationType")
    title: Optional[StrictStr] = None
    target: Optional[CommunicationTargetDTO] = None
    sent_requested: Optional[StrictBool] = Field(default=None, alias="sentRequested")
    sent_request_id: Optional[StrictStr] = Field(default=None, alias="sentRequestId")
    sent: Optional[StrictBool] = None
    sent_date: Optional[datetime] = Field(default=None, alias="sentDate")
    finished: Optional[StrictBool] = None
    failure_reason_code: Optional[LocalisedErrorDTO] = Field(default=None, alias="failureReasonCode")
    failure_details: Optional[StrictStr] = Field(default=None, alias="failureDetails")
    communication_entry_status: Optional[CommunicationEntryStatus] = Field(default=None, alias="communicationEntryStatus")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "subjectType", "subjectSubtype", "subjectId", "reference", "communicationType", "title", "target", "sentRequested", "sentRequestId", "sent", "sentDate", "finished", "failureReasonCode", "failureDetails", "communicationEntryStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommunicationEntryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_reason_code
        if self.failure_reason_code:
            _dict['failureReasonCode'] = self.failure_reason_code.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if subject_type (nullable) is None
        # and model_fields_set contains the field
        if self.subject_type is None and "subject_type" in self.model_fields_set:
            _dict['subjectType'] = None

        # set to None if subject_subtype (nullable) is None
        # and model_fields_set contains the field
        if self.subject_subtype is None and "subject_subtype" in self.model_fields_set:
            _dict['subjectSubtype'] = None

        # set to None if subject_id (nullable) is None
        # and model_fields_set contains the field
        if self.subject_id is None and "subject_id" in self.model_fields_set:
            _dict['subjectId'] = None

        # set to None if reference (nullable) is None
        # and model_fields_set contains the field
        if self.reference is None and "reference" in self.model_fields_set:
            _dict['reference'] = None

        # set to None if communication_type (nullable) is None
        # and model_fields_set contains the field
        if self.communication_type is None and "communication_type" in self.model_fields_set:
            _dict['communicationType'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict['target'] = None

        # set to None if sent_request_id (nullable) is None
        # and model_fields_set contains the field
        if self.sent_request_id is None and "sent_request_id" in self.model_fields_set:
            _dict['sentRequestId'] = None

        # set to None if failure_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.failure_reason_code is None and "failure_reason_code" in self.model_fields_set:
            _dict['failureReasonCode'] = None

        # set to None if failure_details (nullable) is None
        # and model_fields_set contains the field
        if self.failure_details is None and "failure_details" in self.model_fields_set:
            _dict['failureDetails'] = None

        # set to None if communication_entry_status (nullable) is None
        # and model_fields_set contains the field
        if self.communication_entry_status is None and "communication_entry_status" in self.model_fields_set:
            _dict['communicationEntryStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommunicationEntryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "subjectType": obj.get("subjectType"),
            "subjectSubtype": obj.get("subjectSubtype"),
            "subjectId": obj.get("subjectId"),
            "reference": obj.get("reference"),
            "communicationType": obj.get("communicationType"),
            "title": obj.get("title"),
            "target": CommunicationTargetDTO.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "sentRequested": obj.get("sentRequested"),
            "sentRequestId": obj.get("sentRequestId"),
            "sent": obj.get("sent"),
            "sentDate": obj.get("sentDate"),
            "finished": obj.get("finished"),
            "failureReasonCode": LocalisedErrorDTO.from_dict(obj["failureReasonCode"]) if obj.get("failureReasonCode") is not None else None,
            "failureDetails": obj.get("failureDetails"),
            "communicationEntryStatus": obj.get("communicationEntryStatus")
        })
        return _obj


