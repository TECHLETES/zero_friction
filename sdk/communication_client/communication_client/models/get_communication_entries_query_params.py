# coding: utf-8

"""
    Communication

    Communication API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from communication_client.models.communication_type import CommunicationType
from communication_client.models.entity_subject_type import EntitySubjectType
from communication_client.models.error_code import ErrorCode
from typing import Optional, Set
from typing_extensions import Self

class GetCommunicationEntriesQueryParams(BaseModel):
    """
    GetCommunicationEntriesQueryParams
    """ # noqa: E501
    flex_search: Optional[StrictStr] = Field(default=None, alias="flexSearch")
    include_only_ids: Optional[List[StrictStr]] = Field(default=None, alias="includeOnlyIds")
    exclude_ids: Optional[List[StrictStr]] = Field(default=None, alias="excludeIds")
    communication_type: Optional[CommunicationType] = Field(default=None, alias="communicationType")
    entity_subject_type: Optional[EntitySubjectType] = Field(default=None, alias="entitySubjectType")
    entity_subject_id: Optional[StrictStr] = Field(default=None, alias="entitySubjectId")
    failure_reason_code: Optional[ErrorCode] = Field(default=None, alias="failureReasonCode")
    sent_start_date_time_offset: Optional[datetime] = Field(default=None, alias="sentStartDateTimeOffset")
    sent_end_date_time_offset: Optional[datetime] = Field(default=None, alias="sentEndDateTimeOffset")
    __properties: ClassVar[List[str]] = ["flexSearch", "includeOnlyIds", "excludeIds", "communicationType", "entitySubjectType", "entitySubjectId", "failureReasonCode", "sentStartDateTimeOffset", "sentEndDateTimeOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCommunicationEntriesQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if flex_search (nullable) is None
        # and model_fields_set contains the field
        if self.flex_search is None and "flex_search" in self.model_fields_set:
            _dict['flexSearch'] = None

        # set to None if include_only_ids (nullable) is None
        # and model_fields_set contains the field
        if self.include_only_ids is None and "include_only_ids" in self.model_fields_set:
            _dict['includeOnlyIds'] = None

        # set to None if exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_ids is None and "exclude_ids" in self.model_fields_set:
            _dict['excludeIds'] = None

        # set to None if communication_type (nullable) is None
        # and model_fields_set contains the field
        if self.communication_type is None and "communication_type" in self.model_fields_set:
            _dict['communicationType'] = None

        # set to None if entity_subject_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_subject_type is None and "entity_subject_type" in self.model_fields_set:
            _dict['entitySubjectType'] = None

        # set to None if entity_subject_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_subject_id is None and "entity_subject_id" in self.model_fields_set:
            _dict['entitySubjectId'] = None

        # set to None if failure_reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.failure_reason_code is None and "failure_reason_code" in self.model_fields_set:
            _dict['failureReasonCode'] = None

        # set to None if sent_start_date_time_offset (nullable) is None
        # and model_fields_set contains the field
        if self.sent_start_date_time_offset is None and "sent_start_date_time_offset" in self.model_fields_set:
            _dict['sentStartDateTimeOffset'] = None

        # set to None if sent_end_date_time_offset (nullable) is None
        # and model_fields_set contains the field
        if self.sent_end_date_time_offset is None and "sent_end_date_time_offset" in self.model_fields_set:
            _dict['sentEndDateTimeOffset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCommunicationEntriesQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flexSearch": obj.get("flexSearch"),
            "includeOnlyIds": obj.get("includeOnlyIds"),
            "excludeIds": obj.get("excludeIds"),
            "communicationType": obj.get("communicationType"),
            "entitySubjectType": obj.get("entitySubjectType"),
            "entitySubjectId": obj.get("entitySubjectId"),
            "failureReasonCode": obj.get("failureReasonCode"),
            "sentStartDateTimeOffset": obj.get("sentStartDateTimeOffset"),
            "sentEndDateTimeOffset": obj.get("sentEndDateTimeOffset")
        })
        return _obj


