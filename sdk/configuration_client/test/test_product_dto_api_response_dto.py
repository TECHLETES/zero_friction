# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from configuration_client.models.product_dto_api_response_dto import ProductDTOApiResponseDTO

class TestProductDTOApiResponseDTO(unittest.TestCase):
    """ProductDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductDTOApiResponseDTO:
        """Test ProductDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductDTOApiResponseDTO`
        """
        model = ProductDTOApiResponseDTO()
        if include_optional:
            return ProductDTOApiResponseDTO(
                errors = [
                    configuration_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            configuration_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = configuration_client.models.product_dto.ProductDTO(
                    id = '', 
                    entity_type = null, 
                    created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discriminator = '', 
                    _etag = '', 
                    require_attention = True, 
                    has_errors = True, 
                    has_warnings = True, 
                    is_read_only = True, 
                    organisation_id = '', 
                    name = '', 
                    invoice_upfront = True, 
                    billing_items = [
                        configuration_client.models.product_billing_item_dto.ProductBillingItemDTO(
                            billing_item_id = '', 
                            order = 56, 
                            periodicity_parameters = null, 
                            start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    attachments = [
                        configuration_client.models.product_attachment_dto.ProductAttachmentDTO(
                            product_attachment_id = '', 
                            include_in_welcome_email = True, 
                            visibility = null, 
                            approval_required = True, 
                            valid_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            valid_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            attachment_files = [
                                configuration_client.models.product_attachment_file_dto.ProductAttachmentFileDTO(
                                    culture = null, 
                                    file_name = '', 
                                    internal_file_name = '', 
                                    attachment_id = '', )
                                ], )
                        ], 
                    localisation_level = null, 
                    localised_fields = [
                        ''
                        ], 
                    translated_fields = {
                        'key' : {
                            'key' : ''
                            }
                        }, )
            )
        else:
            return ProductDTOApiResponseDTO(
        )
        """

    def testProductDTOApiResponseDTO(self):
        """Test ProductDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
