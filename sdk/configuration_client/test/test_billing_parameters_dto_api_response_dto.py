# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from configuration_client.models.billing_parameters_dto_api_response_dto import BillingParametersDTOApiResponseDTO

class TestBillingParametersDTOApiResponseDTO(unittest.TestCase):
    """BillingParametersDTOApiResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingParametersDTOApiResponseDTO:
        """Test BillingParametersDTOApiResponseDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingParametersDTOApiResponseDTO`
        """
        model = BillingParametersDTOApiResponseDTO()
        if include_optional:
            return BillingParametersDTOApiResponseDTO(
                errors = [
                    configuration_client.models.localised_error_dto.LocalisedErrorDTO(
                        key = null, 
                        correlation_id = '', 
                        message = '', 
                        message_values = [
                            configuration_client.models.localised_error_dto_message_value.LocalisedErrorDTOMessageValue(
                                data_type = null, 
                                value = '', 
                                capitalize = True, )
                            ], )
                    ],
                success = True,
                applicable_entities_count = 56,
                requested_entities_count = 56,
                succeeded_entities_count = 56,
                is_synchronous = True,
                data = configuration_client.models.billing_parameters_dto.BillingParametersDTO(
                    id = '', 
                    entity_type = null, 
                    created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discriminator = '', 
                    _etag = '', 
                    require_attention = True, 
                    has_errors = True, 
                    has_warnings = True, 
                    is_read_only = True, 
                    organisation_id = '', 
                    skip_approval = True, 
                    skip_payment = True, 
                    enable_ubl = True, 
                    disable_automatic_billing_processes = True, 
                    enable_invoice_collection = True, 
                    do_not_credit_advances_when_unpaid = True, 
                    collection_border_invoice_created_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    collection_write_off_handling = null, 
                    group_invoice_collection_by_customer = True, 
                    days_after_invoice_checkpoint_date_to_create_invoice = 56, 
                    days_before_advance_start_date_to_create_advance = 56, 
                    advance_amount_lower_threshold = 1.337, 
                    advance_calculation_parameters = null, 
                    default_tax_code_for_person_advances = '', 
                    default_tax_code_for_organisation_advances = '', 
                    prepayment_parameters = null, )
            )
        else:
            return BillingParametersDTOApiResponseDTO(
        )
        """

    def testBillingParametersDTOApiResponseDTO(self):
        """Test BillingParametersDTOApiResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
