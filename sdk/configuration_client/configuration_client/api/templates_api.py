# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import Any, Dict, Optional, Tuple, Union
from typing_extensions import Annotated
from configuration_client.models.boolean_api_response_dto import BooleanApiResponseDTO
from configuration_client.models.content_result import ContentResult
from configuration_client.models.i_scenario_dto_api_response_dto import IScenarioDTOApiResponseDTO

from configuration_client.api_client import ApiClient, RequestSerialized
from configuration_client.api_response import ApiResponse
from configuration_client.rest import RESTResponseType


class TemplatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IScenarioDTOApiResponseDTO:
        """Removes a custom template for a specific scenario.

        Removes a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IScenarioDTOApiResponseDTO]:
        """Removes a custom template for a specific scenario.

        Removes a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Removes a custom template for a specific scenario.

        Removes a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        template_usecase,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if template_usecase is not None:
            _path_params['templateUsecase'] = template_usecase
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/{templateUsecase}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        email_receiver: Annotated[Optional[StrictStr], Field(description="The email address of the recipient.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BooleanApiResponseDTO:
        """Send a test mail using a template.

        Send a test mail using a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param email_receiver: The email address of the recipient.
        :type email_receiver: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            email_receiver=email_receiver,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        email_receiver: Annotated[Optional[StrictStr], Field(description="The email address of the recipient.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BooleanApiResponseDTO]:
        """Send a test mail using a template.

        Send a test mail using a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param email_receiver: The email address of the recipient.
        :type email_receiver: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            email_receiver=email_receiver,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        email_receiver: Annotated[Optional[StrictStr], Field(description="The email address of the recipient.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send a test mail using a template.

        Send a test mail using a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param email_receiver: The email address of the recipient.
        :type email_receiver: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            email_receiver=email_receiver,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_templates_entitysubjecttype_entitysubjectsubtype_email_culture_send_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        culture,
        zf_tuuid,
        zf_ouuid,
        email_receiver,
        payment_method,
        auto_settlement,
        customer_balance,
        invoice_amount,
        number_of_addresses,
        show_charts_placeholder,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if culture is not None:
            _path_params['culture'] = culture.value
        # process the query parameters
        if email_receiver is not None:
            
            _query_params.append(('emailReceiver', email_receiver))
            
        if payment_method is not None:
            
            _query_params.append(('PaymentMethod', payment_method))
            
        if auto_settlement is not None:
            
            _query_params.append(('AutoSettlement', auto_settlement))
            
        if customer_balance is not None:
            
            _query_params.append(('CustomerBalance', customer_balance))
            
        if invoice_amount is not None:
            
            _query_params.append(('InvoiceAmount', invoice_amount))
            
        if number_of_addresses is not None:
            
            _query_params.append(('NumberOfAddresses', number_of_addresses))
            
        if show_charts_placeholder is not None:
            
            _query_params.append(('ShowChartsPlaceholder', show_charts_placeholder))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/email/{culture}/send',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Generates a PDF preview of a template.

        Generates a PDF preview of a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Generates a PDF preview of a template.

        Generates a PDF preview of a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generates a PDF preview of a template.

        Generates a PDF preview of a template.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '400': "ApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_templates_entitysubjecttype_entitysubjectsubtype_pdf_culture_preview_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        culture,
        zf_tuuid,
        zf_ouuid,
        payment_method,
        auto_settlement,
        customer_balance,
        invoice_amount,
        number_of_addresses,
        show_charts_placeholder,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if culture is not None:
            _path_params['culture'] = culture.value
        # process the query parameters
        if payment_method is not None:
            
            _query_params.append(('PaymentMethod', payment_method))
            
        if auto_settlement is not None:
            
            _query_params.append(('AutoSettlement', auto_settlement))
            
        if customer_balance is not None:
            
            _query_params.append(('CustomerBalance', customer_balance))
            
        if invoice_amount is not None:
            
            _query_params.append(('InvoiceAmount', invoice_amount))
            
        if number_of_addresses is not None:
            
            _query_params.append(('NumberOfAddresses', number_of_addresses))
            
        if show_charts_placeholder is not None:
            
            _query_params.append(('ShowChartsPlaceholder', show_charts_placeholder))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/pdf/{culture}/preview',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        wrap_labels: Annotated[Optional[StrictBool], Field(description="Whether to wrap labels in the output.")] = None,
        show_labels: Annotated[Optional[StrictBool], Field(description="Whether to display labels in the output.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContentResult:
        """Tests and previews a template in HTML format.

        Tests and previews a template in HTML format.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param wrap_labels: Whether to wrap labels in the output.
        :type wrap_labels: bool
        :param show_labels: Whether to display labels in the output.
        :type show_labels: bool
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            wrap_labels=wrap_labels,
            show_labels=show_labels,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "ContentResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        wrap_labels: Annotated[Optional[StrictBool], Field(description="Whether to wrap labels in the output.")] = None,
        show_labels: Annotated[Optional[StrictBool], Field(description="Whether to display labels in the output.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContentResult]:
        """Tests and previews a template in HTML format.

        Tests and previews a template in HTML format.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param wrap_labels: Whether to wrap labels in the output.
        :type wrap_labels: bool
        :param show_labels: Whether to display labels in the output.
        :type show_labels: bool
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            wrap_labels=wrap_labels,
            show_labels=show_labels,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "ContentResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        culture: Annotated[StrictStr, Field(description="The culture information for localization.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        wrap_labels: Annotated[Optional[StrictBool], Field(description="Whether to wrap labels in the output.")] = None,
        show_labels: Annotated[Optional[StrictBool], Field(description="Whether to display labels in the output.")] = None,
        payment_method: Optional[StrictStr] = None,
        auto_settlement: Optional[StrictBool] = None,
        customer_balance: Optional[StrictStr] = None,
        invoice_amount: Optional[StrictStr] = None,
        number_of_addresses: Optional[StrictStr] = None,
        show_charts_placeholder: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Tests and previews a template in HTML format.

        Tests and previews a template in HTML format.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param culture: The culture information for localization. (required)
        :type culture: CultureInfo
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param wrap_labels: Whether to wrap labels in the output.
        :type wrap_labels: bool
        :param show_labels: Whether to display labels in the output.
        :type show_labels: bool
        :param payment_method:
        :type payment_method: str
        :param auto_settlement:
        :type auto_settlement: bool
        :param customer_balance:
        :type customer_balance: str
        :param invoice_amount:
        :type invoice_amount: str
        :param number_of_addresses:
        :type number_of_addresses: str
        :param show_charts_placeholder:
        :type show_charts_placeholder: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            culture=culture,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            wrap_labels=wrap_labels,
            show_labels=show_labels,
            payment_method=payment_method,
            auto_settlement=auto_settlement,
            customer_balance=customer_balance,
            invoice_amount=invoice_amount,
            number_of_addresses=number_of_addresses,
            show_charts_placeholder=show_charts_placeholder,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ApiResponseDTO",
            '200': "ContentResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_cultur_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        template_usecase,
        culture,
        zf_tuuid,
        zf_ouuid,
        wrap_labels,
        show_labels,
        payment_method,
        auto_settlement,
        customer_balance,
        invoice_amount,
        number_of_addresses,
        show_charts_placeholder,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if template_usecase is not None:
            _path_params['templateUsecase'] = template_usecase
        if culture is not None:
            _path_params['culture'] = culture.value
        # process the query parameters
        if wrap_labels is not None:
            
            _query_params.append(('wrapLabels', wrap_labels))
            
        if show_labels is not None:
            
            _query_params.append(('showLabels', show_labels))
            
        if payment_method is not None:
            
            _query_params.append(('PaymentMethod', payment_method))
            
        if auto_settlement is not None:
            
            _query_params.append(('AutoSettlement', auto_settlement))
            
        if customer_balance is not None:
            
            _query_params.append(('CustomerBalance', customer_balance))
            
        if invoice_amount is not None:
            
            _query_params.append(('InvoiceAmount', invoice_amount))
            
        if number_of_addresses is not None:
            
            _query_params.append(('NumberOfAddresses', number_of_addresses))
            
        if show_charts_placeholder is not None:
            
            _query_params.append(('ShowChartsPlaceholder', show_charts_placeholder))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/{templateUsecase}/{culture}/html',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Downloads a template for a specific scenario.

        Downloads a template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Downloads a template for a specific scenario.

        Downloads a template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Downloads a template for a specific scenario.

        Downloads a template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_downlo_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        template_usecase,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if template_usecase is not None:
            _path_params['templateUsecase'] = template_usecase
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/{templateUsecase}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IScenarioDTOApiResponseDTO:
        """Uploads a custom template for a specific scenario.

        Uploads a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IScenarioDTOApiResponseDTO]:
        """Uploads a custom template for a specific scenario.

        Uploads a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads a custom template for a specific scenario.

        Uploads a custom template for a specific scenario.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '200': "IScenarioDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_templates_entitysubjecttype_entitysubjectsubtype_templateusecase_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        template_usecase,
        zf_tuuid,
        zf_ouuid,
        content_type,
        content_disposition,
        headers,
        length,
        name,
        file_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if template_usecase is not None:
            _path_params['templateUsecase'] = template_usecase
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        if content_type is not None:
            _form_params.append(('ContentType', content_type))
        if content_disposition is not None:
            _form_params.append(('ContentDisposition', content_disposition))
        if headers is not None:
            _form_params.append(('Headers', headers))
        if length is not None:
            _form_params.append(('Length', length))
        if name is not None:
            _form_params.append(('Name', name))
        if file_name is not None:
            _form_params.append(('FileName', file_name))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/Templates/{entitySubjectType}/{entitySubjectSubType}/{templateUsecase}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


