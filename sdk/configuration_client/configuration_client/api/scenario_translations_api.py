# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from configuration_client.models.entity_type_paged_response_model_dto import EntityTypePagedResponseModelDTO
from configuration_client.models.reset_translation_request import ResetTranslationRequest
from configuration_client.models.scenario_translation_dto_api_response_dto import ScenarioTranslationDTOApiResponseDTO
from configuration_client.models.scenario_translation_list_dto_api_response_dto import ScenarioTranslationListDTOApiResponseDTO
from configuration_client.models.update_translation_request import UpdateTranslationRequest

from configuration_client.api_client import ApiClient, RequestSerialized
from configuration_client.api_response import ApiResponse
from configuration_client.rest import RESTResponseType


class ScenarioTranslationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        culture: Annotated[Optional[StrictStr], Field(description="The culture code for localization.")] = None,
        search_term: Annotated[Optional[StrictStr], Field(description="Optional search term to filter translations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScenarioTranslationListDTOApiResponseDTO:
        """Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param culture: The culture code for localization.
        :type culture: str
        :param search_term: Optional search term to filter translations.
        :type search_term: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            culture=culture,
            search_term=search_term,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationListDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_with_http_info(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        culture: Annotated[Optional[StrictStr], Field(description="The culture code for localization.")] = None,
        search_term: Annotated[Optional[StrictStr], Field(description="Optional search term to filter translations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScenarioTranslationListDTOApiResponseDTO]:
        """Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param culture: The culture code for localization.
        :type culture: str
        :param search_term: Optional search term to filter translations.
        :type search_term: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            culture=culture,
            search_term=search_term,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationListDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_without_preload_content(
        self,
        entity_subject_type: Annotated[StrictStr, Field(description="The type of entity subject.")],
        entity_subject_sub_type: Annotated[StrictStr, Field(description="The subtype of entity subject.")],
        template_usecase: Annotated[StrictStr, Field(description="The template use case.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        culture: Annotated[Optional[StrictStr], Field(description="The culture code for localization.")] = None,
        search_term: Annotated[Optional[StrictStr], Field(description="Optional search term to filter translations.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        Retrieves a list of scenario translations for a specific entity subject type, subtype, and template use case.

        :param entity_subject_type: The type of entity subject. (required)
        :type entity_subject_type: str
        :param entity_subject_sub_type: The subtype of entity subject. (required)
        :type entity_subject_sub_type: str
        :param template_usecase: The template use case. (required)
        :type template_usecase: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param culture: The culture code for localization.
        :type culture: str
        :param search_term: Optional search term to filter translations.
        :type search_term: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_serialize(
            entity_subject_type=entity_subject_type,
            entity_subject_sub_type=entity_subject_sub_type,
            template_usecase=template_usecase,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            culture=culture,
            search_term=search_term,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationListDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_scenariotranslations_entitysubjecttype_entitysubjectsubtype_templateusec_serialize(
        self,
        entity_subject_type,
        entity_subject_sub_type,
        template_usecase,
        zf_tuuid,
        zf_ouuid,
        culture,
        search_term,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if entity_subject_type is not None:
            _path_params['entitySubjectType'] = entity_subject_type
        if entity_subject_sub_type is not None:
            _path_params['entitySubjectSubType'] = entity_subject_sub_type
        if template_usecase is not None:
            _path_params['templateUsecase'] = template_usecase
        # process the query parameters
        if culture is not None:
            
            _query_params.append(('culture', culture))
            
        if search_term is not None:
            
            _query_params.append(('searchTerm', search_term))
            
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ScenarioTranslations/{entitySubjectType}/{entitySubjectSubType}/{templateUsecase}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_scenariotranslations_translationname_getscenarios(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EntityTypePagedResponseModelDTO:
        """Retrieves scenarios associated with a specific translation.

        Retrieves scenarios associated with a specific translation.

        :param translation_name: The name of the translation. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_translationname_getscenarios_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "EntityTypePagedResponseModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_scenariotranslations_translationname_getscenarios_with_http_info(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EntityTypePagedResponseModelDTO]:
        """Retrieves scenarios associated with a specific translation.

        Retrieves scenarios associated with a specific translation.

        :param translation_name: The name of the translation. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_translationname_getscenarios_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "EntityTypePagedResponseModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_scenariotranslations_translationname_getscenarios_without_preload_content(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves scenarios associated with a specific translation.

        Retrieves scenarios associated with a specific translation.

        :param translation_name: The name of the translation. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_scenariotranslations_translationname_getscenarios_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "EntityTypePagedResponseModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_scenariotranslations_translationname_getscenarios_serialize(
        self,
        translation_name,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if translation_name is not None:
            _path_params['translationName'] = translation_name
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ScenarioTranslations/{translationName}/getscenarios',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_scenariotranslations_translationname_reset(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to reset.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        reset_translation_request: Annotated[Optional[ResetTranslationRequest], Field(description="The reset translation request details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScenarioTranslationDTOApiResponseDTO:
        """Resets a specific scenario translation to its default value.

        Resets a specific scenario translation to its default value.

        :param translation_name: The name of the translation to reset. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param reset_translation_request: The reset translation request details.
        :type reset_translation_request: ResetTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_reset_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            reset_translation_request=reset_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_scenariotranslations_translationname_reset_with_http_info(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to reset.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        reset_translation_request: Annotated[Optional[ResetTranslationRequest], Field(description="The reset translation request details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScenarioTranslationDTOApiResponseDTO]:
        """Resets a specific scenario translation to its default value.

        Resets a specific scenario translation to its default value.

        :param translation_name: The name of the translation to reset. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param reset_translation_request: The reset translation request details.
        :type reset_translation_request: ResetTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_reset_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            reset_translation_request=reset_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_scenariotranslations_translationname_reset_without_preload_content(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to reset.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        reset_translation_request: Annotated[Optional[ResetTranslationRequest], Field(description="The reset translation request details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Resets a specific scenario translation to its default value.

        Resets a specific scenario translation to its default value.

        :param translation_name: The name of the translation to reset. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param reset_translation_request: The reset translation request details.
        :type reset_translation_request: ResetTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_reset_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            reset_translation_request=reset_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_scenariotranslations_translationname_reset_serialize(
        self,
        translation_name,
        zf_tuuid,
        zf_ouuid,
        reset_translation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if translation_name is not None:
            _path_params['translationName'] = translation_name
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if reset_translation_request is not None:
            _body_params = reset_translation_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ScenarioTranslations/{translationName}/reset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_scenariotranslations_translationname_update(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to update.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        update_translation_request: Annotated[Optional[UpdateTranslationRequest], Field(description="The updated translation details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScenarioTranslationDTOApiResponseDTO:
        """Updates a specific scenario translation.

        Updates a specific scenario translation.

        :param translation_name: The name of the translation to update. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param update_translation_request: The updated translation details.
        :type update_translation_request: UpdateTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_update_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            update_translation_request=update_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_scenariotranslations_translationname_update_with_http_info(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to update.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        update_translation_request: Annotated[Optional[UpdateTranslationRequest], Field(description="The updated translation details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScenarioTranslationDTOApiResponseDTO]:
        """Updates a specific scenario translation.

        Updates a specific scenario translation.

        :param translation_name: The name of the translation to update. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param update_translation_request: The updated translation details.
        :type update_translation_request: UpdateTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_update_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            update_translation_request=update_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_scenariotranslations_translationname_update_without_preload_content(
        self,
        translation_name: Annotated[StrictStr, Field(description="The name of the translation to update.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        update_translation_request: Annotated[Optional[UpdateTranslationRequest], Field(description="The updated translation details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates a specific scenario translation.

        Updates a specific scenario translation.

        :param translation_name: The name of the translation to update. (required)
        :type translation_name: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param update_translation_request: The updated translation details.
        :type update_translation_request: UpdateTranslationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_scenariotranslations_translationname_update_serialize(
            translation_name=translation_name,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            update_translation_request=update_translation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ProblemDetails",
            '404': "ProblemDetails",
            '200': "ScenarioTranslationDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_scenariotranslations_translationname_update_serialize(
        self,
        translation_name,
        zf_tuuid,
        zf_ouuid,
        update_translation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if translation_name is not None:
            _path_params['translationName'] = translation_name
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter
        if update_translation_request is not None:
            _body_params = update_translation_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json', 
                        'application/*+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ScenarioTranslations/{translationName}/update',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


