# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from configuration_client.models.boolean_api_response_dto import BooleanApiResponseDTO
from configuration_client.models.import_dto_paged_response_model_dto_api_response_dto import ImportDTOPagedResponseModelDTOApiResponseDTO

from configuration_client.api_client import ApiClient, RequestSerialized
from configuration_client.api_response import ApiResponse
from configuration_client.rest import RESTResponseType


class IntegrationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_integrations_billingtariff_import(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        flex_search: Optional[StrictStr] = None,
        include_only_ids: Optional[List[StrictStr]] = None,
        exclude_ids: Optional[List[StrictStr]] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Field to order the import operations by.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImportDTOPagedResponseModelDTOApiResponseDTO:
        """Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param flex_search:
        :type flex_search: str
        :param include_only_ids:
        :type include_only_ids: List[str]
        :param exclude_ids:
        :type exclude_ids: List[str]
        :param order_by: Field to order the import operations by.
        :type order_by: str
        :param continuation_token: Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            flex_search=flex_search,
            include_only_ids=include_only_ids,
            exclude_ids=exclude_ids,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImportDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_integrations_billingtariff_import_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        flex_search: Optional[StrictStr] = None,
        include_only_ids: Optional[List[StrictStr]] = None,
        exclude_ids: Optional[List[StrictStr]] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Field to order the import operations by.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImportDTOPagedResponseModelDTOApiResponseDTO]:
        """Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param flex_search:
        :type flex_search: str
        :param include_only_ids:
        :type include_only_ids: List[str]
        :param exclude_ids:
        :type exclude_ids: List[str]
        :param order_by: Field to order the import operations by.
        :type order_by: str
        :param continuation_token: Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            flex_search=flex_search,
            include_only_ids=include_only_ids,
            exclude_ids=exclude_ids,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImportDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_integrations_billingtariff_import_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        flex_search: Optional[StrictStr] = None,
        include_only_ids: Optional[List[StrictStr]] = None,
        exclude_ids: Optional[List[StrictStr]] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="Field to order the import operations by.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        Retrieves a paged list of billing tariff import operations with optional filtering and sorting.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param flex_search:
        :type flex_search: str
        :param include_only_ids:
        :type include_only_ids: List[str]
        :param exclude_ids:
        :type exclude_ids: List[str]
        :param order_by: Field to order the import operations by.
        :type order_by: str
        :param continuation_token: Token which allows you to fetch the next records. The continuation token is returned in the response and can be reused in the next request to fetch additional data.
        :type continuation_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            flex_search=flex_search,
            include_only_ids=include_only_ids,
            exclude_ids=exclude_ids,
            order_by=order_by,
            continuation_token=continuation_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImportDTOPagedResponseModelDTOApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_integrations_billingtariff_import_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        flex_search,
        include_only_ids,
        exclude_ids,
        order_by,
        continuation_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'IncludeOnlyIds': 'multi',
            'ExcludeIds': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if flex_search is not None:
            
            _query_params.append(('FlexSearch', flex_search))
            
        if include_only_ids is not None:
            
            _query_params.append(('IncludeOnlyIds', include_only_ids))
            
        if exclude_ids is not None:
            
            _query_params.append(('ExcludeIds', exclude_ids))
            
        if order_by is not None:
            
            _query_params.append(('orderBy', order_by))
            
        # process the header parameters
        if continuation_token is not None:
            _header_params['continuationToken'] = continuation_token
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Integrations/billingTariff/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_integrations_billingtariff_import_locked(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BooleanApiResponseDTO:
        """Checks if there are any locked billing tariff import operations.

        Checks if there are any locked billing tariff import operations.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_locked_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_integrations_billingtariff_import_locked_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BooleanApiResponseDTO]:
        """Checks if there are any locked billing tariff import operations.

        Checks if there are any locked billing tariff import operations.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_locked_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_integrations_billingtariff_import_locked_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Checks if there are any locked billing tariff import operations.

        Checks if there are any locked billing tariff import operations.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrations_billingtariff_import_locked_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_integrations_billingtariff_import_locked_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Integrations/billingTariff/import/locked',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_integrations_billingtariff_import(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BooleanApiResponseDTO:
        """Imports billing tariffs from a CSV file.

        Imports billing tariffs from a CSV file.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_integrations_billingtariff_import_with_http_info(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BooleanApiResponseDTO]:
        """Imports billing tariffs from a CSV file.

        Imports billing tariffs from a CSV file.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_integrations_billingtariff_import_without_preload_content(
        self,
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        content_type: Optional[StrictStr] = None,
        content_disposition: Optional[StrictStr] = None,
        headers: Optional[Dict[str, Any]] = None,
        length: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Imports billing tariffs from a CSV file.

        Imports billing tariffs from a CSV file.

        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param content_type:
        :type content_type: str
        :param content_disposition:
        :type content_disposition: str
        :param headers:
        :type headers: object
        :param length:
        :type length: int
        :param name:
        :type name: str
        :param file_name:
        :type file_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_serialize(
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            content_type=content_type,
            content_disposition=content_disposition,
            headers=headers,
            length=length,
            name=name,
            file_name=file_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_integrations_billingtariff_import_serialize(
        self,
        zf_tuuid,
        zf_ouuid,
        content_type,
        content_disposition,
        headers,
        length,
        name,
        file_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        if content_type is not None:
            _form_params.append(('ContentType', content_type))
        if content_disposition is not None:
            _form_params.append(('ContentDisposition', content_disposition))
        if headers is not None:
            _form_params.append(('Headers', headers))
        if length is not None:
            _form_params.append(('Length', length))
        if name is not None:
            _form_params.append(('Name', name))
        if file_name is not None:
            _form_params.append(('FileName', file_name))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Integrations/billingTariff/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_integrations_billingtariff_import_importid_undo(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to undo.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BooleanApiResponseDTO:
        """Undoes a previous billing tariff import operation.

        Undoes a previous billing tariff import operation.

        :param import_id: The unique identifier of the import operation to undo. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_undo_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_integrations_billingtariff_import_importid_undo_with_http_info(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to undo.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BooleanApiResponseDTO]:
        """Undoes a previous billing tariff import operation.

        Undoes a previous billing tariff import operation.

        :param import_id: The unique identifier of the import operation to undo. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_undo_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_integrations_billingtariff_import_importid_undo_without_preload_content(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to undo.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Undoes a previous billing tariff import operation.

        Undoes a previous billing tariff import operation.

        :param import_id: The unique identifier of the import operation to undo. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_undo_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_integrations_billingtariff_import_importid_undo_serialize(
        self,
        import_id,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if import_id is not None:
            _path_params['importId'] = import_id
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Integrations/billingTariff/import/{importId}/undo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_integrations_billingtariff_import_importid_unlock(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to unlock.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BooleanApiResponseDTO:
        """Unlocks a billing tariff import operation that was previously locked.

        Unlocks a billing tariff import operation that was previously locked.

        :param import_id: The unique identifier of the import operation to unlock. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_unlock_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_integrations_billingtariff_import_importid_unlock_with_http_info(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to unlock.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BooleanApiResponseDTO]:
        """Unlocks a billing tariff import operation that was previously locked.

        Unlocks a billing tariff import operation that was previously locked.

        :param import_id: The unique identifier of the import operation to unlock. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_unlock_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_integrations_billingtariff_import_importid_unlock_without_preload_content(
        self,
        import_id: Annotated[StrictStr, Field(description="The unique identifier of the import operation to unlock.")],
        zf_tuuid: Annotated[StrictStr, Field(description="Format - uuid. Tenant ID")],
        zf_ouuid: Annotated[StrictStr, Field(description="Format - uuid. Organisation ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Unlocks a billing tariff import operation that was previously locked.

        Unlocks a billing tariff import operation that was previously locked.

        :param import_id: The unique identifier of the import operation to unlock. (required)
        :type import_id: str
        :param zf_tuuid: Format - uuid. Tenant ID (required)
        :type zf_tuuid: str
        :param zf_ouuid: Format - uuid. Organisation ID (required)
        :type zf_ouuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_integrations_billingtariff_import_importid_unlock_serialize(
            import_id=import_id,
            zf_tuuid=zf_tuuid,
            zf_ouuid=zf_ouuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BooleanApiResponseDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_integrations_billingtariff_import_importid_unlock_serialize(
        self,
        import_id,
        zf_tuuid,
        zf_ouuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if import_id is not None:
            _path_params['importId'] = import_id
        # process the query parameters
        # process the header parameters
        if zf_tuuid is not None:
            _header_params['zf-tuuid'] = zf_tuuid
        if zf_ouuid is not None:
            _header_params['zf-ouuid'] = zf_ouuid
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyQuery', 
            'apiKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Integrations/billingTariff/import/{importId}/unlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


