# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

from pydantic import GetCoreSchemaHandler
from pydantic_core import core_schema

class CultureInfo(BaseModel):
    """
    CultureInfo
    """ # noqa: E501
    __properties: ClassVar[List[str]] = []

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CultureInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict
    

    # Everything below this line is to patch accepting plain string like "nl-NL" instead of dict
    # --------------------------------------------------------------------------------------------

    @classmethod
    def from_dict(cls, obj: Optional[Any]) -> Optional[Self]:
        """Create an instance of CultureInfo from a dict or a string"""
        if obj is None:
            return None

        # Patch to accept plain string like "nl-NL"
        if isinstance(obj, str):
            return cls.model_validate({})  # no fields to validate

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return cls.model_validate({})
    
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler: GetCoreSchemaHandler) -> core_schema.CoreSchema:
        return core_schema.union_schema(
            [
                core_schema.is_instance_schema(cls),
                core_schema.chain_schema(
                    [
                        core_schema.str_schema(),
                        core_schema.no_info_plain_validator_function(lambda v: cls.construct())
                    ]
                ),
                core_schema.chain_schema(
                    [
                        core_schema.dict_schema(),
                        core_schema.no_info_plain_validator_function(lambda v: cls.construct())
                    ]
                )
            ]
        )
