# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from configuration_client.models.update_advance_calculation_parameters_request import UpdateAdvanceCalculationParametersRequest
from configuration_client.models.update_prepayment_parameters_request import UpdatePrepaymentParametersRequest
from configuration_client.models.write_off_handling_type import WriteOffHandlingType
from typing import Optional, Set
from typing_extensions import Self

class UpdateBillingParametersRequest(BaseModel):
    """
    UpdateBillingParametersRequest
    """ # noqa: E501
    skip_approval: Optional[StrictBool] = Field(default=None, alias="skipApproval")
    skip_payment: Optional[StrictBool] = Field(default=None, alias="skipPayment")
    enable_ubl: Optional[StrictBool] = Field(default=None, alias="enableUBL")
    disable_automatic_billing_processes: Optional[StrictBool] = Field(default=None, alias="disableAutomaticBillingProcesses")
    days_after_invoice_checkpoint_date_to_create_invoice: Optional[StrictInt] = Field(default=None, alias="daysAfterInvoiceCheckpointDateToCreateInvoice")
    days_before_advance_start_date_to_create_advance: Optional[StrictInt] = Field(default=None, alias="daysBeforeAdvanceStartDateToCreateAdvance")
    enable_invoice_collection: Optional[StrictBool] = Field(default=None, alias="enableInvoiceCollection")
    collection_border_invoice_created_date_time: Optional[datetime] = Field(default=None, description="Only perform collection for invoices created on or after this date", alias="collectionBorderInvoiceCreatedDateTime")
    collection_write_off_handling: Optional[WriteOffHandlingType] = Field(default=None, alias="collectionWriteOffHandling")
    group_invoice_collection_by_customer: Optional[StrictBool] = Field(default=None, alias="groupInvoiceCollectionByCustomer")
    do_not_credit_advances_when_unpaid: Optional[StrictBool] = Field(default=None, alias="doNotCreditAdvancesWhenUnpaid")
    advance_amount_lower_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="advanceAmountLowerThreshold")
    default_tax_code_for_person_advances: Optional[StrictStr] = Field(default=None, alias="defaultTaxCodeForPersonAdvances")
    default_tax_code_for_organisation_advances: Optional[StrictStr] = Field(default=None, alias="defaultTaxCodeForOrganisationAdvances")
    prepayment_parameters: Optional[UpdatePrepaymentParametersRequest] = Field(default=None, alias="prepaymentParameters")
    advance_calculation_parameters: Optional[UpdateAdvanceCalculationParametersRequest] = Field(default=None, alias="advanceCalculationParameters")
    __properties: ClassVar[List[str]] = ["skipApproval", "skipPayment", "enableUBL", "disableAutomaticBillingProcesses", "daysAfterInvoiceCheckpointDateToCreateInvoice", "daysBeforeAdvanceStartDateToCreateAdvance", "enableInvoiceCollection", "collectionBorderInvoiceCreatedDateTime", "collectionWriteOffHandling", "groupInvoiceCollectionByCustomer", "doNotCreditAdvancesWhenUnpaid", "advanceAmountLowerThreshold", "defaultTaxCodeForPersonAdvances", "defaultTaxCodeForOrganisationAdvances", "prepaymentParameters", "advanceCalculationParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateBillingParametersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prepayment_parameters
        if self.prepayment_parameters:
            _dict['prepaymentParameters'] = self.prepayment_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advance_calculation_parameters
        if self.advance_calculation_parameters:
            _dict['advanceCalculationParameters'] = self.advance_calculation_parameters.to_dict()
        # set to None if collection_write_off_handling (nullable) is None
        # and model_fields_set contains the field
        if self.collection_write_off_handling is None and "collection_write_off_handling" in self.model_fields_set:
            _dict['collectionWriteOffHandling'] = None

        # set to None if default_tax_code_for_person_advances (nullable) is None
        # and model_fields_set contains the field
        if self.default_tax_code_for_person_advances is None and "default_tax_code_for_person_advances" in self.model_fields_set:
            _dict['defaultTaxCodeForPersonAdvances'] = None

        # set to None if default_tax_code_for_organisation_advances (nullable) is None
        # and model_fields_set contains the field
        if self.default_tax_code_for_organisation_advances is None and "default_tax_code_for_organisation_advances" in self.model_fields_set:
            _dict['defaultTaxCodeForOrganisationAdvances'] = None

        # set to None if prepayment_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.prepayment_parameters is None and "prepayment_parameters" in self.model_fields_set:
            _dict['prepaymentParameters'] = None

        # set to None if advance_calculation_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.advance_calculation_parameters is None and "advance_calculation_parameters" in self.model_fields_set:
            _dict['advanceCalculationParameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateBillingParametersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "skipApproval": obj.get("skipApproval"),
            "skipPayment": obj.get("skipPayment"),
            "enableUBL": obj.get("enableUBL"),
            "disableAutomaticBillingProcesses": obj.get("disableAutomaticBillingProcesses"),
            "daysAfterInvoiceCheckpointDateToCreateInvoice": obj.get("daysAfterInvoiceCheckpointDateToCreateInvoice"),
            "daysBeforeAdvanceStartDateToCreateAdvance": obj.get("daysBeforeAdvanceStartDateToCreateAdvance"),
            "enableInvoiceCollection": obj.get("enableInvoiceCollection"),
            "collectionBorderInvoiceCreatedDateTime": obj.get("collectionBorderInvoiceCreatedDateTime"),
            "collectionWriteOffHandling": obj.get("collectionWriteOffHandling"),
            "groupInvoiceCollectionByCustomer": obj.get("groupInvoiceCollectionByCustomer"),
            "doNotCreditAdvancesWhenUnpaid": obj.get("doNotCreditAdvancesWhenUnpaid"),
            "advanceAmountLowerThreshold": obj.get("advanceAmountLowerThreshold"),
            "defaultTaxCodeForPersonAdvances": obj.get("defaultTaxCodeForPersonAdvances"),
            "defaultTaxCodeForOrganisationAdvances": obj.get("defaultTaxCodeForOrganisationAdvances"),
            "prepaymentParameters": UpdatePrepaymentParametersRequest.from_dict(obj["prepaymentParameters"]) if obj.get("prepaymentParameters") is not None else None,
            "advanceCalculationParameters": UpdateAdvanceCalculationParametersRequest.from_dict(obj["advanceCalculationParameters"]) if obj.get("advanceCalculationParameters") is not None else None
        })
        return _obj


