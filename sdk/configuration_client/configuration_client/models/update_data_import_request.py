# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.data_import_metering_format_type import DataImportMeteringFormatType
from typing import Optional, Set
from typing_extensions import Self

class UpdateDataImportRequest(BaseModel):
    """
    UpdateDataImportRequest
    """ # noqa: E501
    disabled: Optional[StrictBool] = None
    automatic_processing: Optional[StrictBool] = Field(default=None, description="Indicates if incomming import jobs are automatically processed or if a user has to manually trigger them", alias="automaticProcessing")
    custom_file_format_id: Optional[StrictStr] = Field(default=None, description="When using a file format that deviates from the built-in format, you should fill in this property with the  ID of the custom file format.", alias="customFileFormatId")
    metering_format_type: Optional[DataImportMeteringFormatType] = Field(default=None, description="When using a built-in format, you just need to specify the type of the format here.", alias="meteringFormatType")
    parameters: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["disabled", "automaticProcessing", "customFileFormatId", "meteringFormatType", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDataImportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if custom_file_format_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_file_format_id is None and "custom_file_format_id" in self.model_fields_set:
            _dict['customFileFormatId'] = None

        # set to None if metering_format_type (nullable) is None
        # and model_fields_set contains the field
        if self.metering_format_type is None and "metering_format_type" in self.model_fields_set:
            _dict['meteringFormatType'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDataImportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
            "automaticProcessing": obj.get("automaticProcessing"),
            "customFileFormatId": obj.get("customFileFormatId"),
            "meteringFormatType": obj.get("meteringFormatType"),
            "parameters": obj.get("parameters")
        })
        return _obj


