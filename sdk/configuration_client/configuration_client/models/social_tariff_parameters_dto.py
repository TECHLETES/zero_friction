# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.address_dto import AddressDTO
from typing import Optional, Set
from typing_extensions import Self

class SocialTariffParametersDTO(BaseModel):
    """
    SocialTariffParametersDTO
    """ # noqa: E501
    kbo_number: Optional[StrictStr] = Field(default=None, alias="kboNumber")
    gln_id: Optional[StrictStr] = Field(default=None, alias="glnId")
    supplier_address: Optional[AddressDTO] = Field(default=None, alias="supplierAddress")
    contact_email_address: Optional[StrictStr] = Field(default=None, alias="contactEmailAddress")
    contact_telephone_number: Optional[StrictStr] = Field(default=None, alias="contactTelephoneNumber")
    contact_fax_number: Optional[StrictStr] = Field(default=None, alias="contactFaxNumber")
    contact_last_name: Optional[StrictStr] = Field(default=None, alias="contactLastName")
    contact_first_name: Optional[StrictStr] = Field(default=None, alias="contactFirstName")
    social_tariff_custom_entity_property_id: Optional[StrictStr] = Field(default=None, alias="socialTariffCustomEntityPropertyId")
    share_props_with_government_custom_entity_property_id: Optional[StrictStr] = Field(default=None, alias="sharePropsWithGovernmentCustomEntityPropertyId")
    bim_custom_entity_property_id: Optional[StrictStr] = Field(default=None, alias="bimCustomEntityPropertyId")
    configured: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["kboNumber", "glnId", "supplierAddress", "contactEmailAddress", "contactTelephoneNumber", "contactFaxNumber", "contactLastName", "contactFirstName", "socialTariffCustomEntityPropertyId", "sharePropsWithGovernmentCustomEntityPropertyId", "bimCustomEntityPropertyId", "configured"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SocialTariffParametersDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supplier_address
        if self.supplier_address:
            _dict['supplierAddress'] = self.supplier_address.to_dict()
        # set to None if kbo_number (nullable) is None
        # and model_fields_set contains the field
        if self.kbo_number is None and "kbo_number" in self.model_fields_set:
            _dict['kboNumber'] = None

        # set to None if gln_id (nullable) is None
        # and model_fields_set contains the field
        if self.gln_id is None and "gln_id" in self.model_fields_set:
            _dict['glnId'] = None

        # set to None if supplier_address (nullable) is None
        # and model_fields_set contains the field
        if self.supplier_address is None and "supplier_address" in self.model_fields_set:
            _dict['supplierAddress'] = None

        # set to None if contact_email_address (nullable) is None
        # and model_fields_set contains the field
        if self.contact_email_address is None and "contact_email_address" in self.model_fields_set:
            _dict['contactEmailAddress'] = None

        # set to None if contact_telephone_number (nullable) is None
        # and model_fields_set contains the field
        if self.contact_telephone_number is None and "contact_telephone_number" in self.model_fields_set:
            _dict['contactTelephoneNumber'] = None

        # set to None if contact_fax_number (nullable) is None
        # and model_fields_set contains the field
        if self.contact_fax_number is None and "contact_fax_number" in self.model_fields_set:
            _dict['contactFaxNumber'] = None

        # set to None if contact_last_name (nullable) is None
        # and model_fields_set contains the field
        if self.contact_last_name is None and "contact_last_name" in self.model_fields_set:
            _dict['contactLastName'] = None

        # set to None if contact_first_name (nullable) is None
        # and model_fields_set contains the field
        if self.contact_first_name is None and "contact_first_name" in self.model_fields_set:
            _dict['contactFirstName'] = None

        # set to None if social_tariff_custom_entity_property_id (nullable) is None
        # and model_fields_set contains the field
        if self.social_tariff_custom_entity_property_id is None and "social_tariff_custom_entity_property_id" in self.model_fields_set:
            _dict['socialTariffCustomEntityPropertyId'] = None

        # set to None if share_props_with_government_custom_entity_property_id (nullable) is None
        # and model_fields_set contains the field
        if self.share_props_with_government_custom_entity_property_id is None and "share_props_with_government_custom_entity_property_id" in self.model_fields_set:
            _dict['sharePropsWithGovernmentCustomEntityPropertyId'] = None

        # set to None if bim_custom_entity_property_id (nullable) is None
        # and model_fields_set contains the field
        if self.bim_custom_entity_property_id is None and "bim_custom_entity_property_id" in self.model_fields_set:
            _dict['bimCustomEntityPropertyId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SocialTariffParametersDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kboNumber": obj.get("kboNumber"),
            "glnId": obj.get("glnId"),
            "supplierAddress": AddressDTO.from_dict(obj["supplierAddress"]) if obj.get("supplierAddress") is not None else None,
            "contactEmailAddress": obj.get("contactEmailAddress"),
            "contactTelephoneNumber": obj.get("contactTelephoneNumber"),
            "contactFaxNumber": obj.get("contactFaxNumber"),
            "contactLastName": obj.get("contactLastName"),
            "contactFirstName": obj.get("contactFirstName"),
            "socialTariffCustomEntityPropertyId": obj.get("socialTariffCustomEntityPropertyId"),
            "sharePropsWithGovernmentCustomEntityPropertyId": obj.get("sharePropsWithGovernmentCustomEntityPropertyId"),
            "bimCustomEntityPropertyId": obj.get("bimCustomEntityPropertyId"),
            "configured": obj.get("configured")
        })
        return _obj


