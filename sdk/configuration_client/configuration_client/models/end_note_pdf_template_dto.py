# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.envelope_settings_dto import EnvelopeSettingsDTO
from configuration_client.models.template_usecase import TemplateUsecase
from configuration_client.models.translation_status import TranslationStatus
from typing import Optional, Set
from typing_extensions import Self

class EndNotePdfTemplateDTO(BaseModel):
    """
    EndNotePdfTemplateDTO
    """ # noqa: E501
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    use_case: Optional[TemplateUsecase] = Field(default=None, alias="useCase")
    use_build_in: Optional[StrictBool] = Field(default=None, alias="useBuildIn")
    custom_template_internal_file_path: Optional[StrictStr] = Field(default=None, alias="customTemplateInternalFilePath")
    custom_template_file_name: Optional[StrictStr] = Field(default=None, alias="customTemplateFileName")
    translation_status: Optional[TranslationStatus] = Field(default=None, alias="translationStatus")
    envelope_settings: Optional[EnvelopeSettingsDTO] = Field(default=None, alias="envelopeSettings")
    render_header_footer: Optional[StrictBool] = Field(default=None, alias="renderHeaderFooter")
    header_text: Optional[StrictStr] = Field(default=None, alias="headerText")
    footer_text: Optional[StrictStr] = Field(default=None, alias="footerText")
    override_external_printing_checks: Optional[StrictBool] = Field(default=None, alias="overrideExternalPrintingChecks")
    supports_external_printing: Optional[StrictBool] = Field(default=None, alias="supportsExternalPrinting")
    cost_allocation: Optional[StrictBool] = Field(default=None, alias="costAllocation")
    show_country: Optional[StrictBool] = Field(default=None, alias="showCountry")
    show_balance: Optional[StrictBool] = Field(default=None, alias="showBalance")
    show_vat_specs: Optional[StrictBool] = Field(default=None, alias="showVatSpecs")
    show_custom_information: Optional[StrictBool] = Field(default=None, alias="showCustomInformation")
    __properties: ClassVar[List[str]] = ["fileName", "useCase", "useBuildIn", "customTemplateInternalFilePath", "customTemplateFileName", "translationStatus", "envelopeSettings", "renderHeaderFooter", "headerText", "footerText", "overrideExternalPrintingChecks", "supportsExternalPrinting", "costAllocation", "showCountry", "showBalance", "showVatSpecs", "showCustomInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndNotePdfTemplateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "use_build_in",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of envelope_settings
        if self.envelope_settings:
            _dict['envelopeSettings'] = self.envelope_settings.to_dict()
        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['fileName'] = None

        # set to None if use_case (nullable) is None
        # and model_fields_set contains the field
        if self.use_case is None and "use_case" in self.model_fields_set:
            _dict['useCase'] = None

        # set to None if custom_template_internal_file_path (nullable) is None
        # and model_fields_set contains the field
        if self.custom_template_internal_file_path is None and "custom_template_internal_file_path" in self.model_fields_set:
            _dict['customTemplateInternalFilePath'] = None

        # set to None if custom_template_file_name (nullable) is None
        # and model_fields_set contains the field
        if self.custom_template_file_name is None and "custom_template_file_name" in self.model_fields_set:
            _dict['customTemplateFileName'] = None

        # set to None if translation_status (nullable) is None
        # and model_fields_set contains the field
        if self.translation_status is None and "translation_status" in self.model_fields_set:
            _dict['translationStatus'] = None

        # set to None if envelope_settings (nullable) is None
        # and model_fields_set contains the field
        if self.envelope_settings is None and "envelope_settings" in self.model_fields_set:
            _dict['envelopeSettings'] = None

        # set to None if header_text (nullable) is None
        # and model_fields_set contains the field
        if self.header_text is None and "header_text" in self.model_fields_set:
            _dict['headerText'] = None

        # set to None if footer_text (nullable) is None
        # and model_fields_set contains the field
        if self.footer_text is None and "footer_text" in self.model_fields_set:
            _dict['footerText'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndNotePdfTemplateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileName": obj.get("fileName"),
            "useCase": obj.get("useCase"),
            "useBuildIn": obj.get("useBuildIn"),
            "customTemplateInternalFilePath": obj.get("customTemplateInternalFilePath"),
            "customTemplateFileName": obj.get("customTemplateFileName"),
            "translationStatus": obj.get("translationStatus"),
            "envelopeSettings": EnvelopeSettingsDTO.from_dict(obj["envelopeSettings"]) if obj.get("envelopeSettings") is not None else None,
            "renderHeaderFooter": obj.get("renderHeaderFooter"),
            "headerText": obj.get("headerText"),
            "footerText": obj.get("footerText"),
            "overrideExternalPrintingChecks": obj.get("overrideExternalPrintingChecks"),
            "supportsExternalPrinting": obj.get("supportsExternalPrinting"),
            "costAllocation": obj.get("costAllocation"),
            "showCountry": obj.get("showCountry"),
            "showBalance": obj.get("showBalance"),
            "showVatSpecs": obj.get("showVatSpecs"),
            "showCustomInformation": obj.get("showCustomInformation")
        })
        return _obj


