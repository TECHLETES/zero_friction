# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.address_dto import AddressDTO
from configuration_client.models.update_organization_contact_details_request import UpdateOrganizationContactDetailsRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdateOrganizationRequest(BaseModel):
    """
    UpdateOrganizationRequest
    """ # noqa: E501
    automatic_processing_enabled: Optional[StrictBool] = Field(default=None, alias="automaticProcessingEnabled")
    migration_mode: Optional[StrictBool] = Field(default=None, alias="migrationMode")
    vat_account_number: Optional[StrictStr] = Field(default=None, alias="vatAccountNumber")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    culture: Optional[StrictStr] = None
    company_account_number: Optional[StrictStr] = Field(default=None, alias="companyAccountNumber")
    logo: Optional[StrictStr] = None
    primary_color: Optional[StrictStr] = Field(default=None, alias="primaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="secondaryColor")
    persist_logo_in_portal: Optional[StrictBool] = Field(default=None, alias="persistLogoInPortal")
    persist_color_in_portal: Optional[StrictBool] = Field(default=None, alias="persistColorInPortal")
    address: Optional[AddressDTO] = None
    contact_details: Optional[UpdateOrganizationContactDetailsRequest] = Field(default=None, alias="contactDetails")
    manually_set_customer_number: Optional[StrictBool] = Field(default=None, alias="manuallySetCustomerNumber")
    manually_set_contract_number: Optional[StrictBool] = Field(default=None, alias="manuallySetContractNumber")
    __properties: ClassVar[List[str]] = ["automaticProcessingEnabled", "migrationMode", "vatAccountNumber", "timeZone", "culture", "companyAccountNumber", "logo", "primaryColor", "secondaryColor", "persistLogoInPortal", "persistColorInPortal", "address", "contactDetails", "manuallySetCustomerNumber", "manuallySetContractNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contactDetails'] = self.contact_details.to_dict()
        # set to None if vat_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_account_number is None and "vat_account_number" in self.model_fields_set:
            _dict['vatAccountNumber'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if culture (nullable) is None
        # and model_fields_set contains the field
        if self.culture is None and "culture" in self.model_fields_set:
            _dict['culture'] = None

        # set to None if company_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.company_account_number is None and "company_account_number" in self.model_fields_set:
            _dict['companyAccountNumber'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['primaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['secondaryColor'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if contact_details (nullable) is None
        # and model_fields_set contains the field
        if self.contact_details is None and "contact_details" in self.model_fields_set:
            _dict['contactDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateOrganizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticProcessingEnabled": obj.get("automaticProcessingEnabled"),
            "migrationMode": obj.get("migrationMode"),
            "vatAccountNumber": obj.get("vatAccountNumber"),
            "timeZone": obj.get("timeZone"),
            "culture": obj.get("culture"),
            "companyAccountNumber": obj.get("companyAccountNumber"),
            "logo": obj.get("logo"),
            "primaryColor": obj.get("primaryColor"),
            "secondaryColor": obj.get("secondaryColor"),
            "persistLogoInPortal": obj.get("persistLogoInPortal"),
            "persistColorInPortal": obj.get("persistColorInPortal"),
            "address": AddressDTO.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "contactDetails": UpdateOrganizationContactDetailsRequest.from_dict(obj["contactDetails"]) if obj.get("contactDetails") is not None else None,
            "manuallySetCustomerNumber": obj.get("manuallySetCustomerNumber"),
            "manuallySetContractNumber": obj.get("manuallySetContractNumber")
        })
        return _obj


