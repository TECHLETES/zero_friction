# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.attachment_visibility import AttachmentVisibility
from configuration_client.models.upsert_product_attachment_file_request import UpsertProductAttachmentFileRequest
from typing import Optional, Set
from typing_extensions import Self

class UpsertProductAttachmentRequest(BaseModel):
    """
    UpsertProductAttachmentRequest
    """ # noqa: E501
    product_attachment_id: Optional[StrictStr] = Field(default=None, alias="productAttachmentId")
    include_in_welcome_email: Optional[StrictBool] = Field(default=None, alias="includeInWelcomeEmail")
    visibility: Optional[AttachmentVisibility] = None
    approval_required: Optional[StrictBool] = Field(default=None, alias="approvalRequired")
    valid_from: Optional[datetime] = Field(default=None, alias="validFrom")
    valid_until: Optional[datetime] = Field(default=None, alias="validUntil")
    attachment_files: Optional[List[UpsertProductAttachmentFileRequest]] = Field(default=None, alias="attachmentFiles")
    __properties: ClassVar[List[str]] = ["productAttachmentId", "includeInWelcomeEmail", "visibility", "approvalRequired", "validFrom", "validUntil", "attachmentFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpsertProductAttachmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachment_files (list)
        _items = []
        if self.attachment_files:
            for _item_attachment_files in self.attachment_files:
                if _item_attachment_files:
                    _items.append(_item_attachment_files.to_dict())
            _dict['attachmentFiles'] = _items
        # set to None if product_attachment_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_attachment_id is None and "product_attachment_id" in self.model_fields_set:
            _dict['productAttachmentId'] = None

        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        # set to None if attachment_files (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_files is None and "attachment_files" in self.model_fields_set:
            _dict['attachmentFiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpsertProductAttachmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productAttachmentId": obj.get("productAttachmentId"),
            "includeInWelcomeEmail": obj.get("includeInWelcomeEmail"),
            "visibility": obj.get("visibility"),
            "approvalRequired": obj.get("approvalRequired"),
            "validFrom": obj.get("validFrom"),
            "validUntil": obj.get("validUntil"),
            "attachmentFiles": [UpsertProductAttachmentFileRequest.from_dict(_item) for _item in obj["attachmentFiles"]] if obj.get("attachmentFiles") is not None else None
        })
        return _obj


