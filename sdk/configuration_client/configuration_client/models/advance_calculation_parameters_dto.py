# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from configuration_client.models.advance_amount_limit_type import AdvanceAmountLimitType
from configuration_client.models.advance_recalculation_type import AdvanceRecalculationType
from configuration_client.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class AdvanceCalculationParametersDTO(BaseModel):
    """
    AdvanceCalculationParametersDTO
    """ # noqa: E501
    recalculation_type: Optional[AdvanceRecalculationType] = Field(default=None, alias="recalculationType")
    advance_limit_type: Optional[AdvanceAmountLimitType] = Field(default=None, alias="advanceLimitType")
    advance_limit_lower_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="advanceLimitLowerThreshold")
    advance_limit_upper_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="advanceLimitUpperThreshold")
    minimum_accuracy: Optional[Level] = Field(default=None, alias="minimumAccuracy")
    __properties: ClassVar[List[str]] = ["recalculationType", "advanceLimitType", "advanceLimitLowerThreshold", "advanceLimitUpperThreshold", "minimumAccuracy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvanceCalculationParametersDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if recalculation_type (nullable) is None
        # and model_fields_set contains the field
        if self.recalculation_type is None and "recalculation_type" in self.model_fields_set:
            _dict['recalculationType'] = None

        # set to None if advance_limit_type (nullable) is None
        # and model_fields_set contains the field
        if self.advance_limit_type is None and "advance_limit_type" in self.model_fields_set:
            _dict['advanceLimitType'] = None

        # set to None if minimum_accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_accuracy is None and "minimum_accuracy" in self.model_fields_set:
            _dict['minimumAccuracy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvanceCalculationParametersDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recalculationType": obj.get("recalculationType"),
            "advanceLimitType": obj.get("advanceLimitType"),
            "advanceLimitLowerThreshold": obj.get("advanceLimitLowerThreshold"),
            "advanceLimitUpperThreshold": obj.get("advanceLimitUpperThreshold"),
            "minimumAccuracy": obj.get("minimumAccuracy")
        })
        return _obj


