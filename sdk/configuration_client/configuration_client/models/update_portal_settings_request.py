# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.portal_advance_change_limit_request import PortalAdvanceChangeLimitRequest
from configuration_client.models.portal_billing_settings_request import PortalBillingSettingsRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdatePortalSettingsRequest(BaseModel):
    """
    UpdatePortalSettingsRequest
    """ # noqa: E501
    fav_icon: Optional[StrictStr] = Field(default=None, alias="favIcon")
    logo: Optional[StrictStr] = None
    primary_color: Optional[StrictStr] = Field(default=None, alias="primaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="secondaryColor")
    advance_change_limit: Optional[PortalAdvanceChangeLimitRequest] = Field(default=None, alias="advanceChangeLimit")
    billing_settings: Optional[PortalBillingSettingsRequest] = Field(default=None, alias="billingSettings")
    __properties: ClassVar[List[str]] = ["favIcon", "logo", "primaryColor", "secondaryColor", "advanceChangeLimit", "billingSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePortalSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advance_change_limit
        if self.advance_change_limit:
            _dict['advanceChangeLimit'] = self.advance_change_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_settings
        if self.billing_settings:
            _dict['billingSettings'] = self.billing_settings.to_dict()
        # set to None if fav_icon (nullable) is None
        # and model_fields_set contains the field
        if self.fav_icon is None and "fav_icon" in self.model_fields_set:
            _dict['favIcon'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['primaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['secondaryColor'] = None

        # set to None if advance_change_limit (nullable) is None
        # and model_fields_set contains the field
        if self.advance_change_limit is None and "advance_change_limit" in self.model_fields_set:
            _dict['advanceChangeLimit'] = None

        # set to None if billing_settings (nullable) is None
        # and model_fields_set contains the field
        if self.billing_settings is None and "billing_settings" in self.model_fields_set:
            _dict['billingSettings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePortalSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "favIcon": obj.get("favIcon"),
            "logo": obj.get("logo"),
            "primaryColor": obj.get("primaryColor"),
            "secondaryColor": obj.get("secondaryColor"),
            "advanceChangeLimit": PortalAdvanceChangeLimitRequest.from_dict(obj["advanceChangeLimit"]) if obj.get("advanceChangeLimit") is not None else None,
            "billingSettings": PortalBillingSettingsRequest.from_dict(obj["billingSettings"]) if obj.get("billingSettings") is not None else None
        })
        return _obj


