# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from configuration_client.models.billing_item_tariff_calculation_type import BillingItemTariffCalculationType
from configuration_client.models.entity_subject_type import EntitySubjectType
from configuration_client.models.key_based_price_export_item_dto import KeyBasedPriceExportItemDTO
from configuration_client.models.product_export_status import ProductExportStatus
from configuration_client.models.tariff_origin import TariffOrigin
from configuration_client.models.unit_of_measure import UnitOfMeasure
from typing import Optional, Set
from typing_extensions import Self

class ProductExportItemDTO(BaseModel):
    """
    ProductExportItemDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    organisation_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the organization identifier.", alias="organisationId")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    billing_item_name: Optional[StrictStr] = Field(default=None, alias="billingItemName")
    billing_item_unit_of_measure: Optional[UnitOfMeasure] = Field(default=None, alias="billingItemUnitOfMeasure")
    status: Optional[ProductExportStatus] = None
    origin: Optional[TariffOrigin] = None
    tariff_period_start_date: Optional[datetime] = Field(default=None, alias="tariffPeriodStartDate")
    tariff_period_end_date: Optional[datetime] = Field(default=None, alias="tariffPeriodEndDate")
    tariff_type: Optional[BillingItemTariffCalculationType] = Field(default=None, alias="tariffType")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unitPrice")
    unit_price_uses_formula: Optional[StrictBool] = Field(default=None, alias="unitPriceUsesFormula")
    unit_price_formula_expression: Optional[StrictStr] = Field(default=None, alias="unitPriceFormulaExpression")
    tiered_price_type: Optional[BillingItemTariffCalculationType] = Field(default=None, alias="tieredPriceType")
    tiered_prices: Optional[List[KeyBasedPriceExportItemDTO]] = Field(default=None, alias="tieredPrices")
    custom_entity_property_key: Optional[StrictStr] = Field(default=None, alias="customEntityPropertyKey")
    custom_entity_property_prices: Optional[List[KeyBasedPriceExportItemDTO]] = Field(default=None, alias="customEntityPropertyPrices")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "organisationId", "productName", "billingItemName", "billingItemUnitOfMeasure", "status", "origin", "tariffPeriodStartDate", "tariffPeriodEndDate", "tariffType", "unitPrice", "unitPriceUsesFormula", "unitPriceFormulaExpression", "tieredPriceType", "tieredPrices", "customEntityPropertyKey", "customEntityPropertyPrices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductExportItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiered_prices (list)
        _items = []
        if self.tiered_prices:
            for _item_tiered_prices in self.tiered_prices:
                if _item_tiered_prices:
                    _items.append(_item_tiered_prices.to_dict())
            _dict['tieredPrices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_entity_property_prices (list)
        _items = []
        if self.custom_entity_property_prices:
            for _item_custom_entity_property_prices in self.custom_entity_property_prices:
                if _item_custom_entity_property_prices:
                    _items.append(_item_custom_entity_property_prices.to_dict())
            _dict['customEntityPropertyPrices'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if organisation_id (nullable) is None
        # and model_fields_set contains the field
        if self.organisation_id is None and "organisation_id" in self.model_fields_set:
            _dict['organisationId'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['productName'] = None

        # set to None if billing_item_name (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_name is None and "billing_item_name" in self.model_fields_set:
            _dict['billingItemName'] = None

        # set to None if billing_item_unit_of_measure (nullable) is None
        # and model_fields_set contains the field
        if self.billing_item_unit_of_measure is None and "billing_item_unit_of_measure" in self.model_fields_set:
            _dict['billingItemUnitOfMeasure'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if tariff_type (nullable) is None
        # and model_fields_set contains the field
        if self.tariff_type is None and "tariff_type" in self.model_fields_set:
            _dict['tariffType'] = None

        # set to None if unit_price_formula_expression (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price_formula_expression is None and "unit_price_formula_expression" in self.model_fields_set:
            _dict['unitPriceFormulaExpression'] = None

        # set to None if tiered_price_type (nullable) is None
        # and model_fields_set contains the field
        if self.tiered_price_type is None and "tiered_price_type" in self.model_fields_set:
            _dict['tieredPriceType'] = None

        # set to None if tiered_prices (nullable) is None
        # and model_fields_set contains the field
        if self.tiered_prices is None and "tiered_prices" in self.model_fields_set:
            _dict['tieredPrices'] = None

        # set to None if custom_entity_property_key (nullable) is None
        # and model_fields_set contains the field
        if self.custom_entity_property_key is None and "custom_entity_property_key" in self.model_fields_set:
            _dict['customEntityPropertyKey'] = None

        # set to None if custom_entity_property_prices (nullable) is None
        # and model_fields_set contains the field
        if self.custom_entity_property_prices is None and "custom_entity_property_prices" in self.model_fields_set:
            _dict['customEntityPropertyPrices'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductExportItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "organisationId": obj.get("organisationId"),
            "productName": obj.get("productName"),
            "billingItemName": obj.get("billingItemName"),
            "billingItemUnitOfMeasure": obj.get("billingItemUnitOfMeasure"),
            "status": obj.get("status"),
            "origin": obj.get("origin"),
            "tariffPeriodStartDate": obj.get("tariffPeriodStartDate"),
            "tariffPeriodEndDate": obj.get("tariffPeriodEndDate"),
            "tariffType": obj.get("tariffType"),
            "unitPrice": obj.get("unitPrice"),
            "unitPriceUsesFormula": obj.get("unitPriceUsesFormula"),
            "unitPriceFormulaExpression": obj.get("unitPriceFormulaExpression"),
            "tieredPriceType": obj.get("tieredPriceType"),
            "tieredPrices": [KeyBasedPriceExportItemDTO.from_dict(_item) for _item in obj["tieredPrices"]] if obj.get("tieredPrices") is not None else None,
            "customEntityPropertyKey": obj.get("customEntityPropertyKey"),
            "customEntityPropertyPrices": [KeyBasedPriceExportItemDTO.from_dict(_item) for _item in obj["customEntityPropertyPrices"]] if obj.get("customEntityPropertyPrices") is not None else None
        })
        return _obj


