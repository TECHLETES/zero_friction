# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.payment_retry_parameter_request import PaymentRetryParameterRequest
from typing import Optional, Set
from typing_extensions import Self

class UpdatePaymentParametersRequest(BaseModel):
    """
    UpdatePaymentParametersRequest
    """ # noqa: E501
    retry_parameters: Optional[List[PaymentRetryParameterRequest]] = Field(default=None, alias="retryParameters")
    refund_payment_delay_in_days: Optional[StrictInt] = Field(default=None, alias="refundPaymentDelayInDays")
    payment_terms_id: Optional[StrictStr] = Field(default=None, alias="paymentTermsId")
    default_collection_flow_id: Optional[StrictStr] = Field(default=None, alias="defaultCollectionFlowId")
    only_use_invoice_number_in_payment_references: Optional[StrictBool] = Field(default=None, alias="onlyUseInvoiceNumberInPaymentReferences")
    __properties: ClassVar[List[str]] = ["retryParameters", "refundPaymentDelayInDays", "paymentTermsId", "defaultCollectionFlowId", "onlyUseInvoiceNumberInPaymentReferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePaymentParametersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in retry_parameters (list)
        _items = []
        if self.retry_parameters:
            for _item_retry_parameters in self.retry_parameters:
                if _item_retry_parameters:
                    _items.append(_item_retry_parameters.to_dict())
            _dict['retryParameters'] = _items
        # set to None if retry_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.retry_parameters is None and "retry_parameters" in self.model_fields_set:
            _dict['retryParameters'] = None

        # set to None if payment_terms_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_terms_id is None and "payment_terms_id" in self.model_fields_set:
            _dict['paymentTermsId'] = None

        # set to None if default_collection_flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_collection_flow_id is None and "default_collection_flow_id" in self.model_fields_set:
            _dict['defaultCollectionFlowId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePaymentParametersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "retryParameters": [PaymentRetryParameterRequest.from_dict(_item) for _item in obj["retryParameters"]] if obj.get("retryParameters") is not None else None,
            "refundPaymentDelayInDays": obj.get("refundPaymentDelayInDays"),
            "paymentTermsId": obj.get("paymentTermsId"),
            "defaultCollectionFlowId": obj.get("defaultCollectionFlowId"),
            "onlyUseInvoiceNumberInPaymentReferences": obj.get("onlyUseInvoiceNumberInPaymentReferences")
        })
        return _obj


