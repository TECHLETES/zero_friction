# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.entity_subject_type import EntitySubjectType
from configuration_client.models.portal_advance_change_limit_dto import PortalAdvanceChangeLimitDTO
from configuration_client.models.portal_billing_settings_dto import PortalBillingSettingsDTO
from configuration_client.models.portal_organisation_contact_settings_dto import PortalOrganisationContactSettingsDTO
from configuration_client.models.portal_page_notification_dto import PortalPageNotificationDTO
from typing import Optional, Set
from typing_extensions import Self

class PortalSettingsDTO(BaseModel):
    """
    PortalSettingsDTO
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Gets or sets the unique identifier.")
    entity_type: Optional[EntitySubjectType] = Field(default=None, description="Gets or sets the type of the entity.", alias="entityType")
    created_date_time: Optional[datetime] = Field(default=None, description="Gets or sets the date and time when the entity was created.", alias="createdDateTime")
    discriminator: Optional[StrictStr] = Field(default=None, description="Gets or sets the discriminator value.")
    etag: Optional[StrictStr] = Field(default=None, description="Gets or sets the ETag value.", alias="_etag")
    require_attention: Optional[StrictBool] = Field(default=None, description="Gets a value indicating whether the entity requires attention.", alias="requireAttention")
    has_errors: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has errors.", alias="hasErrors")
    has_warnings: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity has warnings.", alias="hasWarnings")
    is_read_only: Optional[StrictBool] = Field(default=None, description="Gets or sets a value indicating whether the entity is read-only.", alias="isReadOnly")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    primary_color: Optional[StrictStr] = Field(default=None, alias="primaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="secondaryColor")
    fav_icon: Optional[StrictStr] = Field(default=None, alias="favIcon")
    logo: Optional[StrictStr] = None
    contact: Optional[PortalOrganisationContactSettingsDTO] = None
    portal_public_urls: Optional[List[StrictStr]] = Field(default=None, alias="portalPublicUrls")
    billing_settings: Optional[PortalBillingSettingsDTO] = Field(default=None, alias="billingSettings")
    advance_change_limit: Optional[PortalAdvanceChangeLimitDTO] = Field(default=None, alias="advanceChangeLimit")
    is_enabled: Optional[StrictBool] = Field(default=None, alias="isEnabled")
    page_notifications: Optional[List[PortalPageNotificationDTO]] = Field(default=None, alias="pageNotifications")
    __properties: ClassVar[List[str]] = ["id", "entityType", "createdDateTime", "discriminator", "_etag", "requireAttention", "hasErrors", "hasWarnings", "isReadOnly", "tenantId", "primaryColor", "secondaryColor", "favIcon", "logo", "contact", "portalPublicUrls", "billingSettings", "advanceChangeLimit", "isEnabled", "pageNotifications"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortalSettingsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "require_attention",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_settings
        if self.billing_settings:
            _dict['billingSettings'] = self.billing_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of advance_change_limit
        if self.advance_change_limit:
            _dict['advanceChangeLimit'] = self.advance_change_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in page_notifications (list)
        _items = []
        if self.page_notifications:
            for _item_page_notifications in self.page_notifications:
                if _item_page_notifications:
                    _items.append(_item_page_notifications.to_dict())
            _dict['pageNotifications'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entityType'] = None

        # set to None if discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.discriminator is None and "discriminator" in self.model_fields_set:
            _dict['discriminator'] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict['_etag'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['primaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['secondaryColor'] = None

        # set to None if fav_icon (nullable) is None
        # and model_fields_set contains the field
        if self.fav_icon is None and "fav_icon" in self.model_fields_set:
            _dict['favIcon'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if contact (nullable) is None
        # and model_fields_set contains the field
        if self.contact is None and "contact" in self.model_fields_set:
            _dict['contact'] = None

        # set to None if portal_public_urls (nullable) is None
        # and model_fields_set contains the field
        if self.portal_public_urls is None and "portal_public_urls" in self.model_fields_set:
            _dict['portalPublicUrls'] = None

        # set to None if billing_settings (nullable) is None
        # and model_fields_set contains the field
        if self.billing_settings is None and "billing_settings" in self.model_fields_set:
            _dict['billingSettings'] = None

        # set to None if advance_change_limit (nullable) is None
        # and model_fields_set contains the field
        if self.advance_change_limit is None and "advance_change_limit" in self.model_fields_set:
            _dict['advanceChangeLimit'] = None

        # set to None if page_notifications (nullable) is None
        # and model_fields_set contains the field
        if self.page_notifications is None and "page_notifications" in self.model_fields_set:
            _dict['pageNotifications'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortalSettingsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "createdDateTime": obj.get("createdDateTime"),
            "discriminator": obj.get("discriminator"),
            "_etag": obj.get("_etag"),
            "requireAttention": obj.get("requireAttention"),
            "hasErrors": obj.get("hasErrors"),
            "hasWarnings": obj.get("hasWarnings"),
            "isReadOnly": obj.get("isReadOnly"),
            "tenantId": obj.get("tenantId"),
            "primaryColor": obj.get("primaryColor"),
            "secondaryColor": obj.get("secondaryColor"),
            "favIcon": obj.get("favIcon"),
            "logo": obj.get("logo"),
            "contact": PortalOrganisationContactSettingsDTO.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "portalPublicUrls": obj.get("portalPublicUrls"),
            "billingSettings": PortalBillingSettingsDTO.from_dict(obj["billingSettings"]) if obj.get("billingSettings") is not None else None,
            "advanceChangeLimit": PortalAdvanceChangeLimitDTO.from_dict(obj["advanceChangeLimit"]) if obj.get("advanceChangeLimit") is not None else None,
            "isEnabled": obj.get("isEnabled"),
            "pageNotifications": [PortalPageNotificationDTO.from_dict(_item) for _item in obj["pageNotifications"]] if obj.get("pageNotifications") is not None else None
        })
        return _obj


