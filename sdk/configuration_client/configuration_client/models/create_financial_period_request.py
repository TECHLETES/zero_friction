# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.external_accounting_metadata_request import ExternalAccountingMetadataRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateFinancialPeriodRequest(BaseModel):
    """
    Request model for creating a new financial period.
    """ # noqa: E501
    start_date: Optional[datetime] = Field(default=None, description="Start date of the period.", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="End date of the period.", alias="endDate")
    period: Optional[StrictInt] = Field(default=None, description="Number of the financial period.")
    year: Optional[StrictInt] = Field(default=None, description="Year of the financial period.")
    metadata: Optional[ExternalAccountingMetadataRequest] = Field(default=None, description="Metadata to track back the origin of the data.  This is required so that we can push the data back to the source accounting system.")
    __properties: ClassVar[List[str]] = ["startDate", "endDate", "period", "year", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFinancialPeriodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFinancialPeriodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "period": obj.get("period"),
            "year": obj.get("year"),
            "metadata": ExternalAccountingMetadataRequest.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


