# coding: utf-8

"""
    Configuration

    Configuration API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from configuration_client.models.culture_info import CultureInfo
from typing import Optional, Set
from typing_extensions import Self

class ProductAttachmentFileDTO(BaseModel):
    """
    ProductAttachmentFileDTO
    """ # noqa: E501
    culture: Optional[CultureInfo] = None
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    internal_file_name: Optional[StrictStr] = Field(default=None, alias="internalFileName")
    attachment_id: Optional[StrictStr] = Field(default=None, alias="attachmentId")
    __properties: ClassVar[List[str]] = ["culture", "fileName", "internalFileName", "attachmentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductAttachmentFileDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if culture (nullable) is None
        # and model_fields_set contains the field
        if self.culture is None and "culture" in self.model_fields_set:
            _dict['culture'] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['fileName'] = None

        # set to None if internal_file_name (nullable) is None
        # and model_fields_set contains the field
        if self.internal_file_name is None and "internal_file_name" in self.model_fields_set:
            _dict['internalFileName'] = None

        # set to None if attachment_id (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_id is None and "attachment_id" in self.model_fields_set:
            _dict['attachmentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductAttachmentFileDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "culture": obj.get("culture"),
            "fileName": obj.get("fileName"),
            "internalFileName": obj.get("internalFileName"),
            "attachmentId": obj.get("attachmentId")
        })
        return _obj


